/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.userprofile.service

import com.twitter.finagle.SourcedException
import com.twitter.finagle.{service => ctfs}
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.{Protocols,RichClientParam, ThriftClientRequest}
import com.twitter.scrooge.{TReusableBuffer, ThriftStruct, ThriftStructCodec}
import com.twitter.util.{Future, Return, Throw, Throwables}
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryInputTransport
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class TUserProfileService$FinagleClient(
    val service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    val clientParam: RichClientParam)
  extends TUserProfileService[Future] {

  @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
  def this(
    service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
    serviceName: String = "TUserProfileService",
    stats: StatsReceiver = NullStatsReceiver,
    responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default
  ) = this(
    service,
    RichClientParam(
      protocolFactory,
      serviceName,
      clientStats = stats,
      responseClassifier = responseClassifier
    )
  )

  @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
  def this(
    service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    protocolFactory: TProtocolFactory,
    serviceName: String,
    stats: StatsReceiver
  ) = this(service, protocolFactory, serviceName, stats, ctfs.ResponseClassifier.Default)

  import TUserProfileService._

  def serviceName: String = clientParam.serviceName

  override def asClosable: _root_.com.twitter.util.Closable = service

  private[this] def protocolFactory: TProtocolFactory = clientParam.restrictedProtocolFactory
  private[this] def maxReusableBufferSize: Int = clientParam.maxThriftBufferSize

  private[this] val tlReusableBuffer = TReusableBuffer(maxThriftBufferSize = maxReusableBufferSize)

  protected def encodeRequest(name: String, args: ThriftStruct) = {
    val memoryBuffer = tlReusableBuffer.get()
    try {
      val oprot = protocolFactory.getProtocol(memoryBuffer)

      oprot.writeMessageBegin(new TMessage(name, TMessageType.CALL, 0))
      args.write(oprot)
      oprot.writeMessageEnd()
      oprot.getTransport().flush()
      val bytes = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length())
      new ThriftClientRequest(bytes, false)
    } finally {
      tlReusableBuffer.reset()
    }
  }

  protected def decodeResponse[T <: ThriftStruct](resBytes: Array[Byte], codec: ThriftStructCodec[T]) = {
    val iprot = protocolFactory.getProtocol(new TMemoryInputTransport(resBytes))
    val msg = iprot.readMessageBegin()
    try {
      if (msg.`type` == TMessageType.EXCEPTION) {
        val exception = TApplicationException.readFrom(iprot) match {
          case sourced: SourcedException =>
            if (serviceName != "") sourced.serviceName = serviceName
            sourced
          case e => e
        }
        throw exception
      } else {
        codec.decode(iprot)
      }
    } finally {
      iprot.readMessageEnd()
    }
  }

  protected def missingResult(name: String) = {
    new TApplicationException(
      TApplicationException.MISSING_RESULT,
      name + " failed: unknown result"
    )
  }

  protected def setServiceName(ex: Throwable): Throwable =
    if (this.serviceName == "") ex
    else {
      ex match {
        case se: SourcedException =>
          se.serviceName = this.serviceName
          se
        case _ => ex
      }
    }

  // ----- end boilerplate.

  private[this] def stats: StatsReceiver = clientParam.clientStats
  private[this] def responseClassifier: ctfs.ResponseClassifier = clientParam.responseClassifier

  private[this] val scopedStats = if (serviceName != "") stats.scope(serviceName) else stats
  private[this] object __stats_ping {
    val RequestsCounter = scopedStats.scope("ping").counter("requests")
    val SuccessCounter = scopedStats.scope("ping").counter("success")
    val FailuresCounter = scopedStats.scope("ping").counter("failures")
    val FailuresScope = scopedStats.scope("ping").scope("failures")
  }
  val pingTUserProfileServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[String] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, Ping.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("ping"))
        }
      }
    }
  }
  
  def ping(): Future[String] = {
    __stats_ping.RequestsCounter.incr()
    val inputArgs = Ping.Args()
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[String](inputArgs, pingTUserProfileServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("ping", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_ping.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_ping.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_ping.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_checkSession {
    val RequestsCounter = scopedStats.scope("checkSession").counter("requests")
    val SuccessCounter = scopedStats.scope("checkSession").counter("success")
    val FailuresCounter = scopedStats.scope("checkSession").counter("failures")
    val FailuresScope = scopedStats.scope("checkSession").scope("failures")
  }
  val checkSessionTUserProfileServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.userprofile.domain.thrift.TFullUserAuthInfoResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, CheckSession.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("checkSession"))
        }
      }
    }
  }
  
  def checkSession(sessionId: String): Future[xed.userprofile.domain.thrift.TFullUserAuthInfoResp] = {
    __stats_checkSession.RequestsCounter.incr()
    val inputArgs = CheckSession.Args(sessionId)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.userprofile.domain.thrift.TFullUserAuthInfoResp](inputArgs, checkSessionTUserProfileServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("checkSession", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_checkSession.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_checkSession.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_checkSession.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getUserProfileBySessionID {
    val RequestsCounter = scopedStats.scope("getUserProfileBySessionID").counter("requests")
    val SuccessCounter = scopedStats.scope("getUserProfileBySessionID").counter("success")
    val FailuresCounter = scopedStats.scope("getUserProfileBySessionID").counter("failures")
    val FailuresScope = scopedStats.scope("getUserProfileBySessionID").scope("failures")
  }
  val getUserProfileBySessionIDTUserProfileServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.userprofile.domain.thrift.TFullUserInfoResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetUserProfileBySessionID.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getUserProfileBySessionID"))
        }
      }
    }
  }
  
  def getUserProfileBySessionID(sessionId: String): Future[xed.userprofile.domain.thrift.TFullUserInfoResp] = {
    __stats_getUserProfileBySessionID.RequestsCounter.incr()
    val inputArgs = GetUserProfileBySessionID.Args(sessionId)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.userprofile.domain.thrift.TFullUserInfoResp](inputArgs, getUserProfileBySessionIDTUserProfileServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getUserProfileBySessionID", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getUserProfileBySessionID.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getUserProfileBySessionID.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getUserProfileBySessionID.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getUserProfileByUsername {
    val RequestsCounter = scopedStats.scope("getUserProfileByUsername").counter("requests")
    val SuccessCounter = scopedStats.scope("getUserProfileByUsername").counter("success")
    val FailuresCounter = scopedStats.scope("getUserProfileByUsername").counter("failures")
    val FailuresScope = scopedStats.scope("getUserProfileByUsername").scope("failures")
  }
  val getUserProfileByUsernameTUserProfileServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.userprofile.domain.thrift.TFullUserInfoResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetUserProfileByUsername.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getUserProfileByUsername"))
        }
      }
    }
  }
  
  def getUserProfileByUsername(username: String): Future[xed.userprofile.domain.thrift.TFullUserInfoResp] = {
    __stats_getUserProfileByUsername.RequestsCounter.incr()
    val inputArgs = GetUserProfileByUsername.Args(username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.userprofile.domain.thrift.TFullUserInfoResp](inputArgs, getUserProfileByUsernameTUserProfileServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getUserProfileByUsername", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getUserProfileByUsername.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getUserProfileByUsername.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getUserProfileByUsername.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getUserProfile {
    val RequestsCounter = scopedStats.scope("getUserProfile").counter("requests")
    val SuccessCounter = scopedStats.scope("getUserProfile").counter("success")
    val FailuresCounter = scopedStats.scope("getUserProfile").counter("failures")
    val FailuresScope = scopedStats.scope("getUserProfile").scope("failures")
  }
  val getUserProfileTUserProfileServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.userprofile.domain.thrift.TUserProfileResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetUserProfile.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getUserProfile"))
        }
      }
    }
  }
  
  def getUserProfile(username: String): Future[xed.userprofile.domain.thrift.TUserProfileResp] = {
    __stats_getUserProfile.RequestsCounter.incr()
    val inputArgs = GetUserProfile.Args(username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.userprofile.domain.thrift.TUserProfileResp](inputArgs, getUserProfileTUserProfileServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getUserProfile", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getUserProfile.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getUserProfile.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getUserProfile.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getProfileByEmail {
    val RequestsCounter = scopedStats.scope("getProfileByEmail").counter("requests")
    val SuccessCounter = scopedStats.scope("getProfileByEmail").counter("success")
    val FailuresCounter = scopedStats.scope("getProfileByEmail").counter("failures")
    val FailuresScope = scopedStats.scope("getProfileByEmail").scope("failures")
  }
  val getProfileByEmailTUserProfileServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.userprofile.domain.thrift.TUserProfileResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetProfileByEmail.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getProfileByEmail"))
        }
      }
    }
  }
  
  def getProfileByEmail(email: String): Future[xed.userprofile.domain.thrift.TUserProfileResp] = {
    __stats_getProfileByEmail.RequestsCounter.incr()
    val inputArgs = GetProfileByEmail.Args(email)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.userprofile.domain.thrift.TUserProfileResp](inputArgs, getProfileByEmailTUserProfileServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getProfileByEmail", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getProfileByEmail.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getProfileByEmail.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getProfileByEmail.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_multiGetUserProfiles {
    val RequestsCounter = scopedStats.scope("multiGetUserProfiles").counter("requests")
    val SuccessCounter = scopedStats.scope("multiGetUserProfiles").counter("success")
    val FailuresCounter = scopedStats.scope("multiGetUserProfiles").counter("failures")
    val FailuresScope = scopedStats.scope("multiGetUserProfiles").scope("failures")
  }
  val multiGetUserProfilesTUserProfileServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.userprofile.domain.thrift.TMultiUserProfileResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, MultiGetUserProfiles.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("multiGetUserProfiles"))
        }
      }
    }
  }
  
  def multiGetUserProfiles(usernames: Set[String] = Set[String]()): Future[xed.userprofile.domain.thrift.TMultiUserProfileResp] = {
    __stats_multiGetUserProfiles.RequestsCounter.incr()
    val inputArgs = MultiGetUserProfiles.Args(usernames)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.userprofile.domain.thrift.TMultiUserProfileResp](inputArgs, multiGetUserProfilesTUserProfileServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("multiGetUserProfiles", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_multiGetUserProfiles.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_multiGetUserProfiles.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_multiGetUserProfiles.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getUserProfiles {
    val RequestsCounter = scopedStats.scope("getUserProfiles").counter("requests")
    val SuccessCounter = scopedStats.scope("getUserProfiles").counter("success")
    val FailuresCounter = scopedStats.scope("getUserProfiles").counter("failures")
    val FailuresScope = scopedStats.scope("getUserProfiles").scope("failures")
  }
  val getUserProfilesTUserProfileServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.userprofile.domain.thrift.TUserProfileSearchResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetUserProfiles.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getUserProfiles"))
        }
      }
    }
  }
  
  def getUserProfiles(from: Int, size: Int): Future[xed.userprofile.domain.thrift.TUserProfileSearchResp] = {
    __stats_getUserProfiles.RequestsCounter.incr()
    val inputArgs = GetUserProfiles.Args(from, size)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.userprofile.domain.thrift.TUserProfileSearchResp](inputArgs, getUserProfilesTUserProfileServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getUserProfiles", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getUserProfiles.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getUserProfiles.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getUserProfiles.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
}
