/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.userprofile.domain.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TUserInfo extends ValidatingThriftStructCodec3[TUserInfo] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TUserInfo")
  val UsernameField = new TField("username", TType.STRING, 1)
  val UsernameFieldManifest = implicitly[Manifest[String]]
  val IsActiveField = new TField("isActive", TType.BOOL, 2)
  val IsActiveFieldManifest = implicitly[Manifest[Boolean]]
  val CreateTimeField = new TField("createTime", TType.I64, 3)
  val CreateTimeFieldManifest = implicitly[Manifest[Long]]
  val RolesField = new TField("roles", TType.LIST, 4)
  val RolesFieldManifest = implicitly[Manifest[Seq[Int]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      UsernameField,
      false,
      true,
      UsernameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      IsActiveField,
      false,
      true,
      IsActiveFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CreateTimeField,
      false,
      true,
      CreateTimeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      RolesField,
      false,
      true,
      RolesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[Int]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TUserInfo): Unit = {
    if (_item.username == null) throw new TProtocolException("Required field username cannot be null")
    if (_item.roles == null) throw new TProtocolException("Required field roles cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TUserInfo): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.username == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.username)
    buf ++= validateField(item.isActive)
    buf ++= validateField(item.createTime)
    if (item.roles == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(3))
    buf ++= validateField(item.roles)
    buf.toList
  }

  def withoutPassthroughFields(original: TUserInfo): TUserInfo =
    new Immutable(
      username =
        {
          val field = original.username
          field
        },
      isActive =
        {
          val field = original.isActive
          field
        },
      createTime =
        {
          val field = original.createTime
          field
        },
      roles =
        {
          val field = original.roles
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: TUserInfo, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TUserInfo = {

    var usernameOffset: Int = -1
    var _got_username = false
    var isActive: Boolean = false
    var _got_isActive = false
    var createTime: Long = 0L
    var _got_createTime = false
    var roles: Seq[Int] = Seq[Int]()
    var _got_roles = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                usernameOffset = _iprot.offsetSkipString
    
                _got_username = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.BOOL =>
    
                isActive = readIsActiveValue(_iprot)
                _got_isActive = true
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'isActive' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
    
                createTime = readCreateTimeValue(_iprot)
                _got_createTime = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'createTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
    
                roles = readRolesValue(_iprot)
                _got_roles = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'roles' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_username) throw new TProtocolException("Required field 'username' was not found in serialized data for struct TUserInfo")
    if (!_got_isActive) throw new TProtocolException("Required field 'isActive' was not found in serialized data for struct TUserInfo")
    if (!_got_createTime) throw new TProtocolException("Required field 'createTime' was not found in serialized data for struct TUserInfo")
    if (!_got_roles) throw new TProtocolException("Required field 'roles' was not found in serialized data for struct TUserInfo")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      usernameOffset,
      isActive,
      createTime,
      roles,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TUserInfo =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TUserInfo = {
    var username: String = null
    var _got_username = false
    var isActive: Boolean = false
    var _got_isActive = false
    var createTime: Long = 0L
    var _got_createTime = false
    var roles: Seq[Int] = Seq[Int]()
    var _got_roles = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                username = readUsernameValue(_iprot)
                _got_username = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.BOOL =>
                isActive = readIsActiveValue(_iprot)
                _got_isActive = true
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'isActive' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I64 =>
                createTime = readCreateTimeValue(_iprot)
                _got_createTime = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'createTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
                roles = readRolesValue(_iprot)
                _got_roles = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'roles' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_username) throw new TProtocolException("Required field 'username' was not found in serialized data for struct TUserInfo")
    if (!_got_isActive) throw new TProtocolException("Required field 'isActive' was not found in serialized data for struct TUserInfo")
    if (!_got_createTime) throw new TProtocolException("Required field 'createTime' was not found in serialized data for struct TUserInfo")
    if (!_got_roles) throw new TProtocolException("Required field 'roles' was not found in serialized data for struct TUserInfo")
    new Immutable(
      username,
      isActive,
      createTime,
      roles,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    username: String,
    isActive: Boolean,
    createTime: Long,
    roles: Seq[Int] = Seq[Int]()
  ): TUserInfo =
    new Immutable(
      username,
      isActive,
      createTime,
      roles
    )

  def unapply(_item: TUserInfo): _root_.scala.Option[_root_.scala.Tuple4[String, Boolean, Long, Seq[Int]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readUsernameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeUsernameField(username_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UsernameField)
    writeUsernameValue(username_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUsernameValue(username_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(username_item)
  }

  @inline private[thrift] def readIsActiveValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeIsActiveField(isActive_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IsActiveField)
    writeIsActiveValue(isActive_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIsActiveValue(isActive_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(isActive_item)
  }

  @inline private[thrift] def readCreateTimeValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeCreateTimeField(createTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CreateTimeField)
    writeCreateTimeValue(createTime_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCreateTimeValue(createTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(createTime_item)
  }

  @inline private[thrift] def readRolesValue(_iprot: TProtocol): Seq[Int] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[Int](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readI32()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeRolesField(roles_item: Seq[Int], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(RolesField)
    writeRolesValue(roles_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeRolesValue(roles_item: Seq[Int], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.I32, roles_item.size))
    roles_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = roles_item.size
        while (_i < _size) {
          val roles_item_element = roles_item(_i)
          _oprot.writeI32(roles_item_element)
          _i += 1
        }
      case _ =>
        roles_item.foreach { roles_item_element =>
          _oprot.writeI32(roles_item_element)
        }
    }
    _oprot.writeListEnd()
  }


  object Immutable extends ThriftStructCodec3[TUserInfo] {
    override def encode(_item: TUserInfo, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TUserInfo = TUserInfo.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TUserInfo] = TUserInfo.metaData
  }

  /**
   * The default read-only implementation of TUserInfo.  You typically should not need to
   * directly reference this class; instead, use the TUserInfo.apply method to construct
   * new instances.
   */
  class Immutable(
      val username: String,
      val isActive: Boolean,
      val createTime: Long,
      val roles: Seq[Int],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TUserInfo {
    def this(
      username: String,
      isActive: Boolean,
      createTime: Long,
      roles: Seq[Int] = Seq[Int]()
    ) = this(
      username,
      isActive,
      createTime,
      roles,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      usernameOffset: Int,
      val isActive: Boolean,
      val createTime: Long,
      val roles: Seq[Int],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TUserInfo {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val username: String =
      if (usernameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, usernameOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TUserInfo trait with additional state or
   * behavior and implement the read-only methods from TUserInfo using an underlying
   * instance.
   */
  trait Proxy extends TUserInfo {
    protected def _underlying_TUserInfo: TUserInfo
    override def username: String = _underlying_TUserInfo.username
    override def isActive: Boolean = _underlying_TUserInfo.isActive
    override def createTime: Long = _underlying_TUserInfo.createTime
    override def roles: Seq[Int] = _underlying_TUserInfo.roles
    override def _passthroughFields = _underlying_TUserInfo._passthroughFields
  }
}

/**
 * Prefer the companion object's [[xed.userprofile.domain.thrift.TUserInfo.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TUserInfo
  extends ThriftStruct
  with _root_.scala.Product4[String, Boolean, Long, Seq[Int]]
  with ValidatingThriftStruct[TUserInfo]
  with java.io.Serializable
{
  import TUserInfo._

  def username: String
  def isActive: Boolean
  def createTime: Long
  def roles: Seq[Int]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = username
  def _2 = isActive
  def _3 = createTime
  def _4 = roles

  def toTuple: _root_.scala.Tuple4[String, Boolean, Long, Seq[Int]] = {
    (
      username,
      isActive,
      createTime,
      roles
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (username ne null) {
                writeUsernameValue(username, _oprot)
                _root_.scala.Some(TUserInfo.UsernameField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (true) {
                writeIsActiveValue(isActive, _oprot)
                _root_.scala.Some(TUserInfo.IsActiveField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeCreateTimeValue(createTime, _oprot)
                _root_.scala.Some(TUserInfo.CreateTimeField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (roles ne null) {
                writeRolesValue(roles, _oprot)
                _root_.scala.Some(TUserInfo.RolesField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TUserInfo = {
    var username: String = this.username
    var isActive: Boolean = this.isActive
    var createTime: Long = this.createTime
    var roles: Seq[Int] = this.roles
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        username = readUsernameValue(_blob.read)
      case 2 =>
        isActive = readIsActiveValue(_blob.read)
      case 3 =>
        createTime = readCreateTimeValue(_blob.read)
      case 4 =>
        roles = readRolesValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      username,
      isActive,
      createTime,
      roles,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TUserInfo = {
    var username: String = this.username
    var isActive: Boolean = this.isActive
    var createTime: Long = this.createTime
    var roles: Seq[Int] = this.roles

    _fieldId match {
      case 1 =>
        username = null
      case 2 =>
        isActive = false
      case 3 =>
        createTime = 0L
      case 4 =>
        roles = Seq[Int]()
      case _ =>
    }
    new Immutable(
      username,
      isActive,
      createTime,
      roles,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetUsername: TUserInfo = unsetField(1)

  def unsetIsActive: TUserInfo = unsetField(2)

  def unsetCreateTime: TUserInfo = unsetField(3)

  def unsetRoles: TUserInfo = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    TUserInfo.validate(this)
    _oprot.writeStructBegin(Struct)
    if (username ne null) writeUsernameField(username, _oprot)
    writeIsActiveField(isActive, _oprot)
    writeCreateTimeField(createTime, _oprot)
    if (roles ne null) writeRolesField(roles, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    username: String = this.username,
    isActive: Boolean = this.isActive,
    createTime: Long = this.createTime,
    roles: Seq[Int] = this.roles,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TUserInfo =
    new Immutable(
      username,
      isActive,
      createTime,
      roles,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TUserInfo]

  private def _equals(x: TUserInfo, y: TUserInfo): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TUserInfo]) &&
      _passthroughFields == other.asInstanceOf[TUserInfo]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.username
    case 1 => this.isActive
    case 2 => this.createTime
    case 3 => this.roles
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TUserInfo"

  def _codec: ValidatingThriftStructCodec3[TUserInfo] = TUserInfo
}

