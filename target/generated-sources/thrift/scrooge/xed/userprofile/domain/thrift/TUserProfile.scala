/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.userprofile.domain.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TUserProfile extends ValidatingThriftStructCodec3[TUserProfile] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TUserProfile")
  val UsernameField = new TField("username", TType.STRING, 1)
  val UsernameFieldManifest = implicitly[Manifest[String]]
  val FullNameField = new TField("fullName", TType.STRING, 2)
  val FullNameFieldManifest = implicitly[Manifest[String]]
  val EmailField = new TField("email", TType.STRING, 3)
  val EmailFieldManifest = implicitly[Manifest[String]]
  val AvatarField = new TField("avatar", TType.STRING, 4)
  val AvatarFieldManifest = implicitly[Manifest[String]]
  val MobilePhoneField = new TField("mobilePhone", TType.STRING, 5)
  val MobilePhoneFieldManifest = implicitly[Manifest[String]]
  val LastNameField = new TField("lastName", TType.STRING, 6)
  val LastNameFieldManifest = implicitly[Manifest[String]]
  val FirstNameField = new TField("firstName", TType.STRING, 7)
  val FirstNameFieldManifest = implicitly[Manifest[String]]
  val NativeLanguagesField = new TField("nativeLanguages", TType.LIST, 8)
  val NativeLanguagesFieldManifest = implicitly[Manifest[Seq[String]]]
  val NationalityField = new TField("nationality", TType.STRING, 9)
  val NationalityFieldManifest = implicitly[Manifest[String]]
  val AdditionalInfoField = new TField("additionalInfo", TType.MAP, 10)
  val AdditionalInfoFieldManifest = implicitly[Manifest[Map[String, String]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      UsernameField,
      false,
      true,
      UsernameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FullNameField,
      true,
      false,
      FullNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      EmailField,
      true,
      false,
      EmailFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      AvatarField,
      true,
      false,
      AvatarFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      MobilePhoneField,
      true,
      false,
      MobilePhoneFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      LastNameField,
      true,
      false,
      LastNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FirstNameField,
      true,
      false,
      FirstNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NativeLanguagesField,
      true,
      false,
      NativeLanguagesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NationalityField,
      true,
      false,
      NationalityFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      AdditionalInfoField,
      true,
      false,
      AdditionalInfoFieldManifest,
      _root_.scala.Some(implicitly[Manifest[String]]),
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TUserProfile): Unit = {
    if (_item.username == null) throw new TProtocolException("Required field username cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TUserProfile): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.username == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.username)
    buf ++= validateField(item.fullName)
    buf ++= validateField(item.email)
    buf ++= validateField(item.avatar)
    buf ++= validateField(item.mobilePhone)
    buf ++= validateField(item.lastName)
    buf ++= validateField(item.firstName)
    buf ++= validateField(item.nativeLanguages)
    buf ++= validateField(item.nationality)
    buf ++= validateField(item.additionalInfo)
    buf.toList
  }

  def withoutPassthroughFields(original: TUserProfile): TUserProfile =
    new Immutable(
      username =
        {
          val field = original.username
          field
        },
      fullName =
        {
          val field = original.fullName
          field.map { field =>
            field
          }
        },
      email =
        {
          val field = original.email
          field.map { field =>
            field
          }
        },
      avatar =
        {
          val field = original.avatar
          field.map { field =>
            field
          }
        },
      mobilePhone =
        {
          val field = original.mobilePhone
          field.map { field =>
            field
          }
        },
      lastName =
        {
          val field = original.lastName
          field.map { field =>
            field
          }
        },
      firstName =
        {
          val field = original.firstName
          field.map { field =>
            field
          }
        },
      nativeLanguages =
        {
          val field = original.nativeLanguages
          field.map { field =>
            field.map { field =>
              field
            }
          }
        },
      nationality =
        {
          val field = original.nationality
          field.map { field =>
            field
          }
        },
      additionalInfo =
        {
          val field = original.additionalInfo
          field.map { field =>
            field.map { case (key, value) =>
                val newKey = {
                val field = key
                field
              }
  
  
                val newValue = {
                val field = value
                field
              }
  
  
              newKey -> newValue
            }
          }
        }
    )

  override def encode(_item: TUserProfile, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TUserProfile = {

    var usernameOffset: Int = -1
    var _got_username = false
    var fullNameOffset: Int = -1
    var emailOffset: Int = -1
    var avatarOffset: Int = -1
    var mobilePhoneOffset: Int = -1
    var lastNameOffset: Int = -1
    var firstNameOffset: Int = -1
    var nativeLanguages: Option[Seq[String]] = None
    var nationalityOffset: Int = -1
    var additionalInfo: Option[Map[String, String]] = None

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                usernameOffset = _iprot.offsetSkipString
    
                _got_username = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                fullNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'fullName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                emailOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'email' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                avatarOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'avatar' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                mobilePhoneOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'mobilePhone' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                lastNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'lastName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                firstNameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'firstName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.LIST =>
    
                nativeLanguages = Some(readNativeLanguagesValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'nativeLanguages' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.STRING =>
                nationalityOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'nationality' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.MAP =>
    
                additionalInfo = Some(readAdditionalInfoValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'additionalInfo' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_username) throw new TProtocolException("Required field 'username' was not found in serialized data for struct TUserProfile")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      usernameOffset,
      fullNameOffset,
      emailOffset,
      avatarOffset,
      mobilePhoneOffset,
      lastNameOffset,
      firstNameOffset,
      nativeLanguages,
      nationalityOffset,
      additionalInfo,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TUserProfile =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TUserProfile = {
    var username: String = null
    var _got_username = false
    var fullName: _root_.scala.Option[String] = _root_.scala.None
    var email: _root_.scala.Option[String] = _root_.scala.None
    var avatar: _root_.scala.Option[String] = _root_.scala.None
    var mobilePhone: _root_.scala.Option[String] = _root_.scala.None
    var lastName: _root_.scala.Option[String] = _root_.scala.None
    var firstName: _root_.scala.Option[String] = _root_.scala.None
    var nativeLanguages: _root_.scala.Option[Seq[String]] = _root_.scala.None
    var nationality: _root_.scala.Option[String] = _root_.scala.None
    var additionalInfo: _root_.scala.Option[Map[String, String]] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                username = readUsernameValue(_iprot)
                _got_username = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                fullName = _root_.scala.Some(readFullNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'fullName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                email = _root_.scala.Some(readEmailValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'email' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                avatar = _root_.scala.Some(readAvatarValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'avatar' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                mobilePhone = _root_.scala.Some(readMobilePhoneValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'mobilePhone' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                lastName = _root_.scala.Some(readLastNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'lastName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.STRING =>
                firstName = _root_.scala.Some(readFirstNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'firstName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.LIST =>
                nativeLanguages = _root_.scala.Some(readNativeLanguagesValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'nativeLanguages' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.STRING =>
                nationality = _root_.scala.Some(readNationalityValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'nationality' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.MAP =>
                additionalInfo = _root_.scala.Some(readAdditionalInfoValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'additionalInfo' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_username) throw new TProtocolException("Required field 'username' was not found in serialized data for struct TUserProfile")
    new Immutable(
      username,
      fullName,
      email,
      avatar,
      mobilePhone,
      lastName,
      firstName,
      nativeLanguages,
      nationality,
      additionalInfo,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    username: String,
    fullName: _root_.scala.Option[String] = _root_.scala.None,
    email: _root_.scala.Option[String] = _root_.scala.None,
    avatar: _root_.scala.Option[String] = _root_.scala.None,
    mobilePhone: _root_.scala.Option[String] = _root_.scala.None,
    lastName: _root_.scala.Option[String] = _root_.scala.None,
    firstName: _root_.scala.Option[String] = _root_.scala.None,
    nativeLanguages: _root_.scala.Option[Seq[String]] = _root_.scala.None,
    nationality: _root_.scala.Option[String] = _root_.scala.None,
    additionalInfo: _root_.scala.Option[Map[String, String]] = _root_.scala.None
  ): TUserProfile =
    new Immutable(
      username,
      fullName,
      email,
      avatar,
      mobilePhone,
      lastName,
      firstName,
      nativeLanguages,
      nationality,
      additionalInfo
    )

  def unapply(_item: TUserProfile): _root_.scala.Option[_root_.scala.Tuple10[String, Option[String], Option[String], Option[String], Option[String], Option[String], Option[String], Option[Seq[String]], Option[String], Option[Map[String, String]]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readUsernameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeUsernameField(username_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UsernameField)
    writeUsernameValue(username_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUsernameValue(username_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(username_item)
  }

  @inline private[thrift] def readFullNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeFullNameField(fullName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FullNameField)
    writeFullNameValue(fullName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFullNameValue(fullName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(fullName_item)
  }

  @inline private[thrift] def readEmailValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeEmailField(email_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(EmailField)
    writeEmailValue(email_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeEmailValue(email_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(email_item)
  }

  @inline private[thrift] def readAvatarValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeAvatarField(avatar_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AvatarField)
    writeAvatarValue(avatar_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAvatarValue(avatar_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(avatar_item)
  }

  @inline private[thrift] def readMobilePhoneValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeMobilePhoneField(mobilePhone_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MobilePhoneField)
    writeMobilePhoneValue(mobilePhone_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMobilePhoneValue(mobilePhone_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(mobilePhone_item)
  }

  @inline private[thrift] def readLastNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeLastNameField(lastName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(LastNameField)
    writeLastNameValue(lastName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLastNameValue(lastName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(lastName_item)
  }

  @inline private[thrift] def readFirstNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeFirstNameField(firstName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FirstNameField)
    writeFirstNameValue(firstName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFirstNameValue(firstName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(firstName_item)
  }

  @inline private[thrift] def readNativeLanguagesValue(_iprot: TProtocol): Seq[String] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[String](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readString()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeNativeLanguagesField(nativeLanguages_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NativeLanguagesField)
    writeNativeLanguagesValue(nativeLanguages_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNativeLanguagesValue(nativeLanguages_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRING, nativeLanguages_item.size))
    nativeLanguages_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = nativeLanguages_item.size
        while (_i < _size) {
          val nativeLanguages_item_element = nativeLanguages_item(_i)
          _oprot.writeString(nativeLanguages_item_element)
          _i += 1
        }
      case _ =>
        nativeLanguages_item.foreach { nativeLanguages_item_element =>
          _oprot.writeString(nativeLanguages_item_element)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readNationalityValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeNationalityField(nationality_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NationalityField)
    writeNationalityValue(nationality_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNationalityValue(nationality_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(nationality_item)
  }

  @inline private[thrift] def readAdditionalInfoValue(_iprot: TProtocol): Map[String, String] = {
    val _map = _iprot.readMapBegin()
    if (_map.size == 0) {
      _iprot.readMapEnd()
      Map.empty[String, String]
    } else {
      val _rv = new mutable$HashMap[String, String]
      var _i = 0
      while (_i < _map.size) {
        val _key = {
          _iprot.readString()
        }
        val _value = {
          _iprot.readString()
        }
        _rv(_key) = _value
        _i += 1
      }
      _iprot.readMapEnd()
      _rv
    }
  }

  @inline private def writeAdditionalInfoField(additionalInfo_item: Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AdditionalInfoField)
    writeAdditionalInfoValue(additionalInfo_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAdditionalInfoValue(additionalInfo_item: Map[String, String], _oprot: TProtocol): Unit = {
    _oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, additionalInfo_item.size))
    additionalInfo_item.foreach { case (additionalInfo_item_key, additionalInfo_item_value) =>
      _oprot.writeString(additionalInfo_item_key)
      _oprot.writeString(additionalInfo_item_value)
    }
    _oprot.writeMapEnd()
  }


  object Immutable extends ThriftStructCodec3[TUserProfile] {
    override def encode(_item: TUserProfile, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TUserProfile = TUserProfile.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TUserProfile] = TUserProfile.metaData
  }

  /**
   * The default read-only implementation of TUserProfile.  You typically should not need to
   * directly reference this class; instead, use the TUserProfile.apply method to construct
   * new instances.
   */
  class Immutable(
      val username: String,
      val fullName: _root_.scala.Option[String],
      val email: _root_.scala.Option[String],
      val avatar: _root_.scala.Option[String],
      val mobilePhone: _root_.scala.Option[String],
      val lastName: _root_.scala.Option[String],
      val firstName: _root_.scala.Option[String],
      val nativeLanguages: _root_.scala.Option[Seq[String]],
      val nationality: _root_.scala.Option[String],
      val additionalInfo: _root_.scala.Option[Map[String, String]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TUserProfile {
    def this(
      username: String,
      fullName: _root_.scala.Option[String] = _root_.scala.None,
      email: _root_.scala.Option[String] = _root_.scala.None,
      avatar: _root_.scala.Option[String] = _root_.scala.None,
      mobilePhone: _root_.scala.Option[String] = _root_.scala.None,
      lastName: _root_.scala.Option[String] = _root_.scala.None,
      firstName: _root_.scala.Option[String] = _root_.scala.None,
      nativeLanguages: _root_.scala.Option[Seq[String]] = _root_.scala.None,
      nationality: _root_.scala.Option[String] = _root_.scala.None,
      additionalInfo: _root_.scala.Option[Map[String, String]] = _root_.scala.None
    ) = this(
      username,
      fullName,
      email,
      avatar,
      mobilePhone,
      lastName,
      firstName,
      nativeLanguages,
      nationality,
      additionalInfo,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      usernameOffset: Int,
      fullNameOffset: Int,
      emailOffset: Int,
      avatarOffset: Int,
      mobilePhoneOffset: Int,
      lastNameOffset: Int,
      firstNameOffset: Int,
      val nativeLanguages: _root_.scala.Option[Seq[String]],
      nationalityOffset: Int,
      val additionalInfo: _root_.scala.Option[Map[String, String]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TUserProfile {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val username: String =
      if (usernameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, usernameOffset)
      }
    lazy val fullName: _root_.scala.Option[String] =
      if (fullNameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, fullNameOffset))
      }
    lazy val email: _root_.scala.Option[String] =
      if (emailOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, emailOffset))
      }
    lazy val avatar: _root_.scala.Option[String] =
      if (avatarOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, avatarOffset))
      }
    lazy val mobilePhone: _root_.scala.Option[String] =
      if (mobilePhoneOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, mobilePhoneOffset))
      }
    lazy val lastName: _root_.scala.Option[String] =
      if (lastNameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, lastNameOffset))
      }
    lazy val firstName: _root_.scala.Option[String] =
      if (firstNameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, firstNameOffset))
      }
    lazy val nationality: _root_.scala.Option[String] =
      if (nationalityOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, nationalityOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TUserProfile trait with additional state or
   * behavior and implement the read-only methods from TUserProfile using an underlying
   * instance.
   */
  trait Proxy extends TUserProfile {
    protected def _underlying_TUserProfile: TUserProfile
    override def username: String = _underlying_TUserProfile.username
    override def fullName: _root_.scala.Option[String] = _underlying_TUserProfile.fullName
    override def email: _root_.scala.Option[String] = _underlying_TUserProfile.email
    override def avatar: _root_.scala.Option[String] = _underlying_TUserProfile.avatar
    override def mobilePhone: _root_.scala.Option[String] = _underlying_TUserProfile.mobilePhone
    override def lastName: _root_.scala.Option[String] = _underlying_TUserProfile.lastName
    override def firstName: _root_.scala.Option[String] = _underlying_TUserProfile.firstName
    override def nativeLanguages: _root_.scala.Option[Seq[String]] = _underlying_TUserProfile.nativeLanguages
    override def nationality: _root_.scala.Option[String] = _underlying_TUserProfile.nationality
    override def additionalInfo: _root_.scala.Option[Map[String, String]] = _underlying_TUserProfile.additionalInfo
    override def _passthroughFields = _underlying_TUserProfile._passthroughFields
  }
}

/**
 * Prefer the companion object's [[xed.userprofile.domain.thrift.TUserProfile.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TUserProfile
  extends ThriftStruct
  with _root_.scala.Product10[String, Option[String], Option[String], Option[String], Option[String], Option[String], Option[String], Option[Seq[String]], Option[String], Option[Map[String, String]]]
  with ValidatingThriftStruct[TUserProfile]
  with java.io.Serializable
{
  import TUserProfile._

  def username: String
  def fullName: _root_.scala.Option[String]
  def email: _root_.scala.Option[String]
  def avatar: _root_.scala.Option[String]
  def mobilePhone: _root_.scala.Option[String]
  def lastName: _root_.scala.Option[String]
  def firstName: _root_.scala.Option[String]
  def nativeLanguages: _root_.scala.Option[Seq[String]]
  def nationality: _root_.scala.Option[String]
  def additionalInfo: _root_.scala.Option[Map[String, String]]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = username
  def _2 = fullName
  def _3 = email
  def _4 = avatar
  def _5 = mobilePhone
  def _6 = lastName
  def _7 = firstName
  def _8 = nativeLanguages
  def _9 = nationality
  def _10 = additionalInfo

  def toTuple: _root_.scala.Tuple10[String, Option[String], Option[String], Option[String], Option[String], Option[String], Option[String], Option[Seq[String]], Option[String], Option[Map[String, String]]] = {
    (
      username,
      fullName,
      email,
      avatar,
      mobilePhone,
      lastName,
      firstName,
      nativeLanguages,
      nationality,
      additionalInfo
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (username ne null) {
                writeUsernameValue(username, _oprot)
                _root_.scala.Some(TUserProfile.UsernameField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (fullName.isDefined) {
                writeFullNameValue(fullName.get, _oprot)
                _root_.scala.Some(TUserProfile.FullNameField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (email.isDefined) {
                writeEmailValue(email.get, _oprot)
                _root_.scala.Some(TUserProfile.EmailField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (avatar.isDefined) {
                writeAvatarValue(avatar.get, _oprot)
                _root_.scala.Some(TUserProfile.AvatarField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (mobilePhone.isDefined) {
                writeMobilePhoneValue(mobilePhone.get, _oprot)
                _root_.scala.Some(TUserProfile.MobilePhoneField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (lastName.isDefined) {
                writeLastNameValue(lastName.get, _oprot)
                _root_.scala.Some(TUserProfile.LastNameField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (firstName.isDefined) {
                writeFirstNameValue(firstName.get, _oprot)
                _root_.scala.Some(TUserProfile.FirstNameField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (nativeLanguages.isDefined) {
                writeNativeLanguagesValue(nativeLanguages.get, _oprot)
                _root_.scala.Some(TUserProfile.NativeLanguagesField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (nationality.isDefined) {
                writeNationalityValue(nationality.get, _oprot)
                _root_.scala.Some(TUserProfile.NationalityField)
              } else {
                _root_.scala.None
              }
            case 10 =>
              if (additionalInfo.isDefined) {
                writeAdditionalInfoValue(additionalInfo.get, _oprot)
                _root_.scala.Some(TUserProfile.AdditionalInfoField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TUserProfile = {
    var username: String = this.username
    var fullName: _root_.scala.Option[String] = this.fullName
    var email: _root_.scala.Option[String] = this.email
    var avatar: _root_.scala.Option[String] = this.avatar
    var mobilePhone: _root_.scala.Option[String] = this.mobilePhone
    var lastName: _root_.scala.Option[String] = this.lastName
    var firstName: _root_.scala.Option[String] = this.firstName
    var nativeLanguages: _root_.scala.Option[Seq[String]] = this.nativeLanguages
    var nationality: _root_.scala.Option[String] = this.nationality
    var additionalInfo: _root_.scala.Option[Map[String, String]] = this.additionalInfo
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        username = readUsernameValue(_blob.read)
      case 2 =>
        fullName = _root_.scala.Some(readFullNameValue(_blob.read))
      case 3 =>
        email = _root_.scala.Some(readEmailValue(_blob.read))
      case 4 =>
        avatar = _root_.scala.Some(readAvatarValue(_blob.read))
      case 5 =>
        mobilePhone = _root_.scala.Some(readMobilePhoneValue(_blob.read))
      case 6 =>
        lastName = _root_.scala.Some(readLastNameValue(_blob.read))
      case 7 =>
        firstName = _root_.scala.Some(readFirstNameValue(_blob.read))
      case 8 =>
        nativeLanguages = _root_.scala.Some(readNativeLanguagesValue(_blob.read))
      case 9 =>
        nationality = _root_.scala.Some(readNationalityValue(_blob.read))
      case 10 =>
        additionalInfo = _root_.scala.Some(readAdditionalInfoValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      username,
      fullName,
      email,
      avatar,
      mobilePhone,
      lastName,
      firstName,
      nativeLanguages,
      nationality,
      additionalInfo,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TUserProfile = {
    var username: String = this.username
    var fullName: _root_.scala.Option[String] = this.fullName
    var email: _root_.scala.Option[String] = this.email
    var avatar: _root_.scala.Option[String] = this.avatar
    var mobilePhone: _root_.scala.Option[String] = this.mobilePhone
    var lastName: _root_.scala.Option[String] = this.lastName
    var firstName: _root_.scala.Option[String] = this.firstName
    var nativeLanguages: _root_.scala.Option[Seq[String]] = this.nativeLanguages
    var nationality: _root_.scala.Option[String] = this.nationality
    var additionalInfo: _root_.scala.Option[Map[String, String]] = this.additionalInfo

    _fieldId match {
      case 1 =>
        username = null
      case 2 =>
        fullName = _root_.scala.None
      case 3 =>
        email = _root_.scala.None
      case 4 =>
        avatar = _root_.scala.None
      case 5 =>
        mobilePhone = _root_.scala.None
      case 6 =>
        lastName = _root_.scala.None
      case 7 =>
        firstName = _root_.scala.None
      case 8 =>
        nativeLanguages = _root_.scala.None
      case 9 =>
        nationality = _root_.scala.None
      case 10 =>
        additionalInfo = _root_.scala.None
      case _ =>
    }
    new Immutable(
      username,
      fullName,
      email,
      avatar,
      mobilePhone,
      lastName,
      firstName,
      nativeLanguages,
      nationality,
      additionalInfo,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetUsername: TUserProfile = unsetField(1)

  def unsetFullName: TUserProfile = unsetField(2)

  def unsetEmail: TUserProfile = unsetField(3)

  def unsetAvatar: TUserProfile = unsetField(4)

  def unsetMobilePhone: TUserProfile = unsetField(5)

  def unsetLastName: TUserProfile = unsetField(6)

  def unsetFirstName: TUserProfile = unsetField(7)

  def unsetNativeLanguages: TUserProfile = unsetField(8)

  def unsetNationality: TUserProfile = unsetField(9)

  def unsetAdditionalInfo: TUserProfile = unsetField(10)


  override def write(_oprot: TProtocol): Unit = {
    TUserProfile.validate(this)
    _oprot.writeStructBegin(Struct)
    if (username ne null) writeUsernameField(username, _oprot)
    if (fullName.isDefined) writeFullNameField(fullName.get, _oprot)
    if (email.isDefined) writeEmailField(email.get, _oprot)
    if (avatar.isDefined) writeAvatarField(avatar.get, _oprot)
    if (mobilePhone.isDefined) writeMobilePhoneField(mobilePhone.get, _oprot)
    if (lastName.isDefined) writeLastNameField(lastName.get, _oprot)
    if (firstName.isDefined) writeFirstNameField(firstName.get, _oprot)
    if (nativeLanguages.isDefined) writeNativeLanguagesField(nativeLanguages.get, _oprot)
    if (nationality.isDefined) writeNationalityField(nationality.get, _oprot)
    if (additionalInfo.isDefined) writeAdditionalInfoField(additionalInfo.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    username: String = this.username,
    fullName: _root_.scala.Option[String] = this.fullName,
    email: _root_.scala.Option[String] = this.email,
    avatar: _root_.scala.Option[String] = this.avatar,
    mobilePhone: _root_.scala.Option[String] = this.mobilePhone,
    lastName: _root_.scala.Option[String] = this.lastName,
    firstName: _root_.scala.Option[String] = this.firstName,
    nativeLanguages: _root_.scala.Option[Seq[String]] = this.nativeLanguages,
    nationality: _root_.scala.Option[String] = this.nationality,
    additionalInfo: _root_.scala.Option[Map[String, String]] = this.additionalInfo,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TUserProfile =
    new Immutable(
      username,
      fullName,
      email,
      avatar,
      mobilePhone,
      lastName,
      firstName,
      nativeLanguages,
      nationality,
      additionalInfo,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TUserProfile]

  private def _equals(x: TUserProfile, y: TUserProfile): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TUserProfile]) &&
      _passthroughFields == other.asInstanceOf[TUserProfile]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 10

  override def productElement(n: Int): Any = n match {
    case 0 => this.username
    case 1 => this.fullName
    case 2 => this.email
    case 3 => this.avatar
    case 4 => this.mobilePhone
    case 5 => this.lastName
    case 6 => this.firstName
    case 7 => this.nativeLanguages
    case 8 => this.nationality
    case 9 => this.additionalInfo
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TUserProfile"

  def _codec: ValidatingThriftStructCodec3[TUserProfile] = TUserProfile
}

