/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.dictionary.domain.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TRangeQuery extends ValidatingThriftStructCodec3[TRangeQuery] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TRangeQuery")
  val FieldField = new TField("field", TType.STRING, 1)
  val FieldFieldManifest = implicitly[Manifest[String]]
  val LowValueField = new TField("lowValue", TType.I64, 2)
  val LowValueFieldManifest = implicitly[Manifest[Long]]
  val LowIncludedField = new TField("lowIncluded", TType.BOOL, 3)
  val LowIncludedFieldManifest = implicitly[Manifest[Boolean]]
  val HighValueField = new TField("highValue", TType.I64, 4)
  val HighValueFieldManifest = implicitly[Manifest[Long]]
  val HighIncludedField = new TField("highIncluded", TType.BOOL, 5)
  val HighIncludedFieldManifest = implicitly[Manifest[Boolean]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      FieldField,
      false,
      true,
      FieldFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      LowValueField,
      true,
      false,
      LowValueFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      LowIncludedField,
      false,
      true,
      LowIncludedFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      HighValueField,
      true,
      false,
      HighValueFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      HighIncludedField,
      false,
      true,
      HighIncludedFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TRangeQuery): Unit = {
    if (_item.field == null) throw new TProtocolException("Required field field cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TRangeQuery): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.field == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.field)
    buf ++= validateField(item.lowValue)
    buf ++= validateField(item.lowIncluded)
    buf ++= validateField(item.highValue)
    buf ++= validateField(item.highIncluded)
    buf.toList
  }

  def withoutPassthroughFields(original: TRangeQuery): TRangeQuery =
    new Immutable(
      field =
        {
          val field = original.field
          field
        },
      lowValue =
        {
          val field = original.lowValue
          field.map { field =>
            field
          }
        },
      lowIncluded =
        {
          val field = original.lowIncluded
          field
        },
      highValue =
        {
          val field = original.highValue
          field.map { field =>
            field
          }
        },
      highIncluded =
        {
          val field = original.highIncluded
          field
        }
    )

  override def encode(_item: TRangeQuery, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TRangeQuery = {

    var fieldOffset: Int = -1
    var _got_field = false
    var lowValueOffset: Int = -1
    var lowIncluded: Boolean = false
    var _got_lowIncluded = false
    var highValueOffset: Int = -1
    var highIncluded: Boolean = false
    var _got_highIncluded = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                fieldOffset = _iprot.offsetSkipString
    
                _got_field = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'field' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I64 =>
                lowValueOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'lowValue' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.BOOL =>
    
                lowIncluded = readLowIncludedValue(_iprot)
                _got_lowIncluded = true
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'lowIncluded' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I64 =>
                highValueOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'highValue' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.BOOL =>
    
                highIncluded = readHighIncludedValue(_iprot)
                _got_highIncluded = true
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'highIncluded' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_field) throw new TProtocolException("Required field 'field' was not found in serialized data for struct TRangeQuery")
    if (!_got_lowIncluded) throw new TProtocolException("Required field 'lowIncluded' was not found in serialized data for struct TRangeQuery")
    if (!_got_highIncluded) throw new TProtocolException("Required field 'highIncluded' was not found in serialized data for struct TRangeQuery")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      fieldOffset,
      lowValueOffset,
      lowIncluded,
      highValueOffset,
      highIncluded,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TRangeQuery =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TRangeQuery = {
    var field: String = null
    var _got_field = false
    var lowValue: _root_.scala.Option[Long] = _root_.scala.None
    var lowIncluded: Boolean = false
    var _got_lowIncluded = false
    var highValue: _root_.scala.Option[Long] = _root_.scala.None
    var highIncluded: Boolean = false
    var _got_highIncluded = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                field = readFieldValue(_iprot)
                _got_field = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'field' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I64 =>
                lowValue = _root_.scala.Some(readLowValueValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'lowValue' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.BOOL =>
                lowIncluded = readLowIncludedValue(_iprot)
                _got_lowIncluded = true
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'lowIncluded' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I64 =>
                highValue = _root_.scala.Some(readHighValueValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'highValue' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.BOOL =>
                highIncluded = readHighIncludedValue(_iprot)
                _got_highIncluded = true
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'highIncluded' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_field) throw new TProtocolException("Required field 'field' was not found in serialized data for struct TRangeQuery")
    if (!_got_lowIncluded) throw new TProtocolException("Required field 'lowIncluded' was not found in serialized data for struct TRangeQuery")
    if (!_got_highIncluded) throw new TProtocolException("Required field 'highIncluded' was not found in serialized data for struct TRangeQuery")
    new Immutable(
      field,
      lowValue,
      lowIncluded,
      highValue,
      highIncluded,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    field: String,
    lowValue: _root_.scala.Option[Long] = _root_.scala.None,
    lowIncluded: Boolean,
    highValue: _root_.scala.Option[Long] = _root_.scala.None,
    highIncluded: Boolean
  ): TRangeQuery =
    new Immutable(
      field,
      lowValue,
      lowIncluded,
      highValue,
      highIncluded
    )

  def unapply(_item: TRangeQuery): _root_.scala.Option[_root_.scala.Tuple5[String, Option[Long], Boolean, Option[Long], Boolean]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readFieldValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeFieldField(field_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FieldField)
    writeFieldValue(field_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFieldValue(field_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(field_item)
  }

  @inline private[thrift] def readLowValueValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeLowValueField(lowValue_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(LowValueField)
    writeLowValueValue(lowValue_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLowValueValue(lowValue_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(lowValue_item)
  }

  @inline private[thrift] def readLowIncludedValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeLowIncludedField(lowIncluded_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(LowIncludedField)
    writeLowIncludedValue(lowIncluded_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLowIncludedValue(lowIncluded_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(lowIncluded_item)
  }

  @inline private[thrift] def readHighValueValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeHighValueField(highValue_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(HighValueField)
    writeHighValueValue(highValue_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeHighValueValue(highValue_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(highValue_item)
  }

  @inline private[thrift] def readHighIncludedValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeHighIncludedField(highIncluded_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(HighIncludedField)
    writeHighIncludedValue(highIncluded_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeHighIncludedValue(highIncluded_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(highIncluded_item)
  }


  object Immutable extends ThriftStructCodec3[TRangeQuery] {
    override def encode(_item: TRangeQuery, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TRangeQuery = TRangeQuery.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TRangeQuery] = TRangeQuery.metaData
  }

  /**
   * The default read-only implementation of TRangeQuery.  You typically should not need to
   * directly reference this class; instead, use the TRangeQuery.apply method to construct
   * new instances.
   */
  class Immutable(
      val field: String,
      val lowValue: _root_.scala.Option[Long],
      val lowIncluded: Boolean,
      val highValue: _root_.scala.Option[Long],
      val highIncluded: Boolean,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TRangeQuery {
    def this(
      field: String,
      lowValue: _root_.scala.Option[Long] = _root_.scala.None,
      lowIncluded: Boolean,
      highValue: _root_.scala.Option[Long] = _root_.scala.None,
      highIncluded: Boolean
    ) = this(
      field,
      lowValue,
      lowIncluded,
      highValue,
      highIncluded,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      fieldOffset: Int,
      lowValueOffset: Int,
      val lowIncluded: Boolean,
      highValueOffset: Int,
      val highIncluded: Boolean,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TRangeQuery {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val field: String =
      if (fieldOffset == -1)
        null
      else {
        _proto.decodeString(_buf, fieldOffset)
      }
    lazy val lowValue: _root_.scala.Option[Long] =
      if (lowValueOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, lowValueOffset))
      }
    lazy val highValue: _root_.scala.Option[Long] =
      if (highValueOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, highValueOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TRangeQuery trait with additional state or
   * behavior and implement the read-only methods from TRangeQuery using an underlying
   * instance.
   */
  trait Proxy extends TRangeQuery {
    protected def _underlying_TRangeQuery: TRangeQuery
    override def field: String = _underlying_TRangeQuery.field
    override def lowValue: _root_.scala.Option[Long] = _underlying_TRangeQuery.lowValue
    override def lowIncluded: Boolean = _underlying_TRangeQuery.lowIncluded
    override def highValue: _root_.scala.Option[Long] = _underlying_TRangeQuery.highValue
    override def highIncluded: Boolean = _underlying_TRangeQuery.highIncluded
    override def _passthroughFields = _underlying_TRangeQuery._passthroughFields
  }
}

/**
 * Prefer the companion object's [[xed.dictionary.domain.thrift.TRangeQuery.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TRangeQuery
  extends ThriftStruct
  with _root_.scala.Product5[String, Option[Long], Boolean, Option[Long], Boolean]
  with ValidatingThriftStruct[TRangeQuery]
  with java.io.Serializable
{
  import TRangeQuery._

  def field: String
  def lowValue: _root_.scala.Option[Long]
  def lowIncluded: Boolean
  def highValue: _root_.scala.Option[Long]
  def highIncluded: Boolean

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = field
  def _2 = lowValue
  def _3 = lowIncluded
  def _4 = highValue
  def _5 = highIncluded

  def toTuple: _root_.scala.Tuple5[String, Option[Long], Boolean, Option[Long], Boolean] = {
    (
      field,
      lowValue,
      lowIncluded,
      highValue,
      highIncluded
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (field ne null) {
                writeFieldValue(field, _oprot)
                _root_.scala.Some(TRangeQuery.FieldField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (lowValue.isDefined) {
                writeLowValueValue(lowValue.get, _oprot)
                _root_.scala.Some(TRangeQuery.LowValueField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeLowIncludedValue(lowIncluded, _oprot)
                _root_.scala.Some(TRangeQuery.LowIncludedField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (highValue.isDefined) {
                writeHighValueValue(highValue.get, _oprot)
                _root_.scala.Some(TRangeQuery.HighValueField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (true) {
                writeHighIncludedValue(highIncluded, _oprot)
                _root_.scala.Some(TRangeQuery.HighIncludedField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TRangeQuery = {
    var field: String = this.field
    var lowValue: _root_.scala.Option[Long] = this.lowValue
    var lowIncluded: Boolean = this.lowIncluded
    var highValue: _root_.scala.Option[Long] = this.highValue
    var highIncluded: Boolean = this.highIncluded
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        field = readFieldValue(_blob.read)
      case 2 =>
        lowValue = _root_.scala.Some(readLowValueValue(_blob.read))
      case 3 =>
        lowIncluded = readLowIncludedValue(_blob.read)
      case 4 =>
        highValue = _root_.scala.Some(readHighValueValue(_blob.read))
      case 5 =>
        highIncluded = readHighIncludedValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      field,
      lowValue,
      lowIncluded,
      highValue,
      highIncluded,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TRangeQuery = {
    var field: String = this.field
    var lowValue: _root_.scala.Option[Long] = this.lowValue
    var lowIncluded: Boolean = this.lowIncluded
    var highValue: _root_.scala.Option[Long] = this.highValue
    var highIncluded: Boolean = this.highIncluded

    _fieldId match {
      case 1 =>
        field = null
      case 2 =>
        lowValue = _root_.scala.None
      case 3 =>
        lowIncluded = false
      case 4 =>
        highValue = _root_.scala.None
      case 5 =>
        highIncluded = false
      case _ =>
    }
    new Immutable(
      field,
      lowValue,
      lowIncluded,
      highValue,
      highIncluded,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField: TRangeQuery = unsetField(1)

  def unsetLowValue: TRangeQuery = unsetField(2)

  def unsetLowIncluded: TRangeQuery = unsetField(3)

  def unsetHighValue: TRangeQuery = unsetField(4)

  def unsetHighIncluded: TRangeQuery = unsetField(5)


  override def write(_oprot: TProtocol): Unit = {
    TRangeQuery.validate(this)
    _oprot.writeStructBegin(Struct)
    if (field ne null) writeFieldField(field, _oprot)
    if (lowValue.isDefined) writeLowValueField(lowValue.get, _oprot)
    writeLowIncludedField(lowIncluded, _oprot)
    if (highValue.isDefined) writeHighValueField(highValue.get, _oprot)
    writeHighIncludedField(highIncluded, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    field: String = this.field,
    lowValue: _root_.scala.Option[Long] = this.lowValue,
    lowIncluded: Boolean = this.lowIncluded,
    highValue: _root_.scala.Option[Long] = this.highValue,
    highIncluded: Boolean = this.highIncluded,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TRangeQuery =
    new Immutable(
      field,
      lowValue,
      lowIncluded,
      highValue,
      highIncluded,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TRangeQuery]

  private def _equals(x: TRangeQuery, y: TRangeQuery): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TRangeQuery]) &&
      _passthroughFields == other.asInstanceOf[TRangeQuery]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => this.field
    case 1 => this.lowValue
    case 2 => this.lowIncluded
    case 3 => this.highValue
    case 4 => this.highIncluded
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TRangeQuery"

  def _codec: ValidatingThriftStructCodec3[TRangeQuery] = TRangeQuery
}

