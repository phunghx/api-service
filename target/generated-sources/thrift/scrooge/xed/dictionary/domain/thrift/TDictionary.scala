/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.dictionary.domain.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TDictionary extends ValidatingThriftStructCodec3[TDictionary] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TDictionary")
  val WordField = new TField("word", TType.STRING, 1)
  val WordFieldManifest = implicitly[Manifest[String]]
  val SourceLangField = new TField("sourceLang", TType.STRING, 2)
  val SourceLangFieldManifest = implicitly[Manifest[String]]
  val TargetLangField = new TField("targetLang", TType.STRING, 3)
  val TargetLangFieldManifest = implicitly[Manifest[String]]
  val PartOfSpeechField = new TField("partOfSpeech", TType.LIST, 4)
  val PartOfSpeechFieldManifest = implicitly[Manifest[Seq[String]]]
  val DictionaryVersionField = new TField("dictionaryVersion", TType.I32, 5)
  val DictionaryVersionFieldManifest = implicitly[Manifest[Int]]
  val DataField = new TField("data", TType.STRING, 6)
  val DataFieldManifest = implicitly[Manifest[String]]
  val CreatorField = new TField("creator", TType.STRING, 8)
  val CreatorFieldManifest = implicitly[Manifest[String]]
  val UpdatedTimeField = new TField("updatedTime", TType.I64, 9)
  val UpdatedTimeFieldManifest = implicitly[Manifest[Long]]
  val CreatedTimeField = new TField("createdTime", TType.I64, 10)
  val CreatedTimeFieldManifest = implicitly[Manifest[Long]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      WordField,
      false,
      true,
      WordFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SourceLangField,
      false,
      true,
      SourceLangFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TargetLangField,
      false,
      true,
      TargetLangFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      PartOfSpeechField,
      true,
      false,
      PartOfSpeechFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      DictionaryVersionField,
      true,
      false,
      DictionaryVersionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      DataField,
      true,
      false,
      DataFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CreatorField,
      true,
      false,
      CreatorFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      UpdatedTimeField,
      true,
      false,
      UpdatedTimeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CreatedTimeField,
      true,
      false,
      CreatedTimeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TDictionary): Unit = {
    if (_item.word == null) throw new TProtocolException("Required field word cannot be null")
    if (_item.sourceLang == null) throw new TProtocolException("Required field sourceLang cannot be null")
    if (_item.targetLang == null) throw new TProtocolException("Required field targetLang cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TDictionary): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.word == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.word)
    if (item.sourceLang == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(1))
    buf ++= validateField(item.sourceLang)
    if (item.targetLang == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(2))
    buf ++= validateField(item.targetLang)
    buf ++= validateField(item.partOfSpeech)
    buf ++= validateField(item.dictionaryVersion)
    buf ++= validateField(item.data)
    buf ++= validateField(item.creator)
    buf ++= validateField(item.updatedTime)
    buf ++= validateField(item.createdTime)
    buf.toList
  }

  def withoutPassthroughFields(original: TDictionary): TDictionary =
    new Immutable(
      word =
        {
          val field = original.word
          field
        },
      sourceLang =
        {
          val field = original.sourceLang
          field
        },
      targetLang =
        {
          val field = original.targetLang
          field
        },
      partOfSpeech =
        {
          val field = original.partOfSpeech
          field.map { field =>
            field.map { field =>
              field
            }
          }
        },
      dictionaryVersion =
        {
          val field = original.dictionaryVersion
          field.map { field =>
            field
          }
        },
      data =
        {
          val field = original.data
          field.map { field =>
            field
          }
        },
      creator =
        {
          val field = original.creator
          field.map { field =>
            field
          }
        },
      updatedTime =
        {
          val field = original.updatedTime
          field.map { field =>
            field
          }
        },
      createdTime =
        {
          val field = original.createdTime
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: TDictionary, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TDictionary = {

    var wordOffset: Int = -1
    var _got_word = false
    var sourceLangOffset: Int = -1
    var _got_sourceLang = false
    var targetLangOffset: Int = -1
    var _got_targetLang = false
    var partOfSpeech: Option[Seq[String]] = None
    var dictionaryVersionOffset: Int = -1
    var dataOffset: Int = -1
    var creatorOffset: Int = -1
    var updatedTimeOffset: Int = -1
    var createdTimeOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                wordOffset = _iprot.offsetSkipString
    
                _got_word = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'word' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                sourceLangOffset = _iprot.offsetSkipString
    
                _got_sourceLang = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'sourceLang' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                targetLangOffset = _iprot.offsetSkipString
    
                _got_targetLang = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'targetLang' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
    
                partOfSpeech = Some(readPartOfSpeechValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'partOfSpeech' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
                dictionaryVersionOffset = _iprot.offsetSkipI32
    
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'dictionaryVersion' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                dataOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'data' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.STRING =>
                creatorOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'creator' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I64 =>
                updatedTimeOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'updatedTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.I64 =>
                createdTimeOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'createdTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_word) throw new TProtocolException("Required field 'word' was not found in serialized data for struct TDictionary")
    if (!_got_sourceLang) throw new TProtocolException("Required field 'sourceLang' was not found in serialized data for struct TDictionary")
    if (!_got_targetLang) throw new TProtocolException("Required field 'targetLang' was not found in serialized data for struct TDictionary")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      wordOffset,
      sourceLangOffset,
      targetLangOffset,
      partOfSpeech,
      dictionaryVersionOffset,
      dataOffset,
      creatorOffset,
      updatedTimeOffset,
      createdTimeOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TDictionary =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TDictionary = {
    var word: String = null
    var _got_word = false
    var sourceLang: String = null
    var _got_sourceLang = false
    var targetLang: String = null
    var _got_targetLang = false
    var partOfSpeech: _root_.scala.Option[Seq[String]] = _root_.scala.None
    var dictionaryVersion: _root_.scala.Option[Int] = _root_.scala.None
    var data: _root_.scala.Option[String] = _root_.scala.None
    var creator: _root_.scala.Option[String] = _root_.scala.None
    var updatedTime: _root_.scala.Option[Long] = _root_.scala.None
    var createdTime: _root_.scala.Option[Long] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                word = readWordValue(_iprot)
                _got_word = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'word' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                sourceLang = readSourceLangValue(_iprot)
                _got_sourceLang = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'sourceLang' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                targetLang = readTargetLangValue(_iprot)
                _got_targetLang = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'targetLang' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
                partOfSpeech = _root_.scala.Some(readPartOfSpeechValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'partOfSpeech' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
                dictionaryVersion = _root_.scala.Some(readDictionaryVersionValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'dictionaryVersion' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                data = _root_.scala.Some(readDataValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'data' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.STRING =>
                creator = _root_.scala.Some(readCreatorValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'creator' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I64 =>
                updatedTime = _root_.scala.Some(readUpdatedTimeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'updatedTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.I64 =>
                createdTime = _root_.scala.Some(readCreatedTimeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'createdTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_word) throw new TProtocolException("Required field 'word' was not found in serialized data for struct TDictionary")
    if (!_got_sourceLang) throw new TProtocolException("Required field 'sourceLang' was not found in serialized data for struct TDictionary")
    if (!_got_targetLang) throw new TProtocolException("Required field 'targetLang' was not found in serialized data for struct TDictionary")
    new Immutable(
      word,
      sourceLang,
      targetLang,
      partOfSpeech,
      dictionaryVersion,
      data,
      creator,
      updatedTime,
      createdTime,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    word: String,
    sourceLang: String,
    targetLang: String,
    partOfSpeech: _root_.scala.Option[Seq[String]] = _root_.scala.None,
    dictionaryVersion: _root_.scala.Option[Int] = _root_.scala.None,
    data: _root_.scala.Option[String] = _root_.scala.None,
    creator: _root_.scala.Option[String] = _root_.scala.None,
    updatedTime: _root_.scala.Option[Long] = _root_.scala.None,
    createdTime: _root_.scala.Option[Long] = _root_.scala.None
  ): TDictionary =
    new Immutable(
      word,
      sourceLang,
      targetLang,
      partOfSpeech,
      dictionaryVersion,
      data,
      creator,
      updatedTime,
      createdTime
    )

  def unapply(_item: TDictionary): _root_.scala.Option[_root_.scala.Tuple9[String, String, String, Option[Seq[String]], Option[Int], Option[String], Option[String], Option[Long], Option[Long]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readWordValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeWordField(word_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(WordField)
    writeWordValue(word_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeWordValue(word_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(word_item)
  }

  @inline private[thrift] def readSourceLangValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeSourceLangField(sourceLang_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SourceLangField)
    writeSourceLangValue(sourceLang_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSourceLangValue(sourceLang_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(sourceLang_item)
  }

  @inline private[thrift] def readTargetLangValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeTargetLangField(targetLang_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TargetLangField)
    writeTargetLangValue(targetLang_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTargetLangValue(targetLang_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(targetLang_item)
  }

  @inline private[thrift] def readPartOfSpeechValue(_iprot: TProtocol): Seq[String] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[String](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readString()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writePartOfSpeechField(partOfSpeech_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PartOfSpeechField)
    writePartOfSpeechValue(partOfSpeech_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePartOfSpeechValue(partOfSpeech_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRING, partOfSpeech_item.size))
    partOfSpeech_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = partOfSpeech_item.size
        while (_i < _size) {
          val partOfSpeech_item_element = partOfSpeech_item(_i)
          _oprot.writeString(partOfSpeech_item_element)
          _i += 1
        }
      case _ =>
        partOfSpeech_item.foreach { partOfSpeech_item_element =>
          _oprot.writeString(partOfSpeech_item_element)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readDictionaryVersionValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeDictionaryVersionField(dictionaryVersion_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DictionaryVersionField)
    writeDictionaryVersionValue(dictionaryVersion_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDictionaryVersionValue(dictionaryVersion_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(dictionaryVersion_item)
  }

  @inline private[thrift] def readDataValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeDataField(data_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DataField)
    writeDataValue(data_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDataValue(data_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(data_item)
  }

  @inline private[thrift] def readCreatorValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeCreatorField(creator_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CreatorField)
    writeCreatorValue(creator_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCreatorValue(creator_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(creator_item)
  }

  @inline private[thrift] def readUpdatedTimeValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeUpdatedTimeField(updatedTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UpdatedTimeField)
    writeUpdatedTimeValue(updatedTime_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUpdatedTimeValue(updatedTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(updatedTime_item)
  }

  @inline private[thrift] def readCreatedTimeValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeCreatedTimeField(createdTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CreatedTimeField)
    writeCreatedTimeValue(createdTime_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCreatedTimeValue(createdTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(createdTime_item)
  }


  object Immutable extends ThriftStructCodec3[TDictionary] {
    override def encode(_item: TDictionary, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TDictionary = TDictionary.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TDictionary] = TDictionary.metaData
  }

  /**
   * The default read-only implementation of TDictionary.  You typically should not need to
   * directly reference this class; instead, use the TDictionary.apply method to construct
   * new instances.
   */
  class Immutable(
      val word: String,
      val sourceLang: String,
      val targetLang: String,
      val partOfSpeech: _root_.scala.Option[Seq[String]],
      val dictionaryVersion: _root_.scala.Option[Int],
      val data: _root_.scala.Option[String],
      val creator: _root_.scala.Option[String],
      val updatedTime: _root_.scala.Option[Long],
      val createdTime: _root_.scala.Option[Long],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TDictionary {
    def this(
      word: String,
      sourceLang: String,
      targetLang: String,
      partOfSpeech: _root_.scala.Option[Seq[String]] = _root_.scala.None,
      dictionaryVersion: _root_.scala.Option[Int] = _root_.scala.None,
      data: _root_.scala.Option[String] = _root_.scala.None,
      creator: _root_.scala.Option[String] = _root_.scala.None,
      updatedTime: _root_.scala.Option[Long] = _root_.scala.None,
      createdTime: _root_.scala.Option[Long] = _root_.scala.None
    ) = this(
      word,
      sourceLang,
      targetLang,
      partOfSpeech,
      dictionaryVersion,
      data,
      creator,
      updatedTime,
      createdTime,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      wordOffset: Int,
      sourceLangOffset: Int,
      targetLangOffset: Int,
      val partOfSpeech: _root_.scala.Option[Seq[String]],
      dictionaryVersionOffset: Int,
      dataOffset: Int,
      creatorOffset: Int,
      updatedTimeOffset: Int,
      createdTimeOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TDictionary {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val word: String =
      if (wordOffset == -1)
        null
      else {
        _proto.decodeString(_buf, wordOffset)
      }
    lazy val sourceLang: String =
      if (sourceLangOffset == -1)
        null
      else {
        _proto.decodeString(_buf, sourceLangOffset)
      }
    lazy val targetLang: String =
      if (targetLangOffset == -1)
        null
      else {
        _proto.decodeString(_buf, targetLangOffset)
      }
    lazy val dictionaryVersion: _root_.scala.Option[Int] =
      if (dictionaryVersionOffset == -1)
        None
      else {
        Some(_proto.decodeI32(_buf, dictionaryVersionOffset))
      }
    lazy val data: _root_.scala.Option[String] =
      if (dataOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, dataOffset))
      }
    lazy val creator: _root_.scala.Option[String] =
      if (creatorOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, creatorOffset))
      }
    lazy val updatedTime: _root_.scala.Option[Long] =
      if (updatedTimeOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, updatedTimeOffset))
      }
    lazy val createdTime: _root_.scala.Option[Long] =
      if (createdTimeOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, createdTimeOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TDictionary trait with additional state or
   * behavior and implement the read-only methods from TDictionary using an underlying
   * instance.
   */
  trait Proxy extends TDictionary {
    protected def _underlying_TDictionary: TDictionary
    override def word: String = _underlying_TDictionary.word
    override def sourceLang: String = _underlying_TDictionary.sourceLang
    override def targetLang: String = _underlying_TDictionary.targetLang
    override def partOfSpeech: _root_.scala.Option[Seq[String]] = _underlying_TDictionary.partOfSpeech
    override def dictionaryVersion: _root_.scala.Option[Int] = _underlying_TDictionary.dictionaryVersion
    override def data: _root_.scala.Option[String] = _underlying_TDictionary.data
    override def creator: _root_.scala.Option[String] = _underlying_TDictionary.creator
    override def updatedTime: _root_.scala.Option[Long] = _underlying_TDictionary.updatedTime
    override def createdTime: _root_.scala.Option[Long] = _underlying_TDictionary.createdTime
    override def _passthroughFields = _underlying_TDictionary._passthroughFields
  }
}

/**
 * Prefer the companion object's [[xed.dictionary.domain.thrift.TDictionary.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TDictionary
  extends ThriftStruct
  with _root_.scala.Product9[String, String, String, Option[Seq[String]], Option[Int], Option[String], Option[String], Option[Long], Option[Long]]
  with ValidatingThriftStruct[TDictionary]
  with java.io.Serializable
{
  import TDictionary._

  def word: String
  def sourceLang: String
  def targetLang: String
  def partOfSpeech: _root_.scala.Option[Seq[String]]
  def dictionaryVersion: _root_.scala.Option[Int]
  def data: _root_.scala.Option[String]
  def creator: _root_.scala.Option[String]
  def updatedTime: _root_.scala.Option[Long]
  def createdTime: _root_.scala.Option[Long]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = word
  def _2 = sourceLang
  def _3 = targetLang
  def _4 = partOfSpeech
  def _5 = dictionaryVersion
  def _6 = data
  def _7 = creator
  def _8 = updatedTime
  def _9 = createdTime

  def toTuple: _root_.scala.Tuple9[String, String, String, Option[Seq[String]], Option[Int], Option[String], Option[String], Option[Long], Option[Long]] = {
    (
      word,
      sourceLang,
      targetLang,
      partOfSpeech,
      dictionaryVersion,
      data,
      creator,
      updatedTime,
      createdTime
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (word ne null) {
                writeWordValue(word, _oprot)
                _root_.scala.Some(TDictionary.WordField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (sourceLang ne null) {
                writeSourceLangValue(sourceLang, _oprot)
                _root_.scala.Some(TDictionary.SourceLangField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (targetLang ne null) {
                writeTargetLangValue(targetLang, _oprot)
                _root_.scala.Some(TDictionary.TargetLangField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (partOfSpeech.isDefined) {
                writePartOfSpeechValue(partOfSpeech.get, _oprot)
                _root_.scala.Some(TDictionary.PartOfSpeechField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (dictionaryVersion.isDefined) {
                writeDictionaryVersionValue(dictionaryVersion.get, _oprot)
                _root_.scala.Some(TDictionary.DictionaryVersionField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (data.isDefined) {
                writeDataValue(data.get, _oprot)
                _root_.scala.Some(TDictionary.DataField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (creator.isDefined) {
                writeCreatorValue(creator.get, _oprot)
                _root_.scala.Some(TDictionary.CreatorField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (updatedTime.isDefined) {
                writeUpdatedTimeValue(updatedTime.get, _oprot)
                _root_.scala.Some(TDictionary.UpdatedTimeField)
              } else {
                _root_.scala.None
              }
            case 10 =>
              if (createdTime.isDefined) {
                writeCreatedTimeValue(createdTime.get, _oprot)
                _root_.scala.Some(TDictionary.CreatedTimeField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TDictionary = {
    var word: String = this.word
    var sourceLang: String = this.sourceLang
    var targetLang: String = this.targetLang
    var partOfSpeech: _root_.scala.Option[Seq[String]] = this.partOfSpeech
    var dictionaryVersion: _root_.scala.Option[Int] = this.dictionaryVersion
    var data: _root_.scala.Option[String] = this.data
    var creator: _root_.scala.Option[String] = this.creator
    var updatedTime: _root_.scala.Option[Long] = this.updatedTime
    var createdTime: _root_.scala.Option[Long] = this.createdTime
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        word = readWordValue(_blob.read)
      case 2 =>
        sourceLang = readSourceLangValue(_blob.read)
      case 3 =>
        targetLang = readTargetLangValue(_blob.read)
      case 4 =>
        partOfSpeech = _root_.scala.Some(readPartOfSpeechValue(_blob.read))
      case 5 =>
        dictionaryVersion = _root_.scala.Some(readDictionaryVersionValue(_blob.read))
      case 6 =>
        data = _root_.scala.Some(readDataValue(_blob.read))
      case 8 =>
        creator = _root_.scala.Some(readCreatorValue(_blob.read))
      case 9 =>
        updatedTime = _root_.scala.Some(readUpdatedTimeValue(_blob.read))
      case 10 =>
        createdTime = _root_.scala.Some(readCreatedTimeValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      word,
      sourceLang,
      targetLang,
      partOfSpeech,
      dictionaryVersion,
      data,
      creator,
      updatedTime,
      createdTime,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TDictionary = {
    var word: String = this.word
    var sourceLang: String = this.sourceLang
    var targetLang: String = this.targetLang
    var partOfSpeech: _root_.scala.Option[Seq[String]] = this.partOfSpeech
    var dictionaryVersion: _root_.scala.Option[Int] = this.dictionaryVersion
    var data: _root_.scala.Option[String] = this.data
    var creator: _root_.scala.Option[String] = this.creator
    var updatedTime: _root_.scala.Option[Long] = this.updatedTime
    var createdTime: _root_.scala.Option[Long] = this.createdTime

    _fieldId match {
      case 1 =>
        word = null
      case 2 =>
        sourceLang = null
      case 3 =>
        targetLang = null
      case 4 =>
        partOfSpeech = _root_.scala.None
      case 5 =>
        dictionaryVersion = _root_.scala.None
      case 6 =>
        data = _root_.scala.None
      case 8 =>
        creator = _root_.scala.None
      case 9 =>
        updatedTime = _root_.scala.None
      case 10 =>
        createdTime = _root_.scala.None
      case _ =>
    }
    new Immutable(
      word,
      sourceLang,
      targetLang,
      partOfSpeech,
      dictionaryVersion,
      data,
      creator,
      updatedTime,
      createdTime,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetWord: TDictionary = unsetField(1)

  def unsetSourceLang: TDictionary = unsetField(2)

  def unsetTargetLang: TDictionary = unsetField(3)

  def unsetPartOfSpeech: TDictionary = unsetField(4)

  def unsetDictionaryVersion: TDictionary = unsetField(5)

  def unsetData: TDictionary = unsetField(6)

  def unsetCreator: TDictionary = unsetField(8)

  def unsetUpdatedTime: TDictionary = unsetField(9)

  def unsetCreatedTime: TDictionary = unsetField(10)


  override def write(_oprot: TProtocol): Unit = {
    TDictionary.validate(this)
    _oprot.writeStructBegin(Struct)
    if (word ne null) writeWordField(word, _oprot)
    if (sourceLang ne null) writeSourceLangField(sourceLang, _oprot)
    if (targetLang ne null) writeTargetLangField(targetLang, _oprot)
    if (partOfSpeech.isDefined) writePartOfSpeechField(partOfSpeech.get, _oprot)
    if (dictionaryVersion.isDefined) writeDictionaryVersionField(dictionaryVersion.get, _oprot)
    if (data.isDefined) writeDataField(data.get, _oprot)
    if (creator.isDefined) writeCreatorField(creator.get, _oprot)
    if (updatedTime.isDefined) writeUpdatedTimeField(updatedTime.get, _oprot)
    if (createdTime.isDefined) writeCreatedTimeField(createdTime.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    word: String = this.word,
    sourceLang: String = this.sourceLang,
    targetLang: String = this.targetLang,
    partOfSpeech: _root_.scala.Option[Seq[String]] = this.partOfSpeech,
    dictionaryVersion: _root_.scala.Option[Int] = this.dictionaryVersion,
    data: _root_.scala.Option[String] = this.data,
    creator: _root_.scala.Option[String] = this.creator,
    updatedTime: _root_.scala.Option[Long] = this.updatedTime,
    createdTime: _root_.scala.Option[Long] = this.createdTime,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TDictionary =
    new Immutable(
      word,
      sourceLang,
      targetLang,
      partOfSpeech,
      dictionaryVersion,
      data,
      creator,
      updatedTime,
      createdTime,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TDictionary]

  private def _equals(x: TDictionary, y: TDictionary): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TDictionary]) &&
      _passthroughFields == other.asInstanceOf[TDictionary]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 9

  override def productElement(n: Int): Any = n match {
    case 0 => this.word
    case 1 => this.sourceLang
    case 2 => this.targetLang
    case 3 => this.partOfSpeech
    case 4 => this.dictionaryVersion
    case 5 => this.data
    case 6 => this.creator
    case 7 => this.updatedTime
    case 8 => this.createdTime
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TDictionary"

  def _codec: ValidatingThriftStructCodec3[TDictionary] = TDictionary
}

