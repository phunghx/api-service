/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.dictionary.domain.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TSearchRequest extends ValidatingThriftStructCodec3[TSearchRequest] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TSearchRequest")
  val TermsField = new TField("terms", TType.LIST, 1)
  val TermsFieldManifest = implicitly[Manifest[Seq[xed.dictionary.domain.thrift.TTermsQuery]]]
  val RangesField = new TField("ranges", TType.LIST, 2)
  val RangesFieldManifest = implicitly[Manifest[Seq[xed.dictionary.domain.thrift.TRangeQuery]]]
  val MatchesField = new TField("matches", TType.LIST, 3)
  val MatchesFieldManifest = implicitly[Manifest[Seq[xed.dictionary.domain.thrift.TMatchQuery]]]
  val SortsField = new TField("sorts", TType.LIST, 4)
  val SortsFieldManifest = implicitly[Manifest[Seq[xed.dictionary.domain.thrift.TSortQuery]]]
  val FromField = new TField("from", TType.I32, 5)
  val FromFieldManifest = implicitly[Manifest[Int]]
  val SizeField = new TField("size", TType.I32, 6)
  val SizeFieldManifest = implicitly[Manifest[Int]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      TermsField,
      true,
      false,
      TermsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[xed.dictionary.domain.thrift.TTermsQuery]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      RangesField,
      true,
      false,
      RangesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[xed.dictionary.domain.thrift.TRangeQuery]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      MatchesField,
      true,
      false,
      MatchesFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[xed.dictionary.domain.thrift.TMatchQuery]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SortsField,
      true,
      false,
      SortsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[xed.dictionary.domain.thrift.TSortQuery]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FromField,
      false,
      true,
      FromFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SizeField,
      false,
      true,
      SizeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TSearchRequest): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TSearchRequest): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.terms)
    buf ++= validateField(item.ranges)
    buf ++= validateField(item.matches)
    buf ++= validateField(item.sorts)
    buf ++= validateField(item.from)
    buf ++= validateField(item.size)
    buf.toList
  }

  def withoutPassthroughFields(original: TSearchRequest): TSearchRequest =
    new Immutable(
      terms =
        {
          val field = original.terms
          field.map { field =>
            field.map { field =>
              xed.dictionary.domain.thrift.TTermsQuery.withoutPassthroughFields(field)
            }
          }
        },
      ranges =
        {
          val field = original.ranges
          field.map { field =>
            field.map { field =>
              xed.dictionary.domain.thrift.TRangeQuery.withoutPassthroughFields(field)
            }
          }
        },
      matches =
        {
          val field = original.matches
          field.map { field =>
            field.map { field =>
              xed.dictionary.domain.thrift.TMatchQuery.withoutPassthroughFields(field)
            }
          }
        },
      sorts =
        {
          val field = original.sorts
          field.map { field =>
            field.map { field =>
              xed.dictionary.domain.thrift.TSortQuery.withoutPassthroughFields(field)
            }
          }
        },
      from =
        {
          val field = original.from
          field
        },
      size =
        {
          val field = original.size
          field
        }
    )

  override def encode(_item: TSearchRequest, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TSearchRequest = {

    var terms: Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]] = None
    var ranges: Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]] = None
    var matches: Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]] = None
    var sorts: Option[Seq[xed.dictionary.domain.thrift.TSortQuery]] = None
    var from: Int = 0
    var _got_from = false
    var size: Int = 0
    var _got_size = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
    
                terms = Some(readTermsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'terms' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
    
                ranges = Some(readRangesValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'ranges' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
    
                matches = Some(readMatchesValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'matches' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
    
                sorts = Some(readSortsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'sorts' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
    
                from = readFromValue(_iprot)
                _got_from = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'from' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I32 =>
    
                size = readSizeValue(_iprot)
                _got_size = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'size' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_from) throw new TProtocolException("Required field 'from' was not found in serialized data for struct TSearchRequest")
    if (!_got_size) throw new TProtocolException("Required field 'size' was not found in serialized data for struct TSearchRequest")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      terms,
      ranges,
      matches,
      sorts,
      from,
      size,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TSearchRequest =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TSearchRequest = {
    var terms: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]] = _root_.scala.None
    var ranges: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]] = _root_.scala.None
    var matches: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]] = _root_.scala.None
    var sorts: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TSortQuery]] = _root_.scala.None
    var from: Int = 0
    var _got_from = false
    var size: Int = 0
    var _got_size = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
                terms = _root_.scala.Some(readTermsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'terms' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
                ranges = _root_.scala.Some(readRangesValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'ranges' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST =>
                matches = _root_.scala.Some(readMatchesValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'matches' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.LIST =>
                sorts = _root_.scala.Some(readSortsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'sorts' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 =>
                from = readFromValue(_iprot)
                _got_from = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'from' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.I32 =>
                size = readSizeValue(_iprot)
                _got_size = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'size' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_from) throw new TProtocolException("Required field 'from' was not found in serialized data for struct TSearchRequest")
    if (!_got_size) throw new TProtocolException("Required field 'size' was not found in serialized data for struct TSearchRequest")
    new Immutable(
      terms,
      ranges,
      matches,
      sorts,
      from,
      size,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    terms: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]] = _root_.scala.None,
    ranges: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]] = _root_.scala.None,
    matches: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]] = _root_.scala.None,
    sorts: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TSortQuery]] = _root_.scala.None,
    from: Int,
    size: Int
  ): TSearchRequest =
    new Immutable(
      terms,
      ranges,
      matches,
      sorts,
      from,
      size
    )

  def unapply(_item: TSearchRequest): _root_.scala.Option[_root_.scala.Tuple6[Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]], Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]], Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]], Option[Seq[xed.dictionary.domain.thrift.TSortQuery]], Int, Int]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readTermsValue(_iprot: TProtocol): Seq[xed.dictionary.domain.thrift.TTermsQuery] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[xed.dictionary.domain.thrift.TTermsQuery](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          xed.dictionary.domain.thrift.TTermsQuery.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeTermsField(terms_item: Seq[xed.dictionary.domain.thrift.TTermsQuery], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TermsField)
    writeTermsValue(terms_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTermsValue(terms_item: Seq[xed.dictionary.domain.thrift.TTermsQuery], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, terms_item.size))
    terms_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = terms_item.size
        while (_i < _size) {
          val terms_item_element = terms_item(_i)
          terms_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        terms_item.foreach { terms_item_element =>
          terms_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readRangesValue(_iprot: TProtocol): Seq[xed.dictionary.domain.thrift.TRangeQuery] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[xed.dictionary.domain.thrift.TRangeQuery](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          xed.dictionary.domain.thrift.TRangeQuery.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeRangesField(ranges_item: Seq[xed.dictionary.domain.thrift.TRangeQuery], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(RangesField)
    writeRangesValue(ranges_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeRangesValue(ranges_item: Seq[xed.dictionary.domain.thrift.TRangeQuery], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, ranges_item.size))
    ranges_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = ranges_item.size
        while (_i < _size) {
          val ranges_item_element = ranges_item(_i)
          ranges_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        ranges_item.foreach { ranges_item_element =>
          ranges_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readMatchesValue(_iprot: TProtocol): Seq[xed.dictionary.domain.thrift.TMatchQuery] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[xed.dictionary.domain.thrift.TMatchQuery](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          xed.dictionary.domain.thrift.TMatchQuery.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeMatchesField(matches_item: Seq[xed.dictionary.domain.thrift.TMatchQuery], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MatchesField)
    writeMatchesValue(matches_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMatchesValue(matches_item: Seq[xed.dictionary.domain.thrift.TMatchQuery], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, matches_item.size))
    matches_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = matches_item.size
        while (_i < _size) {
          val matches_item_element = matches_item(_i)
          matches_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        matches_item.foreach { matches_item_element =>
          matches_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readSortsValue(_iprot: TProtocol): Seq[xed.dictionary.domain.thrift.TSortQuery] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[xed.dictionary.domain.thrift.TSortQuery](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          xed.dictionary.domain.thrift.TSortQuery.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeSortsField(sorts_item: Seq[xed.dictionary.domain.thrift.TSortQuery], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SortsField)
    writeSortsValue(sorts_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSortsValue(sorts_item: Seq[xed.dictionary.domain.thrift.TSortQuery], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, sorts_item.size))
    sorts_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = sorts_item.size
        while (_i < _size) {
          val sorts_item_element = sorts_item(_i)
          sorts_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        sorts_item.foreach { sorts_item_element =>
          sorts_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readFromValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeFromField(from_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FromField)
    writeFromValue(from_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFromValue(from_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(from_item)
  }

  @inline private[thrift] def readSizeValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeSizeField(size_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SizeField)
    writeSizeValue(size_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSizeValue(size_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(size_item)
  }


  object Immutable extends ThriftStructCodec3[TSearchRequest] {
    override def encode(_item: TSearchRequest, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TSearchRequest = TSearchRequest.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TSearchRequest] = TSearchRequest.metaData
  }

  /**
   * The default read-only implementation of TSearchRequest.  You typically should not need to
   * directly reference this class; instead, use the TSearchRequest.apply method to construct
   * new instances.
   */
  class Immutable(
      val terms: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]],
      val ranges: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]],
      val matches: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]],
      val sorts: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TSortQuery]],
      val from: Int,
      val size: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TSearchRequest {
    def this(
      terms: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]] = _root_.scala.None,
      ranges: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]] = _root_.scala.None,
      matches: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]] = _root_.scala.None,
      sorts: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TSortQuery]] = _root_.scala.None,
      from: Int,
      size: Int
    ) = this(
      terms,
      ranges,
      matches,
      sorts,
      from,
      size,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val terms: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]],
      val ranges: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]],
      val matches: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]],
      val sorts: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TSortQuery]],
      val from: Int,
      val size: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TSearchRequest {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TSearchRequest trait with additional state or
   * behavior and implement the read-only methods from TSearchRequest using an underlying
   * instance.
   */
  trait Proxy extends TSearchRequest {
    protected def _underlying_TSearchRequest: TSearchRequest
    override def terms: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]] = _underlying_TSearchRequest.terms
    override def ranges: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]] = _underlying_TSearchRequest.ranges
    override def matches: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]] = _underlying_TSearchRequest.matches
    override def sorts: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TSortQuery]] = _underlying_TSearchRequest.sorts
    override def from: Int = _underlying_TSearchRequest.from
    override def size: Int = _underlying_TSearchRequest.size
    override def _passthroughFields = _underlying_TSearchRequest._passthroughFields
  }
}

/**
 * Prefer the companion object's [[xed.dictionary.domain.thrift.TSearchRequest.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TSearchRequest
  extends ThriftStruct
  with _root_.scala.Product6[Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]], Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]], Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]], Option[Seq[xed.dictionary.domain.thrift.TSortQuery]], Int, Int]
  with ValidatingThriftStruct[TSearchRequest]
  with java.io.Serializable
{
  import TSearchRequest._

  def terms: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]]
  def ranges: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]]
  def matches: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]]
  def sorts: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TSortQuery]]
  def from: Int
  def size: Int

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = terms
  def _2 = ranges
  def _3 = matches
  def _4 = sorts
  def _5 = from
  def _6 = size

  def toTuple: _root_.scala.Tuple6[Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]], Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]], Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]], Option[Seq[xed.dictionary.domain.thrift.TSortQuery]], Int, Int] = {
    (
      terms,
      ranges,
      matches,
      sorts,
      from,
      size
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (terms.isDefined) {
                writeTermsValue(terms.get, _oprot)
                _root_.scala.Some(TSearchRequest.TermsField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (ranges.isDefined) {
                writeRangesValue(ranges.get, _oprot)
                _root_.scala.Some(TSearchRequest.RangesField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (matches.isDefined) {
                writeMatchesValue(matches.get, _oprot)
                _root_.scala.Some(TSearchRequest.MatchesField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (sorts.isDefined) {
                writeSortsValue(sorts.get, _oprot)
                _root_.scala.Some(TSearchRequest.SortsField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (true) {
                writeFromValue(from, _oprot)
                _root_.scala.Some(TSearchRequest.FromField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (true) {
                writeSizeValue(size, _oprot)
                _root_.scala.Some(TSearchRequest.SizeField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TSearchRequest = {
    var terms: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]] = this.terms
    var ranges: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]] = this.ranges
    var matches: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]] = this.matches
    var sorts: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TSortQuery]] = this.sorts
    var from: Int = this.from
    var size: Int = this.size
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        terms = _root_.scala.Some(readTermsValue(_blob.read))
      case 2 =>
        ranges = _root_.scala.Some(readRangesValue(_blob.read))
      case 3 =>
        matches = _root_.scala.Some(readMatchesValue(_blob.read))
      case 4 =>
        sorts = _root_.scala.Some(readSortsValue(_blob.read))
      case 5 =>
        from = readFromValue(_blob.read)
      case 6 =>
        size = readSizeValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      terms,
      ranges,
      matches,
      sorts,
      from,
      size,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TSearchRequest = {
    var terms: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]] = this.terms
    var ranges: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]] = this.ranges
    var matches: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]] = this.matches
    var sorts: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TSortQuery]] = this.sorts
    var from: Int = this.from
    var size: Int = this.size

    _fieldId match {
      case 1 =>
        terms = _root_.scala.None
      case 2 =>
        ranges = _root_.scala.None
      case 3 =>
        matches = _root_.scala.None
      case 4 =>
        sorts = _root_.scala.None
      case 5 =>
        from = 0
      case 6 =>
        size = 0
      case _ =>
    }
    new Immutable(
      terms,
      ranges,
      matches,
      sorts,
      from,
      size,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetTerms: TSearchRequest = unsetField(1)

  def unsetRanges: TSearchRequest = unsetField(2)

  def unsetMatches: TSearchRequest = unsetField(3)

  def unsetSorts: TSearchRequest = unsetField(4)

  def unsetFrom: TSearchRequest = unsetField(5)

  def unsetSize: TSearchRequest = unsetField(6)


  override def write(_oprot: TProtocol): Unit = {
    TSearchRequest.validate(this)
    _oprot.writeStructBegin(Struct)
    if (terms.isDefined) writeTermsField(terms.get, _oprot)
    if (ranges.isDefined) writeRangesField(ranges.get, _oprot)
    if (matches.isDefined) writeMatchesField(matches.get, _oprot)
    if (sorts.isDefined) writeSortsField(sorts.get, _oprot)
    writeFromField(from, _oprot)
    writeSizeField(size, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    terms: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TTermsQuery]] = this.terms,
    ranges: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TRangeQuery]] = this.ranges,
    matches: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TMatchQuery]] = this.matches,
    sorts: _root_.scala.Option[Seq[xed.dictionary.domain.thrift.TSortQuery]] = this.sorts,
    from: Int = this.from,
    size: Int = this.size,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TSearchRequest =
    new Immutable(
      terms,
      ranges,
      matches,
      sorts,
      from,
      size,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TSearchRequest]

  private def _equals(x: TSearchRequest, y: TSearchRequest): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TSearchRequest]) &&
      _passthroughFields == other.asInstanceOf[TSearchRequest]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 6

  override def productElement(n: Int): Any = n match {
    case 0 => this.terms
    case 1 => this.ranges
    case 2 => this.matches
    case 3 => this.sorts
    case 4 => this.from
    case 5 => this.size
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TSearchRequest"

  def _codec: ValidatingThriftStructCodec3[TSearchRequest] = TSearchRequest
}

