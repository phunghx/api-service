/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.dictionary.service

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftService,
  ThriftStruct,
  ThriftStructCodec,
  ThriftStructFieldInfo,
  ThriftResponse,
  ThriftUtil,
  ToThriftService,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import com.twitter.finagle.{service => ctfs}
import com.twitter.finagle.thrift.{
  Protocols,
  RichClientParam,
  RichServerParam,
  ThriftClientRequest,
  ThriftServiceIface
}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait TDictionaryService[+MM[_]] extends ThriftService {
  
  def ping(): MM[String]
  
  def lookup(sourceLang: String, targetLang: String, word: String): MM[xed.dictionary.domain.thrift.TDictionaryResponse]
  
  def multiLookup(sourceLang: String, targetLang: String, words: Seq[String] = Seq[String]()): MM[xed.dictionary.domain.thrift.TDictionaryMapResponse]
  
  def search(sourceLang: String, targetLang: String, searchRequest: xed.dictionary.domain.thrift.TSearchRequest): MM[xed.dictionary.domain.thrift.TDictionaryListResponse]

  /**
   * Used to close the underlying `Service`.
   * Not a user-defined API.
   */
  def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
}


object TDictionaryService { self =>

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  trait ServicePerEndpoint
    extends ToThriftService
    with _root_.com.twitter.finagle.thrift.ThriftServiceIface.Filterable[ServicePerEndpoint] {
    def ping : _root_.com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType]
    def lookup : _root_.com.twitter.finagle.Service[self.Lookup.Args, self.Lookup.SuccessType]
    def multiLookup : _root_.com.twitter.finagle.Service[self.MultiLookup.Args, self.MultiLookup.SuccessType]
    def search : _root_.com.twitter.finagle.Service[self.Search.Args, self.Search.SuccessType]

    def withPing(ping : _root_.com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType]): ServicePerEndpoint = this

    def withLookup(lookup : _root_.com.twitter.finagle.Service[self.Lookup.Args, self.Lookup.SuccessType]): ServicePerEndpoint = this

    def withMultiLookup(multiLookup : _root_.com.twitter.finagle.Service[self.MultiLookup.Args, self.MultiLookup.SuccessType]): ServicePerEndpoint = this

    def withSearch(search : _root_.com.twitter.finagle.Service[self.Search.Args, self.Search.SuccessType]): ServicePerEndpoint = this

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint = this

    /**
     * Converts the `ServicePerEndpoint` to a `ThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    def toThriftService: ThriftService = MethodPerEndpoint(this)

    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
  }

  trait ReqRepServicePerEndpoint
    extends ToThriftService
    with _root_.com.twitter.finagle.thrift.service.Filterable[ReqRepServicePerEndpoint] {
    def ping : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Ping.Args], _root_.com.twitter.scrooge.Response[self.Ping.SuccessType]]
    def lookup : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Lookup.Args], _root_.com.twitter.scrooge.Response[self.Lookup.SuccessType]]
    def multiLookup : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.MultiLookup.Args], _root_.com.twitter.scrooge.Response[self.MultiLookup.SuccessType]]
    def search : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Search.Args], _root_.com.twitter.scrooge.Response[self.Search.SuccessType]]

    def withPing(ping : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Ping.Args], _root_.com.twitter.scrooge.Response[self.Ping.SuccessType]]): ReqRepServicePerEndpoint = this

    def withLookup(lookup : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Lookup.Args], _root_.com.twitter.scrooge.Response[self.Lookup.SuccessType]]): ReqRepServicePerEndpoint = this

    def withMultiLookup(multiLookup : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.MultiLookup.Args], _root_.com.twitter.scrooge.Response[self.MultiLookup.SuccessType]]): ReqRepServicePerEndpoint = this

    def withSearch(search : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Search.Args], _root_.com.twitter.scrooge.Response[self.Search.SuccessType]]): ReqRepServicePerEndpoint = this

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint = this

    /**
     * Converts the `ServicePerEndpoint` to a `ThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    def toThriftService: ThriftService = ReqRepMethodPerEndpoint(this)

    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  trait BaseServiceIface extends ToThriftService {
    def ping : com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType]
    def lookup : com.twitter.finagle.Service[self.Lookup.Args, self.Lookup.SuccessType]
    def multiLookup : com.twitter.finagle.Service[self.MultiLookup.Args, self.MultiLookup.SuccessType]
    def search : com.twitter.finagle.Service[self.Search.Args, self.Search.SuccessType]

    def toThriftService: ThriftService = new MethodIface(this)
  }

  object ServicePerEndpoint {

    def apply(
      ping : _root_.com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType],
      lookup : _root_.com.twitter.finagle.Service[self.Lookup.Args, self.Lookup.SuccessType],
      multiLookup : _root_.com.twitter.finagle.Service[self.MultiLookup.Args, self.MultiLookup.SuccessType],
      search : _root_.com.twitter.finagle.Service[self.Search.Args, self.Search.SuccessType]
    ): ServicePerEndpoint = new ServicePerEndpointImpl(ping, lookup, multiLookup, search)

    private final class ServicePerEndpointImpl(
      override val ping : _root_.com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType],
      override val lookup : _root_.com.twitter.finagle.Service[self.Lookup.Args, self.Lookup.SuccessType],
      override val multiLookup : _root_.com.twitter.finagle.Service[self.MultiLookup.Args, self.MultiLookup.SuccessType],
      override val search : _root_.com.twitter.finagle.Service[self.Search.Args, self.Search.SuccessType]
    ) extends ServicePerEndpoint {

      override def withPing(
        ping : _root_.com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(ping, lookup, multiLookup, search)

      override def withLookup(
        lookup : _root_.com.twitter.finagle.Service[self.Lookup.Args, self.Lookup.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(ping, lookup, multiLookup, search)

      override def withMultiLookup(
        multiLookup : _root_.com.twitter.finagle.Service[self.MultiLookup.Args, self.MultiLookup.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(ping, lookup, multiLookup, search)

      override def withSearch(
        search : _root_.com.twitter.finagle.Service[self.Search.Args, self.Search.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(ping, lookup, multiLookup, search)

      override def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint =
        new ServicePerEndpointImpl(
          ping = filter.toFilter.andThen(ping),
          lookup = filter.toFilter.andThen(lookup),
          multiLookup = filter.toFilter.andThen(multiLookup),
          search = filter.toFilter.andThen(search)
        )

      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
          this.ping,
          this.lookup,
          this.multiLookup,
          this.search
        )
    }
  }

  object ReqRepServicePerEndpoint {

    def apply(
      ping :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.Ping.Args], _root_.com.twitter.scrooge.Response[self.Ping.SuccessType]],
      lookup :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.Lookup.Args], _root_.com.twitter.scrooge.Response[self.Lookup.SuccessType]],
      multiLookup :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.MultiLookup.Args], _root_.com.twitter.scrooge.Response[self.MultiLookup.SuccessType]],
      search :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.Search.Args], _root_.com.twitter.scrooge.Response[self.Search.SuccessType]]
    ): ReqRepServicePerEndpoint =
      new ReqRepServicePerEndpointImpl(ping, lookup, multiLookup, search)

    private final class ReqRepServicePerEndpointImpl(
      override val ping : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.Ping.Args], _root_.com.twitter.scrooge.Response[self.Ping.SuccessType]],
      override val lookup : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.Lookup.Args], _root_.com.twitter.scrooge.Response[self.Lookup.SuccessType]],
      override val multiLookup : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.MultiLookup.Args], _root_.com.twitter.scrooge.Response[self.MultiLookup.SuccessType]],
      override val search : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.Search.Args], _root_.com.twitter.scrooge.Response[self.Search.SuccessType]]
    ) extends ReqRepServicePerEndpoint {

      override def withPing(
        ping : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Ping.Args], _root_.com.twitter.scrooge.Response[self.Ping.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(ping, lookup, multiLookup, search)
      override def withLookup(
        lookup : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Lookup.Args], _root_.com.twitter.scrooge.Response[self.Lookup.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(ping, lookup, multiLookup, search)
      override def withMultiLookup(
        multiLookup : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.MultiLookup.Args], _root_.com.twitter.scrooge.Response[self.MultiLookup.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(ping, lookup, multiLookup, search)
      override def withSearch(
        search : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Search.Args], _root_.com.twitter.scrooge.Response[self.Search.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(ping, lookup, multiLookup, search)

      override def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(
          ping = filter.toFilter.andThen(ping),
          lookup = filter.toFilter.andThen(lookup),
          multiLookup = filter.toFilter.andThen(multiLookup),
          search = filter.toFilter.andThen(search)
        )

      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
          this.ping,
          this.lookup,
          this.multiLookup,
          this.search
        )
    }
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  case class ServiceIface(
    ping : com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType],
    lookup : com.twitter.finagle.Service[self.Lookup.Args, self.Lookup.SuccessType],
    multiLookup : com.twitter.finagle.Service[self.MultiLookup.Args, self.MultiLookup.SuccessType],
    search : com.twitter.finagle.Service[self.Search.Args, self.Search.SuccessType]
  ) extends BaseServiceIface
    with com.twitter.finagle.thrift.ThriftServiceIface.Filterable[ServiceIface] {

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServiceIface` now including the filter.
     */
    def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ServiceIface =
      copy(
        ping = filter.toFilter.andThen(ping),
        lookup = filter.toFilter.andThen(lookup),
        multiLookup = filter.toFilter.andThen(multiLookup),
        search = filter.toFilter.andThen(search)
      )
  }

  implicit object ServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ServicePerEndpointBuilder[ServicePerEndpoint] {
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServicePerEndpoint =
        ServicePerEndpoint(
          ping = ThriftServiceIface(self.Ping, thriftService, clientParam),
          lookup = ThriftServiceIface(self.Lookup, thriftService, clientParam),
          multiLookup = ThriftServiceIface(self.MultiLookup, thriftService, clientParam),
          search = ThriftServiceIface(self.Search, thriftService, clientParam)
        )
  }

  implicit object ReqRepServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepServicePerEndpointBuilder[ReqRepServicePerEndpoint] {
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ReqRepServicePerEndpoint =
        ReqRepServicePerEndpoint(
          ping = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.Ping, thriftService, clientParam),
          lookup = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.Lookup, thriftService, clientParam),
          multiLookup = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.MultiLookup, thriftService, clientParam),
          search = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.Search, thriftService, clientParam)
        )
  }

  @deprecated("Use ServicePerEndpointBuilder", "2017-11-07")
  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServiceIface =
        ServiceIface(
          ping = ThriftServiceIface(self.Ping, binaryService, clientParam),
          lookup = ThriftServiceIface(self.Lookup, binaryService, clientParam),
          multiLookup = ThriftServiceIface(self.MultiLookup, binaryService, clientParam),
          search = ThriftServiceIface(self.Search, binaryService, clientParam)
        )
  }

  object Ping extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("ping_args")
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf.toList
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
      ): Args =
        new Args(
        )
    
      def unapply(_item: Args): Boolean = true
    
    
    
    }
    
    class Args(
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
      ) = this(
        Map.empty
      )
    
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 0
    
      override def productElement(n: Int): Any = n match {
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    }

    type SuccessType = String
    
    object Result extends ValidatingThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("ping_result")
      val SuccessField = new TField("success", TType.STRING, 0)
      val SuccessFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.success)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[String] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRING =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[String] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[String]] = _root_.scala.Some(_item.success)
    
    
      @inline private[service] def readSuccessValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeSuccessField(success_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(success_item)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[String],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[String] with ThriftStruct
      with _root_.scala.Product1[Option[String]]
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[String] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[String] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[String] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[String]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[String]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    val name: String = "ping"
    val serviceName: String = "TDictionaryService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val ping$args = Ping.Args
  type ping$args = Ping.Args

  val ping$result = Ping.Result
  type ping$result = Ping.Result

  object Lookup extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("lookup_args")
      val SourceLangField = new TField("sourceLang", TType.STRING, 1)
      val SourceLangFieldManifest = implicitly[Manifest[String]]
      val TargetLangField = new TField("targetLang", TType.STRING, 2)
      val TargetLangFieldManifest = implicitly[Manifest[String]]
      val WordField = new TField("word", TType.STRING, 3)
      val WordFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SourceLangField,
          false,
          false,
          SourceLangFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          TargetLangField,
          false,
          false,
          TargetLangFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          WordField,
          false,
          false,
          WordFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.sourceLang)
        buf ++= validateField(item.targetLang)
        buf ++= validateField(item.word)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          sourceLang =
            {
              val field = original.sourceLang
              field
            },
          targetLang =
            {
              val field = original.targetLang
              field
            },
          word =
            {
              val field = original.word
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var sourceLang: String = null
        var targetLang: String = null
        var word: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    sourceLang = readSourceLangValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'sourceLang' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRING =>
                    targetLang = readTargetLangValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'targetLang' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.STRING =>
                    word = readWordValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'word' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          sourceLang,
          targetLang,
          word,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        sourceLang: String,
        targetLang: String,
        word: String
      ): Args =
        new Args(
          sourceLang,
          targetLang,
          word
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple3[String, String, String]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private[service] def readSourceLangValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeSourceLangField(sourceLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SourceLangField)
        writeSourceLangValue(sourceLang_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSourceLangValue(sourceLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(sourceLang_item)
      }
    
      @inline private[service] def readTargetLangValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTargetLangField(targetLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TargetLangField)
        writeTargetLangValue(targetLang_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTargetLangValue(targetLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(targetLang_item)
      }
    
      @inline private[service] def readWordValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeWordField(word_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(WordField)
        writeWordValue(word_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeWordValue(word_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(word_item)
      }
    
    
    }
    
    class Args(
        val sourceLang: String,
        val targetLang: String,
        val word: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product3[String, String, String]
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        sourceLang: String,
        targetLang: String,
        word: String
      ) = this(
        sourceLang,
        targetLang,
        word,
        Map.empty
      )
    
      def _1 = sourceLang
      def _2 = targetLang
      def _3 = word
    
      def toTuple: _root_.scala.Tuple3[String, String, String] = {
        (
          sourceLang,
          targetLang,
          word
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (sourceLang ne null) writeSourceLangField(sourceLang, _oprot)
        if (targetLang ne null) writeTargetLangField(targetLang, _oprot)
        if (word ne null) writeWordField(word, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        sourceLang: String = this.sourceLang,
        targetLang: String = this.targetLang,
        word: String = this.word,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          sourceLang,
          targetLang,
          word,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 3
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.sourceLang
        case 1 => this.targetLang
        case 2 => this.word
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    }

    type SuccessType = xed.dictionary.domain.thrift.TDictionaryResponse
    
    object Result extends ValidatingThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("lookup_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[xed.dictionary.domain.thrift.TDictionaryResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.success)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                xed.dictionary.domain.thrift.TDictionaryResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private[service] def readSuccessValue(_iprot: TProtocol): xed.dictionary.domain.thrift.TDictionaryResponse = {
        xed.dictionary.domain.thrift.TDictionaryResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: xed.dictionary.domain.thrift.TDictionaryResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: xed.dictionary.domain.thrift.TDictionaryResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[xed.dictionary.domain.thrift.TDictionaryResponse] with ThriftStruct
      with _root_.scala.Product1[Option[xed.dictionary.domain.thrift.TDictionaryResponse]]
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[xed.dictionary.domain.thrift.TDictionaryResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[xed.dictionary.domain.thrift.TDictionaryResponse]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[xed.dictionary.domain.thrift.TDictionaryResponse]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    val name: String = "lookup"
    val serviceName: String = "TDictionaryService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val lookup$args = Lookup.Args
  type lookup$args = Lookup.Args

  val lookup$result = Lookup.Result
  type lookup$result = Lookup.Result

  object MultiLookup extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("multiLookup_args")
      val SourceLangField = new TField("sourceLang", TType.STRING, 1)
      val SourceLangFieldManifest = implicitly[Manifest[String]]
      val TargetLangField = new TField("targetLang", TType.STRING, 2)
      val TargetLangFieldManifest = implicitly[Manifest[String]]
      val WordsField = new TField("words", TType.LIST, 3)
      val WordsFieldManifest = implicitly[Manifest[Seq[String]]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SourceLangField,
          false,
          false,
          SourceLangFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          TargetLangField,
          false,
          false,
          TargetLangFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          WordsField,
          false,
          false,
          WordsFieldManifest,
          _root_.scala.None,
          _root_.scala.Some(implicitly[Manifest[String]]),
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.sourceLang)
        buf ++= validateField(item.targetLang)
        buf ++= validateField(item.words)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          sourceLang =
            {
              val field = original.sourceLang
              field
            },
          targetLang =
            {
              val field = original.targetLang
              field
            },
          words =
            {
              val field = original.words
              field.map { field =>
                field
              }
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var sourceLang: String = null
        var targetLang: String = null
        var words: Seq[String] = Seq[String]()
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    sourceLang = readSourceLangValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'sourceLang' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRING =>
                    targetLang = readTargetLangValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'targetLang' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.LIST =>
                    words = readWordsValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.LIST
                    throw new TProtocolException(
                      "Received wrong type for field 'words' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          sourceLang,
          targetLang,
          words,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        sourceLang: String,
        targetLang: String,
        words: Seq[String] = Seq[String]()
      ): Args =
        new Args(
          sourceLang,
          targetLang,
          words
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple3[String, String, Seq[String]]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private[service] def readSourceLangValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeSourceLangField(sourceLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SourceLangField)
        writeSourceLangValue(sourceLang_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSourceLangValue(sourceLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(sourceLang_item)
      }
    
      @inline private[service] def readTargetLangValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTargetLangField(targetLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TargetLangField)
        writeTargetLangValue(targetLang_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTargetLangValue(targetLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(targetLang_item)
      }
    
      @inline private[service] def readWordsValue(_iprot: TProtocol): Seq[String] = {
        val _list = _iprot.readListBegin()
        if (_list.size == 0) {
          _iprot.readListEnd()
          Nil
        } else {
          val _rv = new mutable$ArrayBuffer[String](_list.size)
          var _i = 0
          while (_i < _list.size) {
            _rv += {
              _iprot.readString()
            }
            _i += 1
          }
          _iprot.readListEnd()
          _rv
        }
      }
    
      @inline private def writeWordsField(words_item: Seq[String], _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(WordsField)
        writeWordsValue(words_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeWordsValue(words_item: Seq[String], _oprot: TProtocol): Unit = {
        _oprot.writeListBegin(new TList(TType.STRING, words_item.size))
        words_item match {
          case _: IndexedSeq[_] =>
            var _i = 0
            val _size = words_item.size
            while (_i < _size) {
              val words_item_element = words_item(_i)
              _oprot.writeString(words_item_element)
              _i += 1
            }
          case _ =>
            words_item.foreach { words_item_element =>
              _oprot.writeString(words_item_element)
            }
        }
        _oprot.writeListEnd()
      }
    
    
    }
    
    class Args(
        val sourceLang: String,
        val targetLang: String,
        val words: Seq[String],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product3[String, String, Seq[String]]
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        sourceLang: String,
        targetLang: String,
        words: Seq[String] = Seq[String]()
      ) = this(
        sourceLang,
        targetLang,
        words,
        Map.empty
      )
    
      def _1 = sourceLang
      def _2 = targetLang
      def _3 = words
    
      def toTuple: _root_.scala.Tuple3[String, String, Seq[String]] = {
        (
          sourceLang,
          targetLang,
          words
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (sourceLang ne null) writeSourceLangField(sourceLang, _oprot)
        if (targetLang ne null) writeTargetLangField(targetLang, _oprot)
        if (words ne null) writeWordsField(words, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        sourceLang: String = this.sourceLang,
        targetLang: String = this.targetLang,
        words: Seq[String] = this.words,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          sourceLang,
          targetLang,
          words,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 3
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.sourceLang
        case 1 => this.targetLang
        case 2 => this.words
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    }

    type SuccessType = xed.dictionary.domain.thrift.TDictionaryMapResponse
    
    object Result extends ValidatingThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("multiLookup_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[xed.dictionary.domain.thrift.TDictionaryMapResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.success)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                xed.dictionary.domain.thrift.TDictionaryMapResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryMapResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryMapResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryMapResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private[service] def readSuccessValue(_iprot: TProtocol): xed.dictionary.domain.thrift.TDictionaryMapResponse = {
        xed.dictionary.domain.thrift.TDictionaryMapResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: xed.dictionary.domain.thrift.TDictionaryMapResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: xed.dictionary.domain.thrift.TDictionaryMapResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryMapResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[xed.dictionary.domain.thrift.TDictionaryMapResponse] with ThriftStruct
      with _root_.scala.Product1[Option[xed.dictionary.domain.thrift.TDictionaryMapResponse]]
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryMapResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[xed.dictionary.domain.thrift.TDictionaryMapResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryMapResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[xed.dictionary.domain.thrift.TDictionaryMapResponse]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[xed.dictionary.domain.thrift.TDictionaryMapResponse]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    val name: String = "multiLookup"
    val serviceName: String = "TDictionaryService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val multiLookup$args = MultiLookup.Args
  type multiLookup$args = MultiLookup.Args

  val multiLookup$result = MultiLookup.Result
  type multiLookup$result = MultiLookup.Result

  object Search extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("search_args")
      val SourceLangField = new TField("sourceLang", TType.STRING, 1)
      val SourceLangFieldManifest = implicitly[Manifest[String]]
      val TargetLangField = new TField("targetLang", TType.STRING, 2)
      val TargetLangFieldManifest = implicitly[Manifest[String]]
      val SearchRequestField = new TField("searchRequest", TType.STRUCT, 3)
      val SearchRequestFieldManifest = implicitly[Manifest[xed.dictionary.domain.thrift.TSearchRequest]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SourceLangField,
          false,
          false,
          SourceLangFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          TargetLangField,
          false,
          false,
          TargetLangFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        ),
        new ThriftStructFieldInfo(
          SearchRequestField,
          false,
          false,
          SearchRequestFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.sourceLang)
        buf ++= validateField(item.targetLang)
        buf ++= validateField(item.searchRequest)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          sourceLang =
            {
              val field = original.sourceLang
              field
            },
          targetLang =
            {
              val field = original.targetLang
              field
            },
          searchRequest =
            {
              val field = original.searchRequest
              xed.dictionary.domain.thrift.TSearchRequest.withoutPassthroughFields(field)
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var sourceLang: String = null
        var targetLang: String = null
        var searchRequest: xed.dictionary.domain.thrift.TSearchRequest = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    sourceLang = readSourceLangValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'sourceLang' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRING =>
                    targetLang = readTargetLangValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'targetLang' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    searchRequest = readSearchRequestValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'searchRequest' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          sourceLang,
          targetLang,
          searchRequest,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        sourceLang: String,
        targetLang: String,
        searchRequest: xed.dictionary.domain.thrift.TSearchRequest
      ): Args =
        new Args(
          sourceLang,
          targetLang,
          searchRequest
        )
    
      def unapply(_item: Args): _root_.scala.Option[_root_.scala.Tuple3[String, String, xed.dictionary.domain.thrift.TSearchRequest]] = _root_.scala.Some(_item.toTuple)
    
    
      @inline private[service] def readSourceLangValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeSourceLangField(sourceLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SourceLangField)
        writeSourceLangValue(sourceLang_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSourceLangValue(sourceLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(sourceLang_item)
      }
    
      @inline private[service] def readTargetLangValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTargetLangField(targetLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TargetLangField)
        writeTargetLangValue(targetLang_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTargetLangValue(targetLang_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(targetLang_item)
      }
    
      @inline private[service] def readSearchRequestValue(_iprot: TProtocol): xed.dictionary.domain.thrift.TSearchRequest = {
        xed.dictionary.domain.thrift.TSearchRequest.decode(_iprot)
      }
    
      @inline private def writeSearchRequestField(searchRequest_item: xed.dictionary.domain.thrift.TSearchRequest, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SearchRequestField)
        writeSearchRequestValue(searchRequest_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSearchRequestValue(searchRequest_item: xed.dictionary.domain.thrift.TSearchRequest, _oprot: TProtocol): Unit = {
        searchRequest_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val sourceLang: String,
        val targetLang: String,
        val searchRequest: xed.dictionary.domain.thrift.TSearchRequest,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product3[String, String, xed.dictionary.domain.thrift.TSearchRequest]
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
      def this(
        sourceLang: String,
        targetLang: String,
        searchRequest: xed.dictionary.domain.thrift.TSearchRequest
      ) = this(
        sourceLang,
        targetLang,
        searchRequest,
        Map.empty
      )
    
      def _1 = sourceLang
      def _2 = targetLang
      def _3 = searchRequest
    
      def toTuple: _root_.scala.Tuple3[String, String, xed.dictionary.domain.thrift.TSearchRequest] = {
        (
          sourceLang,
          targetLang,
          searchRequest
        )
      }
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (sourceLang ne null) writeSourceLangField(sourceLang, _oprot)
        if (targetLang ne null) writeTargetLangField(targetLang, _oprot)
        if (searchRequest ne null) writeSearchRequestField(searchRequest, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        sourceLang: String = this.sourceLang,
        targetLang: String = this.targetLang,
        searchRequest: xed.dictionary.domain.thrift.TSearchRequest = this.searchRequest,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          sourceLang,
          targetLang,
          searchRequest,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args]) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 3
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.sourceLang
        case 1 => this.targetLang
        case 2 => this.searchRequest
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    }

    type SuccessType = xed.dictionary.domain.thrift.TDictionaryListResponse
    
    object Result extends ValidatingThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("search_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[xed.dictionary.domain.thrift.TDictionaryListResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.success)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                xed.dictionary.domain.thrift.TDictionaryListResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryListResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryListResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryListResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private[service] def readSuccessValue(_iprot: TProtocol): xed.dictionary.domain.thrift.TDictionaryListResponse = {
        xed.dictionary.domain.thrift.TDictionaryListResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: xed.dictionary.domain.thrift.TDictionaryListResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: xed.dictionary.domain.thrift.TDictionaryListResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryListResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[xed.dictionary.domain.thrift.TDictionaryListResponse] with ThriftStruct
      with _root_.scala.Product1[Option[xed.dictionary.domain.thrift.TDictionaryListResponse]]
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryListResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[xed.dictionary.domain.thrift.TDictionaryListResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[xed.dictionary.domain.thrift.TDictionaryListResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator)
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result]) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[xed.dictionary.domain.thrift.TDictionaryListResponse]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[xed.dictionary.domain.thrift.TDictionaryListResponse]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    val name: String = "search"
    val serviceName: String = "TDictionaryService"
    val argsCodec = Args
    val responseCodec = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val search$args = Search.Args
  type search$args = Search.Args

  val search$result = Search.Result
  type search$result = Search.Result


  trait MethodPerEndpoint
    extends TDictionaryService[Future] {
    
    def ping(): Future[String]
    
    def lookup(sourceLang: String, targetLang: String, word: String): Future[xed.dictionary.domain.thrift.TDictionaryResponse]
    
    def multiLookup(sourceLang: String, targetLang: String, words: Seq[String] = Seq[String]()): Future[xed.dictionary.domain.thrift.TDictionaryMapResponse]
    
    def search(sourceLang: String, targetLang: String, searchRequest: xed.dictionary.domain.thrift.TSearchRequest): Future[xed.dictionary.domain.thrift.TDictionaryListResponse]
  }

  object MethodPerEndpoint {

    def apply(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint = {
      new MethodPerEndpointImpl(servicePerEndpoint) {}
    }

    /**
     * Use `MethodPerEndpoint.apply()` instead of this constructor.
     */
    class MethodPerEndpointImpl protected (servicePerEndpoint: ServicePerEndpoint)
      extends MethodPerEndpoint {
        def ping(): Future[String] =
          servicePerEndpoint.ping(self.Ping.Args())
        def lookup(sourceLang: String, targetLang: String, word: String): Future[xed.dictionary.domain.thrift.TDictionaryResponse] =
          servicePerEndpoint.lookup(self.Lookup.Args(sourceLang, targetLang, word))
        def multiLookup(sourceLang: String, targetLang: String, words: Seq[String] = Seq[String]()): Future[xed.dictionary.domain.thrift.TDictionaryMapResponse] =
          servicePerEndpoint.multiLookup(self.MultiLookup.Args(sourceLang, targetLang, words))
        def search(sourceLang: String, targetLang: String, searchRequest: xed.dictionary.domain.thrift.TSearchRequest): Future[xed.dictionary.domain.thrift.TDictionaryListResponse] =
          servicePerEndpoint.search(self.Search.Args(sourceLang, targetLang, searchRequest))

        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
    }
  }

  object ReqRepMethodPerEndpoint {

    def apply(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      new ReqRepMethodPerEndpointImpl(servicePerEndpoint) { }

    /**
     * Use `ReqRepMethodPerEndpoint.apply()` instead of this constructor.
     */
    class ReqRepMethodPerEndpointImpl protected (servicePerEndpoint: ReqRepServicePerEndpoint)
      extends MethodPerEndpoint {

        def ping(): Future[String] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.Ping.Args())
          servicePerEndpoint.ping(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }
        def lookup(sourceLang: String, targetLang: String, word: String): Future[xed.dictionary.domain.thrift.TDictionaryResponse] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.Lookup.Args(sourceLang, targetLang, word))
          servicePerEndpoint.lookup(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }
        def multiLookup(sourceLang: String, targetLang: String, words: Seq[String] = Seq[String]()): Future[xed.dictionary.domain.thrift.TDictionaryMapResponse] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.MultiLookup.Args(sourceLang, targetLang, words))
          servicePerEndpoint.multiLookup(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }
        def search(sourceLang: String, targetLang: String, searchRequest: xed.dictionary.domain.thrift.TSearchRequest): Future[xed.dictionary.domain.thrift.TDictionaryListResponse] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.Search.Args(sourceLang, targetLang, searchRequest))
          servicePerEndpoint.search(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }

        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
    }
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  class MethodIface(serviceIface: BaseServiceIface)
    extends FutureIface {
    def ping(): Future[String] =
      serviceIface.ping(self.Ping.Args())
    def lookup(sourceLang: String, targetLang: String, word: String): Future[xed.dictionary.domain.thrift.TDictionaryResponse] =
      serviceIface.lookup(self.Lookup.Args(sourceLang, targetLang, word))
    def multiLookup(sourceLang: String, targetLang: String, words: Seq[String] = Seq[String]()): Future[xed.dictionary.domain.thrift.TDictionaryMapResponse] =
      serviceIface.multiLookup(self.MultiLookup.Args(sourceLang, targetLang, words))
    def search(sourceLang: String, targetLang: String, searchRequest: xed.dictionary.domain.thrift.TSearchRequest): Future[xed.dictionary.domain.thrift.TDictionaryListResponse] =
      serviceIface.search(self.Search.Args(sourceLang, targetLang, searchRequest))
  }

  implicit object MethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.MethodPerEndpointBuilder[ServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use MethodPerEndpointBuilder", "2018-01-12")
  implicit object ThriftServiceBuilder
    extends _root_.com.twitter.finagle.thrift.service.ThriftServiceBuilder[ServicePerEndpoint, TDictionaryService[Future]] {
    def build(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  implicit object ReqRepMethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepMethodPerEndpointBuilder[ReqRepServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      ReqRepMethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use ReqRepMethodPerEndpointBuilder", "2018-01-12")
  implicit object ReqRepThriftServiceBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepThriftServiceBuilder[ReqRepServicePerEndpoint, TDictionaryService[Future]] {
    def build(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      ReqRepMethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use MethodPerEndpointBuilder", "2017-11-07")
  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, TDictionaryService[Future]] {
    def newMethodIface(serviceIface: ServiceIface): MethodIface =
      new MethodIface(serviceIface)
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  trait FutureIface
    extends TDictionaryService[Future] {
    
    def ping(): Future[String]
    
    def lookup(sourceLang: String, targetLang: String, word: String): Future[xed.dictionary.domain.thrift.TDictionaryResponse]
    
    def multiLookup(sourceLang: String, targetLang: String, words: Seq[String] = Seq[String]()): Future[xed.dictionary.domain.thrift.TDictionaryMapResponse]
    
    def search(sourceLang: String, targetLang: String, searchRequest: xed.dictionary.domain.thrift.TSearchRequest): Future[xed.dictionary.domain.thrift.TDictionaryListResponse]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      clientParam: RichClientParam)
    extends TDictionaryService$FinagleClient(service, clientParam)
    with FutureIface
    with MethodPerEndpoint {

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "TDictionaryService",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver,
      responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats,
        responseClassifier = responseClassifier
      )
    )

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String,
      stats: com.twitter.finagle.stats.StatsReceiver
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats
      )
    )
  }

  class FinagledService(
      iface: TDictionaryService[Future],
      serverParam: RichServerParam)
    extends TDictionaryService$FinagleService(iface, serverParam) {

    @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
    def this(
      iface: TDictionaryService[Future],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String = "TDictionaryService"
    ) = this(iface, RichServerParam(protocolFactory, serviceName))
  }
}
