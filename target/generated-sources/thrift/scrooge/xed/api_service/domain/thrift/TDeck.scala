/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.api_service.domain.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TDeck extends ValidatingThriftStructCodec3[TDeck] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TDeck")
  val IdField = new TField("id", TType.STRING, 1)
  val IdFieldManifest = implicitly[Manifest[String]]
  val UsernameField = new TField("username", TType.STRING, 2)
  val UsernameFieldManifest = implicitly[Manifest[String]]
  val NameField = new TField("name", TType.STRING, 3)
  val NameFieldManifest = implicitly[Manifest[String]]
  val ThumbnailField = new TField("thumbnail", TType.STRING, 4)
  val ThumbnailFieldManifest = implicitly[Manifest[String]]
  val DescriptionField = new TField("description", TType.STRING, 5)
  val DescriptionFieldManifest = implicitly[Manifest[String]]
  val DesignField = new TField("design", TType.STRING, 6)
  val DesignFieldManifest = implicitly[Manifest[String]]
  val CardsField = new TField("cards", TType.LIST, 7)
  val CardsFieldManifest = implicitly[Manifest[Seq[String]]]
  val DeckStatusField = new TField("deckStatus", TType.I32, 8)
  val DeckStatusFieldManifest = implicitly[Manifest[Int]]
  val UpdatedTimeField = new TField("updatedTime", TType.I64, 9)
  val UpdatedTimeFieldManifest = implicitly[Manifest[Long]]
  val CreatedTimeField = new TField("createdTime", TType.I64, 10)
  val CreatedTimeFieldManifest = implicitly[Manifest[Long]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      IdField,
      false,
      true,
      IdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      UsernameField,
      true,
      false,
      UsernameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NameField,
      true,
      false,
      NameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ThumbnailField,
      true,
      false,
      ThumbnailFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      DescriptionField,
      true,
      false,
      DescriptionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      DesignField,
      true,
      false,
      DesignFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CardsField,
      true,
      false,
      CardsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      DeckStatusField,
      true,
      false,
      DeckStatusFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      UpdatedTimeField,
      true,
      false,
      UpdatedTimeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CreatedTimeField,
      true,
      false,
      CreatedTimeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TDeck): Unit = {
    if (_item.id == null) throw new TProtocolException("Required field id cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TDeck): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.id == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.id)
    buf ++= validateField(item.username)
    buf ++= validateField(item.name)
    buf ++= validateField(item.thumbnail)
    buf ++= validateField(item.description)
    buf ++= validateField(item.design)
    buf ++= validateField(item.cards)
    buf ++= validateField(item.deckStatus)
    buf ++= validateField(item.updatedTime)
    buf ++= validateField(item.createdTime)
    buf.toList
  }

  def withoutPassthroughFields(original: TDeck): TDeck =
    new Immutable(
      id =
        {
          val field = original.id
          field
        },
      username =
        {
          val field = original.username
          field.map { field =>
            field
          }
        },
      name =
        {
          val field = original.name
          field.map { field =>
            field
          }
        },
      thumbnail =
        {
          val field = original.thumbnail
          field.map { field =>
            field
          }
        },
      description =
        {
          val field = original.description
          field.map { field =>
            field
          }
        },
      design =
        {
          val field = original.design
          field.map { field =>
            field
          }
        },
      cards =
        {
          val field = original.cards
          field.map { field =>
            field.map { field =>
              field
            }
          }
        },
      deckStatus =
        {
          val field = original.deckStatus
          field.map { field =>
            field
          }
        },
      updatedTime =
        {
          val field = original.updatedTime
          field.map { field =>
            field
          }
        },
      createdTime =
        {
          val field = original.createdTime
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: TDeck, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TDeck = {

    var idOffset: Int = -1
    var _got_id = false
    var usernameOffset: Int = -1
    var nameOffset: Int = -1
    var thumbnailOffset: Int = -1
    var descriptionOffset: Int = -1
    var designOffset: Int = -1
    var cards: Option[Seq[String]] = None
    var deckStatusOffset: Int = -1
    var updatedTimeOffset: Int = -1
    var createdTimeOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                idOffset = _iprot.offsetSkipString
    
                _got_id = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                usernameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                nameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                thumbnailOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'thumbnail' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                descriptionOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'description' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                designOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'design' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.LIST =>
    
                cards = Some(readCardsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'cards' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I32 =>
                deckStatusOffset = _iprot.offsetSkipI32
    
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'deckStatus' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I64 =>
                updatedTimeOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'updatedTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.I64 =>
                createdTimeOffset = _iprot.offsetSkipI64
    
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'createdTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_id) throw new TProtocolException("Required field 'id' was not found in serialized data for struct TDeck")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      idOffset,
      usernameOffset,
      nameOffset,
      thumbnailOffset,
      descriptionOffset,
      designOffset,
      cards,
      deckStatusOffset,
      updatedTimeOffset,
      createdTimeOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TDeck =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TDeck = {
    var id: String = null
    var _got_id = false
    var username: _root_.scala.Option[String] = _root_.scala.None
    var name: _root_.scala.Option[String] = _root_.scala.None
    var thumbnail: _root_.scala.Option[String] = _root_.scala.None
    var description: _root_.scala.Option[String] = _root_.scala.None
    var design: _root_.scala.Option[String] = _root_.scala.None
    var cards: _root_.scala.Option[Seq[String]] = _root_.scala.None
    var deckStatus: _root_.scala.Option[Int] = _root_.scala.None
    var updatedTime: _root_.scala.Option[Long] = _root_.scala.None
    var createdTime: _root_.scala.Option[Long] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                id = readIdValue(_iprot)
                _got_id = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                username = _root_.scala.Some(readUsernameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                name = _root_.scala.Some(readNameValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                thumbnail = _root_.scala.Some(readThumbnailValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'thumbnail' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                description = _root_.scala.Some(readDescriptionValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'description' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                design = _root_.scala.Some(readDesignValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'design' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.LIST =>
                cards = _root_.scala.Some(readCardsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'cards' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I32 =>
                deckStatus = _root_.scala.Some(readDeckStatusValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'deckStatus' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I64 =>
                updatedTime = _root_.scala.Some(readUpdatedTimeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'updatedTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.I64 =>
                createdTime = _root_.scala.Some(readCreatedTimeValue(_iprot))
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'createdTime' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_id) throw new TProtocolException("Required field 'id' was not found in serialized data for struct TDeck")
    new Immutable(
      id,
      username,
      name,
      thumbnail,
      description,
      design,
      cards,
      deckStatus,
      updatedTime,
      createdTime,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    id: String,
    username: _root_.scala.Option[String] = _root_.scala.None,
    name: _root_.scala.Option[String] = _root_.scala.None,
    thumbnail: _root_.scala.Option[String] = _root_.scala.None,
    description: _root_.scala.Option[String] = _root_.scala.None,
    design: _root_.scala.Option[String] = _root_.scala.None,
    cards: _root_.scala.Option[Seq[String]] = _root_.scala.None,
    deckStatus: _root_.scala.Option[Int] = _root_.scala.None,
    updatedTime: _root_.scala.Option[Long] = _root_.scala.None,
    createdTime: _root_.scala.Option[Long] = _root_.scala.None
  ): TDeck =
    new Immutable(
      id,
      username,
      name,
      thumbnail,
      description,
      design,
      cards,
      deckStatus,
      updatedTime,
      createdTime
    )

  def unapply(_item: TDeck): _root_.scala.Option[_root_.scala.Tuple10[String, Option[String], Option[String], Option[String], Option[String], Option[String], Option[Seq[String]], Option[Int], Option[Long], Option[Long]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readIdValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeIdField(id_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IdField)
    writeIdValue(id_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIdValue(id_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(id_item)
  }

  @inline private[thrift] def readUsernameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeUsernameField(username_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UsernameField)
    writeUsernameValue(username_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUsernameValue(username_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(username_item)
  }

  @inline private[thrift] def readNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeNameField(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NameField)
    writeNameValue(name_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNameValue(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(name_item)
  }

  @inline private[thrift] def readThumbnailValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeThumbnailField(thumbnail_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ThumbnailField)
    writeThumbnailValue(thumbnail_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeThumbnailValue(thumbnail_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(thumbnail_item)
  }

  @inline private[thrift] def readDescriptionValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeDescriptionField(description_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DescriptionField)
    writeDescriptionValue(description_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDescriptionValue(description_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(description_item)
  }

  @inline private[thrift] def readDesignValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeDesignField(design_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DesignField)
    writeDesignValue(design_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDesignValue(design_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(design_item)
  }

  @inline private[thrift] def readCardsValue(_iprot: TProtocol): Seq[String] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[String](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readString()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeCardsField(cards_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CardsField)
    writeCardsValue(cards_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCardsValue(cards_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRING, cards_item.size))
    cards_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = cards_item.size
        while (_i < _size) {
          val cards_item_element = cards_item(_i)
          _oprot.writeString(cards_item_element)
          _i += 1
        }
      case _ =>
        cards_item.foreach { cards_item_element =>
          _oprot.writeString(cards_item_element)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readDeckStatusValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeDeckStatusField(deckStatus_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DeckStatusField)
    writeDeckStatusValue(deckStatus_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDeckStatusValue(deckStatus_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(deckStatus_item)
  }

  @inline private[thrift] def readUpdatedTimeValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeUpdatedTimeField(updatedTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UpdatedTimeField)
    writeUpdatedTimeValue(updatedTime_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUpdatedTimeValue(updatedTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(updatedTime_item)
  }

  @inline private[thrift] def readCreatedTimeValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeCreatedTimeField(createdTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CreatedTimeField)
    writeCreatedTimeValue(createdTime_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCreatedTimeValue(createdTime_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(createdTime_item)
  }


  object Immutable extends ThriftStructCodec3[TDeck] {
    override def encode(_item: TDeck, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TDeck = TDeck.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TDeck] = TDeck.metaData
  }

  /**
   * The default read-only implementation of TDeck.  You typically should not need to
   * directly reference this class; instead, use the TDeck.apply method to construct
   * new instances.
   */
  class Immutable(
      val id: String,
      val username: _root_.scala.Option[String],
      val name: _root_.scala.Option[String],
      val thumbnail: _root_.scala.Option[String],
      val description: _root_.scala.Option[String],
      val design: _root_.scala.Option[String],
      val cards: _root_.scala.Option[Seq[String]],
      val deckStatus: _root_.scala.Option[Int],
      val updatedTime: _root_.scala.Option[Long],
      val createdTime: _root_.scala.Option[Long],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TDeck {
    def this(
      id: String,
      username: _root_.scala.Option[String] = _root_.scala.None,
      name: _root_.scala.Option[String] = _root_.scala.None,
      thumbnail: _root_.scala.Option[String] = _root_.scala.None,
      description: _root_.scala.Option[String] = _root_.scala.None,
      design: _root_.scala.Option[String] = _root_.scala.None,
      cards: _root_.scala.Option[Seq[String]] = _root_.scala.None,
      deckStatus: _root_.scala.Option[Int] = _root_.scala.None,
      updatedTime: _root_.scala.Option[Long] = _root_.scala.None,
      createdTime: _root_.scala.Option[Long] = _root_.scala.None
    ) = this(
      id,
      username,
      name,
      thumbnail,
      description,
      design,
      cards,
      deckStatus,
      updatedTime,
      createdTime,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      idOffset: Int,
      usernameOffset: Int,
      nameOffset: Int,
      thumbnailOffset: Int,
      descriptionOffset: Int,
      designOffset: Int,
      val cards: _root_.scala.Option[Seq[String]],
      deckStatusOffset: Int,
      updatedTimeOffset: Int,
      createdTimeOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TDeck {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val id: String =
      if (idOffset == -1)
        null
      else {
        _proto.decodeString(_buf, idOffset)
      }
    lazy val username: _root_.scala.Option[String] =
      if (usernameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, usernameOffset))
      }
    lazy val name: _root_.scala.Option[String] =
      if (nameOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, nameOffset))
      }
    lazy val thumbnail: _root_.scala.Option[String] =
      if (thumbnailOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, thumbnailOffset))
      }
    lazy val description: _root_.scala.Option[String] =
      if (descriptionOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, descriptionOffset))
      }
    lazy val design: _root_.scala.Option[String] =
      if (designOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, designOffset))
      }
    lazy val deckStatus: _root_.scala.Option[Int] =
      if (deckStatusOffset == -1)
        None
      else {
        Some(_proto.decodeI32(_buf, deckStatusOffset))
      }
    lazy val updatedTime: _root_.scala.Option[Long] =
      if (updatedTimeOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, updatedTimeOffset))
      }
    lazy val createdTime: _root_.scala.Option[Long] =
      if (createdTimeOffset == -1)
        None
      else {
        Some(_proto.decodeI64(_buf, createdTimeOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TDeck trait with additional state or
   * behavior and implement the read-only methods from TDeck using an underlying
   * instance.
   */
  trait Proxy extends TDeck {
    protected def _underlying_TDeck: TDeck
    override def id: String = _underlying_TDeck.id
    override def username: _root_.scala.Option[String] = _underlying_TDeck.username
    override def name: _root_.scala.Option[String] = _underlying_TDeck.name
    override def thumbnail: _root_.scala.Option[String] = _underlying_TDeck.thumbnail
    override def description: _root_.scala.Option[String] = _underlying_TDeck.description
    override def design: _root_.scala.Option[String] = _underlying_TDeck.design
    override def cards: _root_.scala.Option[Seq[String]] = _underlying_TDeck.cards
    override def deckStatus: _root_.scala.Option[Int] = _underlying_TDeck.deckStatus
    override def updatedTime: _root_.scala.Option[Long] = _underlying_TDeck.updatedTime
    override def createdTime: _root_.scala.Option[Long] = _underlying_TDeck.createdTime
    override def _passthroughFields = _underlying_TDeck._passthroughFields
  }
}

/**
 * Prefer the companion object's [[xed.api_service.domain.thrift.TDeck.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TDeck
  extends ThriftStruct
  with _root_.scala.Product10[String, Option[String], Option[String], Option[String], Option[String], Option[String], Option[Seq[String]], Option[Int], Option[Long], Option[Long]]
  with ValidatingThriftStruct[TDeck]
  with java.io.Serializable
{
  import TDeck._

  def id: String
  def username: _root_.scala.Option[String]
  def name: _root_.scala.Option[String]
  def thumbnail: _root_.scala.Option[String]
  def description: _root_.scala.Option[String]
  def design: _root_.scala.Option[String]
  def cards: _root_.scala.Option[Seq[String]]
  def deckStatus: _root_.scala.Option[Int]
  def updatedTime: _root_.scala.Option[Long]
  def createdTime: _root_.scala.Option[Long]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = id
  def _2 = username
  def _3 = name
  def _4 = thumbnail
  def _5 = description
  def _6 = design
  def _7 = cards
  def _8 = deckStatus
  def _9 = updatedTime
  def _10 = createdTime

  def toTuple: _root_.scala.Tuple10[String, Option[String], Option[String], Option[String], Option[String], Option[String], Option[Seq[String]], Option[Int], Option[Long], Option[Long]] = {
    (
      id,
      username,
      name,
      thumbnail,
      description,
      design,
      cards,
      deckStatus,
      updatedTime,
      createdTime
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (id ne null) {
                writeIdValue(id, _oprot)
                _root_.scala.Some(TDeck.IdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (username.isDefined) {
                writeUsernameValue(username.get, _oprot)
                _root_.scala.Some(TDeck.UsernameField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (name.isDefined) {
                writeNameValue(name.get, _oprot)
                _root_.scala.Some(TDeck.NameField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (thumbnail.isDefined) {
                writeThumbnailValue(thumbnail.get, _oprot)
                _root_.scala.Some(TDeck.ThumbnailField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (description.isDefined) {
                writeDescriptionValue(description.get, _oprot)
                _root_.scala.Some(TDeck.DescriptionField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (design.isDefined) {
                writeDesignValue(design.get, _oprot)
                _root_.scala.Some(TDeck.DesignField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (cards.isDefined) {
                writeCardsValue(cards.get, _oprot)
                _root_.scala.Some(TDeck.CardsField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (deckStatus.isDefined) {
                writeDeckStatusValue(deckStatus.get, _oprot)
                _root_.scala.Some(TDeck.DeckStatusField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (updatedTime.isDefined) {
                writeUpdatedTimeValue(updatedTime.get, _oprot)
                _root_.scala.Some(TDeck.UpdatedTimeField)
              } else {
                _root_.scala.None
              }
            case 10 =>
              if (createdTime.isDefined) {
                writeCreatedTimeValue(createdTime.get, _oprot)
                _root_.scala.Some(TDeck.CreatedTimeField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TDeck = {
    var id: String = this.id
    var username: _root_.scala.Option[String] = this.username
    var name: _root_.scala.Option[String] = this.name
    var thumbnail: _root_.scala.Option[String] = this.thumbnail
    var description: _root_.scala.Option[String] = this.description
    var design: _root_.scala.Option[String] = this.design
    var cards: _root_.scala.Option[Seq[String]] = this.cards
    var deckStatus: _root_.scala.Option[Int] = this.deckStatus
    var updatedTime: _root_.scala.Option[Long] = this.updatedTime
    var createdTime: _root_.scala.Option[Long] = this.createdTime
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        id = readIdValue(_blob.read)
      case 2 =>
        username = _root_.scala.Some(readUsernameValue(_blob.read))
      case 3 =>
        name = _root_.scala.Some(readNameValue(_blob.read))
      case 4 =>
        thumbnail = _root_.scala.Some(readThumbnailValue(_blob.read))
      case 5 =>
        description = _root_.scala.Some(readDescriptionValue(_blob.read))
      case 6 =>
        design = _root_.scala.Some(readDesignValue(_blob.read))
      case 7 =>
        cards = _root_.scala.Some(readCardsValue(_blob.read))
      case 8 =>
        deckStatus = _root_.scala.Some(readDeckStatusValue(_blob.read))
      case 9 =>
        updatedTime = _root_.scala.Some(readUpdatedTimeValue(_blob.read))
      case 10 =>
        createdTime = _root_.scala.Some(readCreatedTimeValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      id,
      username,
      name,
      thumbnail,
      description,
      design,
      cards,
      deckStatus,
      updatedTime,
      createdTime,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TDeck = {
    var id: String = this.id
    var username: _root_.scala.Option[String] = this.username
    var name: _root_.scala.Option[String] = this.name
    var thumbnail: _root_.scala.Option[String] = this.thumbnail
    var description: _root_.scala.Option[String] = this.description
    var design: _root_.scala.Option[String] = this.design
    var cards: _root_.scala.Option[Seq[String]] = this.cards
    var deckStatus: _root_.scala.Option[Int] = this.deckStatus
    var updatedTime: _root_.scala.Option[Long] = this.updatedTime
    var createdTime: _root_.scala.Option[Long] = this.createdTime

    _fieldId match {
      case 1 =>
        id = null
      case 2 =>
        username = _root_.scala.None
      case 3 =>
        name = _root_.scala.None
      case 4 =>
        thumbnail = _root_.scala.None
      case 5 =>
        description = _root_.scala.None
      case 6 =>
        design = _root_.scala.None
      case 7 =>
        cards = _root_.scala.None
      case 8 =>
        deckStatus = _root_.scala.None
      case 9 =>
        updatedTime = _root_.scala.None
      case 10 =>
        createdTime = _root_.scala.None
      case _ =>
    }
    new Immutable(
      id,
      username,
      name,
      thumbnail,
      description,
      design,
      cards,
      deckStatus,
      updatedTime,
      createdTime,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetId: TDeck = unsetField(1)

  def unsetUsername: TDeck = unsetField(2)

  def unsetName: TDeck = unsetField(3)

  def unsetThumbnail: TDeck = unsetField(4)

  def unsetDescription: TDeck = unsetField(5)

  def unsetDesign: TDeck = unsetField(6)

  def unsetCards: TDeck = unsetField(7)

  def unsetDeckStatus: TDeck = unsetField(8)

  def unsetUpdatedTime: TDeck = unsetField(9)

  def unsetCreatedTime: TDeck = unsetField(10)


  override def write(_oprot: TProtocol): Unit = {
    TDeck.validate(this)
    _oprot.writeStructBegin(Struct)
    if (id ne null) writeIdField(id, _oprot)
    if (username.isDefined) writeUsernameField(username.get, _oprot)
    if (name.isDefined) writeNameField(name.get, _oprot)
    if (thumbnail.isDefined) writeThumbnailField(thumbnail.get, _oprot)
    if (description.isDefined) writeDescriptionField(description.get, _oprot)
    if (design.isDefined) writeDesignField(design.get, _oprot)
    if (cards.isDefined) writeCardsField(cards.get, _oprot)
    if (deckStatus.isDefined) writeDeckStatusField(deckStatus.get, _oprot)
    if (updatedTime.isDefined) writeUpdatedTimeField(updatedTime.get, _oprot)
    if (createdTime.isDefined) writeCreatedTimeField(createdTime.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    id: String = this.id,
    username: _root_.scala.Option[String] = this.username,
    name: _root_.scala.Option[String] = this.name,
    thumbnail: _root_.scala.Option[String] = this.thumbnail,
    description: _root_.scala.Option[String] = this.description,
    design: _root_.scala.Option[String] = this.design,
    cards: _root_.scala.Option[Seq[String]] = this.cards,
    deckStatus: _root_.scala.Option[Int] = this.deckStatus,
    updatedTime: _root_.scala.Option[Long] = this.updatedTime,
    createdTime: _root_.scala.Option[Long] = this.createdTime,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TDeck =
    new Immutable(
      id,
      username,
      name,
      thumbnail,
      description,
      design,
      cards,
      deckStatus,
      updatedTime,
      createdTime,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TDeck]

  private def _equals(x: TDeck, y: TDeck): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TDeck]) &&
      _passthroughFields == other.asInstanceOf[TDeck]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 10

  override def productElement(n: Int): Any = n match {
    case 0 => this.id
    case 1 => this.username
    case 2 => this.name
    case 3 => this.thumbnail
    case 4 => this.description
    case 5 => this.design
    case 6 => this.cards
    case 7 => this.deckStatus
    case 8 => this.updatedTime
    case 9 => this.createdTime
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TDeck"

  def _codec: ValidatingThriftStructCodec3[TDeck] = TDeck
}

