/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.caas.domain.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TResult extends ValidatingThriftStructCodec3[TResult] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TResult")
  val CodeField = new TField("code", TType.I32, 1)
  val CodeFieldManifest = implicitly[Manifest[Int]]
  val MsgField = new TField("msg", TType.STRING, 2)
  val MsgFieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      CodeField,
      false,
      true,
      CodeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      MsgField,
      true,
      false,
      MsgFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TResult): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TResult): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.code)
    buf ++= validateField(item.msg)
    buf.toList
  }

  def withoutPassthroughFields(original: TResult): TResult =
    new Immutable(
      code =
        {
          val field = original.code
          field
        },
      msg =
        {
          val field = original.msg
          field.map { field =>
            field
          }
        }
    )

  override def encode(_item: TResult, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TResult = {

    var code: Int = 0
    var _got_code = false
    var msgOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                code = readCodeValue(_iprot)
                _got_code = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                msgOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'msg' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_code) throw new TProtocolException("Required field 'code' was not found in serialized data for struct TResult")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      code,
      msgOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TResult =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TResult = {
    var code: Int = 0
    var _got_code = false
    var msg: _root_.scala.Option[String] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                code = readCodeValue(_iprot)
                _got_code = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                msg = _root_.scala.Some(readMsgValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'msg' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_code) throw new TProtocolException("Required field 'code' was not found in serialized data for struct TResult")
    new Immutable(
      code,
      msg,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    code: Int,
    msg: _root_.scala.Option[String] = _root_.scala.None
  ): TResult =
    new Immutable(
      code,
      msg
    )

  def unapply(_item: TResult): _root_.scala.Option[_root_.scala.Tuple2[Int, Option[String]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readCodeValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeCodeField(code_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CodeField)
    writeCodeValue(code_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCodeValue(code_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(code_item)
  }

  @inline private[thrift] def readMsgValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeMsgField(msg_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MsgField)
    writeMsgValue(msg_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMsgValue(msg_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(msg_item)
  }


  object Immutable extends ThriftStructCodec3[TResult] {
    override def encode(_item: TResult, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TResult = TResult.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TResult] = TResult.metaData
  }

  /**
   * The default read-only implementation of TResult.  You typically should not need to
   * directly reference this class; instead, use the TResult.apply method to construct
   * new instances.
   */
  class Immutable(
      val code: Int,
      val msg: _root_.scala.Option[String],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TResult {
    def this(
      code: Int,
      msg: _root_.scala.Option[String] = _root_.scala.None
    ) = this(
      code,
      msg,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val code: Int,
      msgOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TResult {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val msg: _root_.scala.Option[String] =
      if (msgOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, msgOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TResult trait with additional state or
   * behavior and implement the read-only methods from TResult using an underlying
   * instance.
   */
  trait Proxy extends TResult {
    protected def _underlying_TResult: TResult
    override def code: Int = _underlying_TResult.code
    override def msg: _root_.scala.Option[String] = _underlying_TResult.msg
    override def _passthroughFields = _underlying_TResult._passthroughFields
  }
}

/**
 * Prefer the companion object's [[xed.caas.domain.thrift.TResult.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TResult
  extends ThriftStruct
  with _root_.scala.Product2[Int, Option[String]]
  with ValidatingThriftStruct[TResult]
  with java.io.Serializable
{
  import TResult._

  def code: Int
  def msg: _root_.scala.Option[String]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = code
  def _2 = msg

  def toTuple: _root_.scala.Tuple2[Int, Option[String]] = {
    (
      code,
      msg
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeCodeValue(code, _oprot)
                _root_.scala.Some(TResult.CodeField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (msg.isDefined) {
                writeMsgValue(msg.get, _oprot)
                _root_.scala.Some(TResult.MsgField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TResult = {
    var code: Int = this.code
    var msg: _root_.scala.Option[String] = this.msg
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        code = readCodeValue(_blob.read)
      case 2 =>
        msg = _root_.scala.Some(readMsgValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      code,
      msg,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TResult = {
    var code: Int = this.code
    var msg: _root_.scala.Option[String] = this.msg

    _fieldId match {
      case 1 =>
        code = 0
      case 2 =>
        msg = _root_.scala.None
      case _ =>
    }
    new Immutable(
      code,
      msg,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetCode: TResult = unsetField(1)

  def unsetMsg: TResult = unsetField(2)


  override def write(_oprot: TProtocol): Unit = {
    TResult.validate(this)
    _oprot.writeStructBegin(Struct)
    writeCodeField(code, _oprot)
    if (msg.isDefined) writeMsgField(msg.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    code: Int = this.code,
    msg: _root_.scala.Option[String] = this.msg,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TResult =
    new Immutable(
      code,
      msg,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TResult]

  private def _equals(x: TResult, y: TResult): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TResult]) &&
      _passthroughFields == other.asInstanceOf[TResult]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => this.code
    case 1 => this.msg
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TResult"

  def _codec: ValidatingThriftStructCodec3[TResult] = TResult
}

