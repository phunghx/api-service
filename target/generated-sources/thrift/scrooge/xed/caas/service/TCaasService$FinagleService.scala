/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.caas.service

import com.twitter.finagle.{
  service => ctfs,
  Filter => finagle$Filter,
  Service => finagle$Service,
  thrift => _,
  _
}
import com.twitter.finagle.stats.{Counter, NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.RichServerParam
import com.twitter.io.Buf
import com.twitter.scrooge._
import com.twitter.util.{Future, Return, Throw, Throwables}
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryInputTransport
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, HashMap => mutable$HashMap}
import scala.collection.{Map, Set}

import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class TCaasService$FinagleService(
  iface: TCaasService[Future],
  serverParam: RichServerParam
) extends com.twitter.finagle.Service[Array[Byte], Array[Byte]] {
  import TCaasService._

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: TCaasService[Future],
    protocolFactory: TProtocolFactory,
    stats: StatsReceiver = NullStatsReceiver,
    maxThriftBufferSize: Int = Thrift.param.maxThriftBufferSize,
    serviceName: String = "TCaasService"
  ) = this(iface, RichServerParam(protocolFactory, serviceName, maxThriftBufferSize, stats))

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: TCaasService[Future],
    protocolFactory: TProtocolFactory,
    stats: StatsReceiver,
    maxThriftBufferSize: Int
  ) = this(iface, protocolFactory, stats, maxThriftBufferSize, "TCaasService")

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: TCaasService[Future],
    protocolFactory: TProtocolFactory
  ) = this(iface, protocolFactory, NullStatsReceiver, Thrift.param.maxThriftBufferSize)

  def serviceName: String = serverParam.serviceName
  private[this] def responseClassifier: ctfs.ResponseClassifier = serverParam.responseClassifier
  private[this] def stats: StatsReceiver = serverParam.serverStats

  private[this] def protocolFactory: TProtocolFactory = serverParam.restrictedProtocolFactory
  private[this] def maxReusableBufferSize: Int = serverParam.maxThriftBufferSize

  private[this] val tlReusableBuffer = TReusableBuffer(maxThriftBufferSize = maxReusableBufferSize)

  protected val serviceMap = new mutable$HashMap[String, finagle$Service[(TProtocol, Int), Array[Byte]]]()

  protected def addService(name: String, service: finagle$Service[(TProtocol, Int), Array[Byte]]): Unit = {
    serviceMap(name) = service
  }

  final protected def exception(name: String, seqid: Int, code: Int, message: String): Buf = {
    val x = new TApplicationException(code, message)
    val memoryBuffer = tlReusableBuffer.get()
    try {
      val oprot = protocolFactory.getProtocol(memoryBuffer)

      oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid))
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.getTransport().flush()

      // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
      Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
    } finally {
      tlReusableBuffer.reset()
    }
  }

  final protected def reply(name: String, seqid: Int, result: ThriftStruct): Buf = {
    val memoryBuffer = tlReusableBuffer.get()
    try {
      val oprot = protocolFactory.getProtocol(memoryBuffer)

      oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid))
      result.write(oprot)
      oprot.writeMessageEnd()
      oprot.getTransport().flush()

      // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
      Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
    } finally {
      tlReusableBuffer.reset()
    }
  }

  final def apply(request: Array[Byte]): Future[Array[Byte]] = {
    val inputTransport = new TMemoryInputTransport(request)
    val iprot = protocolFactory.getProtocol(inputTransport)

    try {
      val msg = iprot.readMessageBegin()
      val service = serviceMap.get(msg.name)
      service match {
        case _root_.scala.Some(svc) =>
          svc(iprot, msg.seqid)
        case _ =>
          TProtocolUtil.skip(iprot, TType.STRUCT)
          Future.value(Buf.ByteArray.Owned.extract(
            exception(msg.name, msg.seqid, TApplicationException.UNKNOWN_METHOD,
              "Invalid method name: '" + msg.name + "'")))
      }
    } catch {
      case e: Exception => Future.exception(e)
    }
  }

  private object ThriftMethodStats {
    def apply(stats: StatsReceiver): ThriftMethodStats =
      ThriftMethodStats(
        stats.counter("requests"),
        stats.counter("success"),
        stats.counter("failures"),
        stats.scope("failures")
      )
  }

  private case class ThriftMethodStats(
    requestsCounter: Counter,
    successCounter: Counter,
    failuresCounter: Counter,
    failuresScope: StatsReceiver
  )

  private def missingResult(name: String): TApplicationException = {
    new TApplicationException(
      TApplicationException.MISSING_RESULT,
      name + " failed: unknown result"
    )
  }

  private def setServiceName(ex: Throwable): Throwable =
    if (this.serviceName == "") ex
    else {
      ex match {
        case se: SourcedException =>
          se.serviceName = this.serviceName
          se
        case _ => ex
      }
    }

  private def recordResponse(reqRep: ctfs.ReqRep, methodStats: ThriftMethodStats): Unit = {
    val responseClass = responseClassifier.applyOrElse(reqRep, ctfs.ResponseClassifier.Default)
    responseClass match {
      case ctfs.ResponseClass.Successful(_) =>
        methodStats.successCounter.incr()
      case ctfs.ResponseClass.Failed(_) =>
        methodStats.failuresCounter.incr()
        reqRep.response match {
          case Throw(ex) =>
            methodStats.failuresScope.counter(Throwables.mkString(ex): _*).incr()
          case _ =>
        }
    }
  }

  final protected def perMethodStatsFilter(
    method: ThriftMethod
  ): finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] = {
    val methodStats = ThriftMethodStats((if (serviceName != "") stats.scope(serviceName) else stats).scope(method.name))
    new finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] {
      def apply(
        req: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[method.Args, method.Result]]
      ): Future[Array[Byte]] = {
        methodStats.requestsCounter.incr()
        service(req).transform {
          case Return(value) =>
            value match {
              case SuccessfulResponse(req, _, result) =>
                recordResponse(ctfs.ReqRep(req, _root_.com.twitter.util.Return(result.successField.get)), methodStats)
              case ProtocolExceptionResponse(req, _, exp) =>
                recordResponse(ctfs.ReqRep(req, _root_.com.twitter.util.Throw(exp)), methodStats)
              case ThriftExceptionResponse(req, _, ex) =>
                val rep = ex match {
                  case exp: ThriftException => setServiceName(exp)
                  case _ => missingResult(serviceName)
                }
                recordResponse(ctfs.ReqRep(req, _root_.com.twitter.util.Throw(rep)), methodStats)
            }
            Future.value(Buf.ByteArray.Owned.extract(value.response))
          case t @ Throw(_) =>
            recordResponse(ctfs.ReqRep(req, t), methodStats)
            Future.const(t.cast[Array[Byte]])
        }
      }
    }
  }
  // ---- end boilerplate.

  addService("ping", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[Ping.Args, Ping.Result]] = perMethodStatsFilter(Ping)
  
    val methodService = new finagle$Service[Ping.Args, Ping.SuccessType] {
      def apply(args: Ping.Args): Future[Ping.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("ping")
        }
        iface.ping()
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[Ping.Args, Ping.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[Ping.Args, Ping.Result]]
      ): Future[RichResponse[Ping.Args, Ping.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("ping", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[Ping.Args, Ping.Result], Ping.Args, Ping.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[Ping.Args, Ping.SuccessType]
      ): Future[RichResponse[Ping.Args, Ping.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = Ping.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = Ping.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("ping", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[Ping.Args, Ping.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("renewSession", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[RenewSession.Args, RenewSession.Result]] = perMethodStatsFilter(RenewSession)
  
    val methodService = new finagle$Service[RenewSession.Args, RenewSession.SuccessType] {
      def apply(args: RenewSession.Args): Future[RenewSession.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("renewSession")
        }
        iface.renewSession(args.oldSessionId, args.sessionTimeout)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[RenewSession.Args, RenewSession.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[RenewSession.Args, RenewSession.Result]]
      ): Future[RichResponse[RenewSession.Args, RenewSession.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("renewSession", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[RenewSession.Args, RenewSession.Result], RenewSession.Args, RenewSession.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[RenewSession.Args, RenewSession.SuccessType]
      ): Future[RichResponse[RenewSession.Args, RenewSession.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = RenewSession.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = RenewSession.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("renewSession", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[RenewSession.Args, RenewSession.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("login", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[Login.Args, Login.Result]] = perMethodStatsFilter(Login)
  
    val methodService = new finagle$Service[Login.Args, Login.SuccessType] {
      def apply(args: Login.Args): Future[Login.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("login")
        }
        iface.login(args.username, args.password, args.sessionTimeout)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[Login.Args, Login.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[Login.Args, Login.Result]]
      ): Future[RichResponse[Login.Args, Login.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("login", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[Login.Args, Login.Result], Login.Args, Login.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[Login.Args, Login.SuccessType]
      ): Future[RichResponse[Login.Args, Login.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = Login.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = Login.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("login", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[Login.Args, Login.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("loginOAuth", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[LoginOAuth.Args, LoginOAuth.Result]] = perMethodStatsFilter(LoginOAuth)
  
    val methodService = new finagle$Service[LoginOAuth.Args, LoginOAuth.SuccessType] {
      def apply(args: LoginOAuth.Args): Future[LoginOAuth.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("loginOAuth")
        }
        iface.loginOAuth(args.username, args.sessionTimeout)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[LoginOAuth.Args, LoginOAuth.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[LoginOAuth.Args, LoginOAuth.Result]]
      ): Future[RichResponse[LoginOAuth.Args, LoginOAuth.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("loginOAuth", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[LoginOAuth.Args, LoginOAuth.Result], LoginOAuth.Args, LoginOAuth.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[LoginOAuth.Args, LoginOAuth.SuccessType]
      ): Future[RichResponse[LoginOAuth.Args, LoginOAuth.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = LoginOAuth.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = LoginOAuth.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("loginOAuth", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[LoginOAuth.Args, LoginOAuth.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("loginWithOAuth", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[LoginWithOAuth.Args, LoginWithOAuth.Result]] = perMethodStatsFilter(LoginWithOAuth)
  
    val methodService = new finagle$Service[LoginWithOAuth.Args, LoginWithOAuth.SuccessType] {
      def apply(args: LoginWithOAuth.Args): Future[LoginWithOAuth.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("loginWithOAuth")
        }
        iface.loginWithOAuth(args.oauthType, args.id, args.token, args.sessionTimeout, args.password)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[LoginWithOAuth.Args, LoginWithOAuth.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[LoginWithOAuth.Args, LoginWithOAuth.Result]]
      ): Future[RichResponse[LoginWithOAuth.Args, LoginWithOAuth.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("loginWithOAuth", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[LoginWithOAuth.Args, LoginWithOAuth.Result], LoginWithOAuth.Args, LoginWithOAuth.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[LoginWithOAuth.Args, LoginWithOAuth.SuccessType]
      ): Future[RichResponse[LoginWithOAuth.Args, LoginWithOAuth.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = LoginWithOAuth.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = LoginWithOAuth.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("loginWithOAuth", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[LoginWithOAuth.Args, LoginWithOAuth.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("register", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[Register.Args, Register.Result]] = perMethodStatsFilter(Register)
  
    val methodService = new finagle$Service[Register.Args, Register.SuccessType] {
      def apply(args: Register.Args): Future[Register.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("register")
        }
        iface.register(args.username, args.password)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[Register.Args, Register.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[Register.Args, Register.Result]]
      ): Future[RichResponse[Register.Args, Register.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("register", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[Register.Args, Register.Result], Register.Args, Register.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[Register.Args, Register.SuccessType]
      ): Future[RichResponse[Register.Args, Register.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = Register.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = Register.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("register", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[Register.Args, Register.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("isCredentialDefault", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[IsCredentialDefault.Args, IsCredentialDefault.Result]] = perMethodStatsFilter(IsCredentialDefault)
  
    val methodService = new finagle$Service[IsCredentialDefault.Args, IsCredentialDefault.SuccessType] {
      def apply(args: IsCredentialDefault.Args): Future[IsCredentialDefault.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("isCredentialDefault")
        }
        iface.isCredentialDefault(args.oauthType, args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[IsCredentialDefault.Args, IsCredentialDefault.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[IsCredentialDefault.Args, IsCredentialDefault.Result]]
      ): Future[RichResponse[IsCredentialDefault.Args, IsCredentialDefault.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("isCredentialDefault", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[IsCredentialDefault.Args, IsCredentialDefault.Result], IsCredentialDefault.Args, IsCredentialDefault.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[IsCredentialDefault.Args, IsCredentialDefault.SuccessType]
      ): Future[RichResponse[IsCredentialDefault.Args, IsCredentialDefault.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = IsCredentialDefault.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = IsCredentialDefault.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("isCredentialDefault", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[IsCredentialDefault.Args, IsCredentialDefault.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("deleteUser", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[DeleteUser.Args, DeleteUser.Result]] = perMethodStatsFilter(DeleteUser)
  
    val methodService = new finagle$Service[DeleteUser.Args, DeleteUser.SuccessType] {
      def apply(args: DeleteUser.Args): Future[DeleteUser.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("deleteUser")
        }
        iface.deleteUser(args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[DeleteUser.Args, DeleteUser.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[DeleteUser.Args, DeleteUser.Result]]
      ): Future[RichResponse[DeleteUser.Args, DeleteUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("deleteUser", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[DeleteUser.Args, DeleteUser.Result], DeleteUser.Args, DeleteUser.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[DeleteUser.Args, DeleteUser.SuccessType]
      ): Future[RichResponse[DeleteUser.Args, DeleteUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = DeleteUser.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = DeleteUser.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("deleteUser", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[DeleteUser.Args, DeleteUser.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("registerWithOAuth", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[RegisterWithOAuth.Args, RegisterWithOAuth.Result]] = perMethodStatsFilter(RegisterWithOAuth)
  
    val methodService = new finagle$Service[RegisterWithOAuth.Args, RegisterWithOAuth.SuccessType] {
      def apply(args: RegisterWithOAuth.Args): Future[RegisterWithOAuth.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("registerWithOAuth")
        }
        iface.registerWithOAuth(args.oauthType, args.id, args.token, args.password)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[RegisterWithOAuth.Args, RegisterWithOAuth.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[RegisterWithOAuth.Args, RegisterWithOAuth.Result]]
      ): Future[RichResponse[RegisterWithOAuth.Args, RegisterWithOAuth.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("registerWithOAuth", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[RegisterWithOAuth.Args, RegisterWithOAuth.Result], RegisterWithOAuth.Args, RegisterWithOAuth.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[RegisterWithOAuth.Args, RegisterWithOAuth.SuccessType]
      ): Future[RichResponse[RegisterWithOAuth.Args, RegisterWithOAuth.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = RegisterWithOAuth.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = RegisterWithOAuth.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("registerWithOAuth", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[RegisterWithOAuth.Args, RegisterWithOAuth.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getUserWithSessionId", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetUserWithSessionId.Args, GetUserWithSessionId.Result]] = perMethodStatsFilter(GetUserWithSessionId)
  
    val methodService = new finagle$Service[GetUserWithSessionId.Args, GetUserWithSessionId.SuccessType] {
      def apply(args: GetUserWithSessionId.Args): Future[GetUserWithSessionId.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getUserWithSessionId")
        }
        iface.getUserWithSessionId(args.sessionId)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetUserWithSessionId.Args, GetUserWithSessionId.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetUserWithSessionId.Args, GetUserWithSessionId.Result]]
      ): Future[RichResponse[GetUserWithSessionId.Args, GetUserWithSessionId.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getUserWithSessionId", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetUserWithSessionId.Args, GetUserWithSessionId.Result], GetUserWithSessionId.Args, GetUserWithSessionId.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetUserWithSessionId.Args, GetUserWithSessionId.SuccessType]
      ): Future[RichResponse[GetUserWithSessionId.Args, GetUserWithSessionId.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetUserWithSessionId.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetUserWithSessionId.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getUserWithSessionId", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetUserWithSessionId.Args, GetUserWithSessionId.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getUserWithUsername", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetUserWithUsername.Args, GetUserWithUsername.Result]] = perMethodStatsFilter(GetUserWithUsername)
  
    val methodService = new finagle$Service[GetUserWithUsername.Args, GetUserWithUsername.SuccessType] {
      def apply(args: GetUserWithUsername.Args): Future[GetUserWithUsername.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getUserWithUsername")
        }
        iface.getUserWithUsername(args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetUserWithUsername.Args, GetUserWithUsername.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetUserWithUsername.Args, GetUserWithUsername.Result]]
      ): Future[RichResponse[GetUserWithUsername.Args, GetUserWithUsername.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getUserWithUsername", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetUserWithUsername.Args, GetUserWithUsername.Result], GetUserWithUsername.Args, GetUserWithUsername.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetUserWithUsername.Args, GetUserWithUsername.SuccessType]
      ): Future[RichResponse[GetUserWithUsername.Args, GetUserWithUsername.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetUserWithUsername.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetUserWithUsername.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getUserWithUsername", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetUserWithUsername.Args, GetUserWithUsername.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("logout", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[Logout.Args, Logout.Result]] = perMethodStatsFilter(Logout)
  
    val methodService = new finagle$Service[Logout.Args, Logout.SuccessType] {
      def apply(args: Logout.Args): Future[Logout.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("logout")
        }
        iface.logout(args.sessionId)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[Logout.Args, Logout.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[Logout.Args, Logout.Result]]
      ): Future[RichResponse[Logout.Args, Logout.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("logout", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[Logout.Args, Logout.Result], Logout.Args, Logout.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[Logout.Args, Logout.SuccessType]
      ): Future[RichResponse[Logout.Args, Logout.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = Logout.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = Logout.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("logout", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[Logout.Args, Logout.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("isPermitted", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[IsPermitted.Args, IsPermitted.Result]] = perMethodStatsFilter(IsPermitted)
  
    val methodService = new finagle$Service[IsPermitted.Args, IsPermitted.SuccessType] {
      def apply(args: IsPermitted.Args): Future[IsPermitted.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("isPermitted")
        }
        iface.isPermitted(args.sessionId, args.permission)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[IsPermitted.Args, IsPermitted.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[IsPermitted.Args, IsPermitted.Result]]
      ): Future[RichResponse[IsPermitted.Args, IsPermitted.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("isPermitted", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[IsPermitted.Args, IsPermitted.Result], IsPermitted.Args, IsPermitted.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[IsPermitted.Args, IsPermitted.SuccessType]
      ): Future[RichResponse[IsPermitted.Args, IsPermitted.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = IsPermitted.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = IsPermitted.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("isPermitted", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[IsPermitted.Args, IsPermitted.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("isPermitteds", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[IsPermitteds.Args, IsPermitteds.Result]] = perMethodStatsFilter(IsPermitteds)
  
    val methodService = new finagle$Service[IsPermitteds.Args, IsPermitteds.SuccessType] {
      def apply(args: IsPermitteds.Args): Future[IsPermitteds.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("isPermitteds")
        }
        iface.isPermitteds(args.sessionId, args.permissions)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[IsPermitteds.Args, IsPermitteds.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[IsPermitteds.Args, IsPermitteds.Result]]
      ): Future[RichResponse[IsPermitteds.Args, IsPermitteds.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("isPermitteds", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[IsPermitteds.Args, IsPermitteds.Result], IsPermitteds.Args, IsPermitteds.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[IsPermitteds.Args, IsPermitteds.SuccessType]
      ): Future[RichResponse[IsPermitteds.Args, IsPermitteds.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = IsPermitteds.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = IsPermitteds.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("isPermitteds", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[IsPermitteds.Args, IsPermitteds.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("isPermittedAll", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[IsPermittedAll.Args, IsPermittedAll.Result]] = perMethodStatsFilter(IsPermittedAll)
  
    val methodService = new finagle$Service[IsPermittedAll.Args, IsPermittedAll.SuccessType] {
      def apply(args: IsPermittedAll.Args): Future[IsPermittedAll.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("isPermittedAll")
        }
        iface.isPermittedAll(args.sessionId, args.permissions)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[IsPermittedAll.Args, IsPermittedAll.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[IsPermittedAll.Args, IsPermittedAll.Result]]
      ): Future[RichResponse[IsPermittedAll.Args, IsPermittedAll.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("isPermittedAll", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[IsPermittedAll.Args, IsPermittedAll.Result], IsPermittedAll.Args, IsPermittedAll.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[IsPermittedAll.Args, IsPermittedAll.SuccessType]
      ): Future[RichResponse[IsPermittedAll.Args, IsPermittedAll.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = IsPermittedAll.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = IsPermittedAll.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("isPermittedAll", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[IsPermittedAll.Args, IsPermittedAll.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("isPermittedUser", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[IsPermittedUser.Args, IsPermittedUser.Result]] = perMethodStatsFilter(IsPermittedUser)
  
    val methodService = new finagle$Service[IsPermittedUser.Args, IsPermittedUser.SuccessType] {
      def apply(args: IsPermittedUser.Args): Future[IsPermittedUser.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("isPermittedUser")
        }
        iface.isPermittedUser(args.username, args.permission)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[IsPermittedUser.Args, IsPermittedUser.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[IsPermittedUser.Args, IsPermittedUser.Result]]
      ): Future[RichResponse[IsPermittedUser.Args, IsPermittedUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("isPermittedUser", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[IsPermittedUser.Args, IsPermittedUser.Result], IsPermittedUser.Args, IsPermittedUser.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[IsPermittedUser.Args, IsPermittedUser.SuccessType]
      ): Future[RichResponse[IsPermittedUser.Args, IsPermittedUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = IsPermittedUser.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = IsPermittedUser.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("isPermittedUser", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[IsPermittedUser.Args, IsPermittedUser.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("isPermittedsUser", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[IsPermittedsUser.Args, IsPermittedsUser.Result]] = perMethodStatsFilter(IsPermittedsUser)
  
    val methodService = new finagle$Service[IsPermittedsUser.Args, IsPermittedsUser.SuccessType] {
      def apply(args: IsPermittedsUser.Args): Future[IsPermittedsUser.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("isPermittedsUser")
        }
        iface.isPermittedsUser(args.username, args.permissions)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[IsPermittedsUser.Args, IsPermittedsUser.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[IsPermittedsUser.Args, IsPermittedsUser.Result]]
      ): Future[RichResponse[IsPermittedsUser.Args, IsPermittedsUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("isPermittedsUser", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[IsPermittedsUser.Args, IsPermittedsUser.Result], IsPermittedsUser.Args, IsPermittedsUser.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[IsPermittedsUser.Args, IsPermittedsUser.SuccessType]
      ): Future[RichResponse[IsPermittedsUser.Args, IsPermittedsUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = IsPermittedsUser.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = IsPermittedsUser.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("isPermittedsUser", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[IsPermittedsUser.Args, IsPermittedsUser.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("isPermittedUserAll", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[IsPermittedUserAll.Args, IsPermittedUserAll.Result]] = perMethodStatsFilter(IsPermittedUserAll)
  
    val methodService = new finagle$Service[IsPermittedUserAll.Args, IsPermittedUserAll.SuccessType] {
      def apply(args: IsPermittedUserAll.Args): Future[IsPermittedUserAll.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("isPermittedUserAll")
        }
        iface.isPermittedUserAll(args.username, args.permissions)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[IsPermittedUserAll.Args, IsPermittedUserAll.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[IsPermittedUserAll.Args, IsPermittedUserAll.Result]]
      ): Future[RichResponse[IsPermittedUserAll.Args, IsPermittedUserAll.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("isPermittedUserAll", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[IsPermittedUserAll.Args, IsPermittedUserAll.Result], IsPermittedUserAll.Args, IsPermittedUserAll.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[IsPermittedUserAll.Args, IsPermittedUserAll.SuccessType]
      ): Future[RichResponse[IsPermittedUserAll.Args, IsPermittedUserAll.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = IsPermittedUserAll.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = IsPermittedUserAll.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("isPermittedUserAll", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[IsPermittedUserAll.Args, IsPermittedUserAll.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getUserRoles", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetUserRoles.Args, GetUserRoles.Result]] = perMethodStatsFilter(GetUserRoles)
  
    val methodService = new finagle$Service[GetUserRoles.Args, GetUserRoles.SuccessType] {
      def apply(args: GetUserRoles.Args): Future[GetUserRoles.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getUserRoles")
        }
        iface.getUserRoles(args.sessionId)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetUserRoles.Args, GetUserRoles.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetUserRoles.Args, GetUserRoles.Result]]
      ): Future[RichResponse[GetUserRoles.Args, GetUserRoles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getUserRoles", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetUserRoles.Args, GetUserRoles.Result], GetUserRoles.Args, GetUserRoles.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetUserRoles.Args, GetUserRoles.SuccessType]
      ): Future[RichResponse[GetUserRoles.Args, GetUserRoles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetUserRoles.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetUserRoles.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getUserRoles", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetUserRoles.Args, GetUserRoles.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("hasRole", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[HasRole.Args, HasRole.Result]] = perMethodStatsFilter(HasRole)
  
    val methodService = new finagle$Service[HasRole.Args, HasRole.SuccessType] {
      def apply(args: HasRole.Args): Future[HasRole.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("hasRole")
        }
        iface.hasRole(args.sessionId, args.role)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[HasRole.Args, HasRole.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[HasRole.Args, HasRole.Result]]
      ): Future[RichResponse[HasRole.Args, HasRole.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("hasRole", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[HasRole.Args, HasRole.Result], HasRole.Args, HasRole.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[HasRole.Args, HasRole.SuccessType]
      ): Future[RichResponse[HasRole.Args, HasRole.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = HasRole.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = HasRole.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("hasRole", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[HasRole.Args, HasRole.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("hasRoles", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[HasRoles.Args, HasRoles.Result]] = perMethodStatsFilter(HasRoles)
  
    val methodService = new finagle$Service[HasRoles.Args, HasRoles.SuccessType] {
      def apply(args: HasRoles.Args): Future[HasRoles.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("hasRoles")
        }
        iface.hasRoles(args.sessionId, args.roles)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[HasRoles.Args, HasRoles.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[HasRoles.Args, HasRoles.Result]]
      ): Future[RichResponse[HasRoles.Args, HasRoles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("hasRoles", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[HasRoles.Args, HasRoles.Result], HasRoles.Args, HasRoles.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[HasRoles.Args, HasRoles.SuccessType]
      ): Future[RichResponse[HasRoles.Args, HasRoles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = HasRoles.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = HasRoles.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("hasRoles", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[HasRoles.Args, HasRoles.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("hasRoleUser", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[HasRoleUser.Args, HasRoleUser.Result]] = perMethodStatsFilter(HasRoleUser)
  
    val methodService = new finagle$Service[HasRoleUser.Args, HasRoleUser.SuccessType] {
      def apply(args: HasRoleUser.Args): Future[HasRoleUser.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("hasRoleUser")
        }
        iface.hasRoleUser(args.username, args.roleName)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[HasRoleUser.Args, HasRoleUser.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[HasRoleUser.Args, HasRoleUser.Result]]
      ): Future[RichResponse[HasRoleUser.Args, HasRoleUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("hasRoleUser", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[HasRoleUser.Args, HasRoleUser.Result], HasRoleUser.Args, HasRoleUser.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[HasRoleUser.Args, HasRoleUser.SuccessType]
      ): Future[RichResponse[HasRoleUser.Args, HasRoleUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = HasRoleUser.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = HasRoleUser.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("hasRoleUser", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[HasRoleUser.Args, HasRoleUser.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("hasAllRoleUser", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[HasAllRoleUser.Args, HasAllRoleUser.Result]] = perMethodStatsFilter(HasAllRoleUser)
  
    val methodService = new finagle$Service[HasAllRoleUser.Args, HasAllRoleUser.SuccessType] {
      def apply(args: HasAllRoleUser.Args): Future[HasAllRoleUser.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("hasAllRoleUser")
        }
        iface.hasAllRoleUser(args.username, args.roleNames)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[HasAllRoleUser.Args, HasAllRoleUser.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[HasAllRoleUser.Args, HasAllRoleUser.Result]]
      ): Future[RichResponse[HasAllRoleUser.Args, HasAllRoleUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("hasAllRoleUser", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[HasAllRoleUser.Args, HasAllRoleUser.Result], HasAllRoleUser.Args, HasAllRoleUser.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[HasAllRoleUser.Args, HasAllRoleUser.SuccessType]
      ): Future[RichResponse[HasAllRoleUser.Args, HasAllRoleUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = HasAllRoleUser.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = HasAllRoleUser.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("hasAllRoleUser", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[HasAllRoleUser.Args, HasAllRoleUser.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getAllUsername", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetAllUsername.Args, GetAllUsername.Result]] = perMethodStatsFilter(GetAllUsername)
  
    val methodService = new finagle$Service[GetAllUsername.Args, GetAllUsername.SuccessType] {
      def apply(args: GetAllUsername.Args): Future[GetAllUsername.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getAllUsername")
        }
        iface.getAllUsername()
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetAllUsername.Args, GetAllUsername.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetAllUsername.Args, GetAllUsername.Result]]
      ): Future[RichResponse[GetAllUsername.Args, GetAllUsername.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getAllUsername", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetAllUsername.Args, GetAllUsername.Result], GetAllUsername.Args, GetAllUsername.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetAllUsername.Args, GetAllUsername.SuccessType]
      ): Future[RichResponse[GetAllUsername.Args, GetAllUsername.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetAllUsername.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetAllUsername.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getAllUsername", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetAllUsername.Args, GetAllUsername.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getActiveUsername", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetActiveUsername.Args, GetActiveUsername.Result]] = perMethodStatsFilter(GetActiveUsername)
  
    val methodService = new finagle$Service[GetActiveUsername.Args, GetActiveUsername.SuccessType] {
      def apply(args: GetActiveUsername.Args): Future[GetActiveUsername.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getActiveUsername")
        }
        iface.getActiveUsername(args.from, args.size)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetActiveUsername.Args, GetActiveUsername.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetActiveUsername.Args, GetActiveUsername.Result]]
      ): Future[RichResponse[GetActiveUsername.Args, GetActiveUsername.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getActiveUsername", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetActiveUsername.Args, GetActiveUsername.Result], GetActiveUsername.Args, GetActiveUsername.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetActiveUsername.Args, GetActiveUsername.SuccessType]
      ): Future[RichResponse[GetActiveUsername.Args, GetActiveUsername.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetActiveUsername.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetActiveUsername.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getActiveUsername", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetActiveUsername.Args, GetActiveUsername.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("insertUserRoles", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[InsertUserRoles.Args, InsertUserRoles.Result]] = perMethodStatsFilter(InsertUserRoles)
  
    val methodService = new finagle$Service[InsertUserRoles.Args, InsertUserRoles.SuccessType] {
      def apply(args: InsertUserRoles.Args): Future[InsertUserRoles.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("insertUserRoles")
        }
        iface.insertUserRoles(args.username, args.roleIds)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[InsertUserRoles.Args, InsertUserRoles.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[InsertUserRoles.Args, InsertUserRoles.Result]]
      ): Future[RichResponse[InsertUserRoles.Args, InsertUserRoles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("insertUserRoles", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[InsertUserRoles.Args, InsertUserRoles.Result], InsertUserRoles.Args, InsertUserRoles.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[InsertUserRoles.Args, InsertUserRoles.SuccessType]
      ): Future[RichResponse[InsertUserRoles.Args, InsertUserRoles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = InsertUserRoles.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = InsertUserRoles.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("insertUserRoles", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[InsertUserRoles.Args, InsertUserRoles.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("insertExpirableUserRoles", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[InsertExpirableUserRoles.Args, InsertExpirableUserRoles.Result]] = perMethodStatsFilter(InsertExpirableUserRoles)
  
    val methodService = new finagle$Service[InsertExpirableUserRoles.Args, InsertExpirableUserRoles.SuccessType] {
      def apply(args: InsertExpirableUserRoles.Args): Future[InsertExpirableUserRoles.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("insertExpirableUserRoles")
        }
        iface.insertExpirableUserRoles(args.username, args.roleIds)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[InsertExpirableUserRoles.Args, InsertExpirableUserRoles.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[InsertExpirableUserRoles.Args, InsertExpirableUserRoles.Result]]
      ): Future[RichResponse[InsertExpirableUserRoles.Args, InsertExpirableUserRoles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("insertExpirableUserRoles", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[InsertExpirableUserRoles.Args, InsertExpirableUserRoles.Result], InsertExpirableUserRoles.Args, InsertExpirableUserRoles.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[InsertExpirableUserRoles.Args, InsertExpirableUserRoles.SuccessType]
      ): Future[RichResponse[InsertExpirableUserRoles.Args, InsertExpirableUserRoles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = InsertExpirableUserRoles.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = InsertExpirableUserRoles.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("insertExpirableUserRoles", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[InsertExpirableUserRoles.Args, InsertExpirableUserRoles.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("insertUserRole", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[InsertUserRole.Args, InsertUserRole.Result]] = perMethodStatsFilter(InsertUserRole)
  
    val methodService = new finagle$Service[InsertUserRole.Args, InsertUserRole.SuccessType] {
      def apply(args: InsertUserRole.Args): Future[InsertUserRole.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("insertUserRole")
        }
        iface.insertUserRole(args.username, args.role, args.expireTime, args.force)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[InsertUserRole.Args, InsertUserRole.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[InsertUserRole.Args, InsertUserRole.Result]]
      ): Future[RichResponse[InsertUserRole.Args, InsertUserRole.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("insertUserRole", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[InsertUserRole.Args, InsertUserRole.Result], InsertUserRole.Args, InsertUserRole.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[InsertUserRole.Args, InsertUserRole.SuccessType]
      ): Future[RichResponse[InsertUserRole.Args, InsertUserRole.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = InsertUserRole.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = InsertUserRole.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("insertUserRole", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[InsertUserRole.Args, InsertUserRole.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("deleteUserRoles", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[DeleteUserRoles.Args, DeleteUserRoles.Result]] = perMethodStatsFilter(DeleteUserRoles)
  
    val methodService = new finagle$Service[DeleteUserRoles.Args, DeleteUserRoles.SuccessType] {
      def apply(args: DeleteUserRoles.Args): Future[DeleteUserRoles.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("deleteUserRoles")
        }
        iface.deleteUserRoles(args.username, args.roleIds)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[DeleteUserRoles.Args, DeleteUserRoles.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[DeleteUserRoles.Args, DeleteUserRoles.Result]]
      ): Future[RichResponse[DeleteUserRoles.Args, DeleteUserRoles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("deleteUserRoles", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[DeleteUserRoles.Args, DeleteUserRoles.Result], DeleteUserRoles.Args, DeleteUserRoles.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[DeleteUserRoles.Args, DeleteUserRoles.SuccessType]
      ): Future[RichResponse[DeleteUserRoles.Args, DeleteUserRoles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = DeleteUserRoles.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = DeleteUserRoles.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("deleteUserRoles", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[DeleteUserRoles.Args, DeleteUserRoles.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getListUserRole", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetListUserRole.Args, GetListUserRole.Result]] = perMethodStatsFilter(GetListUserRole)
  
    val methodService = new finagle$Service[GetListUserRole.Args, GetListUserRole.SuccessType] {
      def apply(args: GetListUserRole.Args): Future[GetListUserRole.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getListUserRole")
        }
        iface.getListUserRole(args.notInRoleIds, args.inRoleIds, args.from, args.size)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetListUserRole.Args, GetListUserRole.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetListUserRole.Args, GetListUserRole.Result]]
      ): Future[RichResponse[GetListUserRole.Args, GetListUserRole.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getListUserRole", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetListUserRole.Args, GetListUserRole.Result], GetListUserRole.Args, GetListUserRole.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetListUserRole.Args, GetListUserRole.SuccessType]
      ): Future[RichResponse[GetListUserRole.Args, GetListUserRole.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetListUserRole.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetListUserRole.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getListUserRole", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetListUserRole.Args, GetListUserRole.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("searchListUserRole", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SearchListUserRole.Args, SearchListUserRole.Result]] = perMethodStatsFilter(SearchListUserRole)
  
    val methodService = new finagle$Service[SearchListUserRole.Args, SearchListUserRole.SuccessType] {
      def apply(args: SearchListUserRole.Args): Future[SearchListUserRole.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("searchListUserRole")
        }
        iface.searchListUserRole(args.usernameSearchKey, args.notInRoleIds, args.inRoleIds, args.from, args.size)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SearchListUserRole.Args, SearchListUserRole.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[SearchListUserRole.Args, SearchListUserRole.Result]]
      ): Future[RichResponse[SearchListUserRole.Args, SearchListUserRole.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("searchListUserRole", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SearchListUserRole.Args, SearchListUserRole.Result], SearchListUserRole.Args, SearchListUserRole.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[SearchListUserRole.Args, SearchListUserRole.SuccessType]
      ): Future[RichResponse[SearchListUserRole.Args, SearchListUserRole.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = SearchListUserRole.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = SearchListUserRole.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("searchListUserRole", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[SearchListUserRole.Args, SearchListUserRole.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("resetPasswordUser", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[ResetPasswordUser.Args, ResetPasswordUser.Result]] = perMethodStatsFilter(ResetPasswordUser)
  
    val methodService = new finagle$Service[ResetPasswordUser.Args, ResetPasswordUser.SuccessType] {
      def apply(args: ResetPasswordUser.Args): Future[ResetPasswordUser.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("resetPasswordUser")
        }
        iface.resetPasswordUser(args.username, args.newPassword)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[ResetPasswordUser.Args, ResetPasswordUser.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[ResetPasswordUser.Args, ResetPasswordUser.Result]]
      ): Future[RichResponse[ResetPasswordUser.Args, ResetPasswordUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("resetPasswordUser", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[ResetPasswordUser.Args, ResetPasswordUser.Result], ResetPasswordUser.Args, ResetPasswordUser.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[ResetPasswordUser.Args, ResetPasswordUser.SuccessType]
      ): Future[RichResponse[ResetPasswordUser.Args, ResetPasswordUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = ResetPasswordUser.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = ResetPasswordUser.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("resetPasswordUser", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[ResetPasswordUser.Args, ResetPasswordUser.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("updatePasswordUser", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[UpdatePasswordUser.Args, UpdatePasswordUser.Result]] = perMethodStatsFilter(UpdatePasswordUser)
  
    val methodService = new finagle$Service[UpdatePasswordUser.Args, UpdatePasswordUser.SuccessType] {
      def apply(args: UpdatePasswordUser.Args): Future[UpdatePasswordUser.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("updatePasswordUser")
        }
        iface.updatePasswordUser(args.username, args.oldPassword, args.newPassword)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[UpdatePasswordUser.Args, UpdatePasswordUser.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[UpdatePasswordUser.Args, UpdatePasswordUser.Result]]
      ): Future[RichResponse[UpdatePasswordUser.Args, UpdatePasswordUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("updatePasswordUser", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[UpdatePasswordUser.Args, UpdatePasswordUser.Result], UpdatePasswordUser.Args, UpdatePasswordUser.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[UpdatePasswordUser.Args, UpdatePasswordUser.SuccessType]
      ): Future[RichResponse[UpdatePasswordUser.Args, UpdatePasswordUser.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = UpdatePasswordUser.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = UpdatePasswordUser.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("updatePasswordUser", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[UpdatePasswordUser.Args, UpdatePasswordUser.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("deleteAllExpiredUserRole", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[DeleteAllExpiredUserRole.Args, DeleteAllExpiredUserRole.Result]] = perMethodStatsFilter(DeleteAllExpiredUserRole)
  
    val methodService = new finagle$Service[DeleteAllExpiredUserRole.Args, DeleteAllExpiredUserRole.SuccessType] {
      def apply(args: DeleteAllExpiredUserRole.Args): Future[DeleteAllExpiredUserRole.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("deleteAllExpiredUserRole")
        }
        iface.deleteAllExpiredUserRole(args.defaultRoleId, args.maxTime)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[DeleteAllExpiredUserRole.Args, DeleteAllExpiredUserRole.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[DeleteAllExpiredUserRole.Args, DeleteAllExpiredUserRole.Result]]
      ): Future[RichResponse[DeleteAllExpiredUserRole.Args, DeleteAllExpiredUserRole.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("deleteAllExpiredUserRole", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[DeleteAllExpiredUserRole.Args, DeleteAllExpiredUserRole.Result], DeleteAllExpiredUserRole.Args, DeleteAllExpiredUserRole.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[DeleteAllExpiredUserRole.Args, DeleteAllExpiredUserRole.SuccessType]
      ): Future[RichResponse[DeleteAllExpiredUserRole.Args, DeleteAllExpiredUserRole.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = DeleteAllExpiredUserRole.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = DeleteAllExpiredUserRole.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("deleteAllExpiredUserRole", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[DeleteAllExpiredUserRole.Args, DeleteAllExpiredUserRole.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getAllRoleInfo", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetAllRoleInfo.Args, GetAllRoleInfo.Result]] = perMethodStatsFilter(GetAllRoleInfo)
  
    val methodService = new finagle$Service[GetAllRoleInfo.Args, GetAllRoleInfo.SuccessType] {
      def apply(args: GetAllRoleInfo.Args): Future[GetAllRoleInfo.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getAllRoleInfo")
        }
        iface.getAllRoleInfo(args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetAllRoleInfo.Args, GetAllRoleInfo.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetAllRoleInfo.Args, GetAllRoleInfo.Result]]
      ): Future[RichResponse[GetAllRoleInfo.Args, GetAllRoleInfo.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getAllRoleInfo", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetAllRoleInfo.Args, GetAllRoleInfo.Result], GetAllRoleInfo.Args, GetAllRoleInfo.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetAllRoleInfo.Args, GetAllRoleInfo.SuccessType]
      ): Future[RichResponse[GetAllRoleInfo.Args, GetAllRoleInfo.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetAllRoleInfo.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetAllRoleInfo.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getAllRoleInfo", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetAllRoleInfo.Args, GetAllRoleInfo.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getAllPermission", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetAllPermission.Args, GetAllPermission.Result]] = perMethodStatsFilter(GetAllPermission)
  
    val methodService = new finagle$Service[GetAllPermission.Args, GetAllPermission.SuccessType] {
      def apply(args: GetAllPermission.Args): Future[GetAllPermission.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getAllPermission")
        }
        iface.getAllPermission(args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetAllPermission.Args, GetAllPermission.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetAllPermission.Args, GetAllPermission.Result]]
      ): Future[RichResponse[GetAllPermission.Args, GetAllPermission.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getAllPermission", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetAllPermission.Args, GetAllPermission.Result], GetAllPermission.Args, GetAllPermission.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetAllPermission.Args, GetAllPermission.SuccessType]
      ): Future[RichResponse[GetAllPermission.Args, GetAllPermission.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetAllPermission.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetAllPermission.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getAllPermission", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetAllPermission.Args, GetAllPermission.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
}
