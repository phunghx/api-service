/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.caas.service

import com.twitter.finagle.SourcedException
import com.twitter.finagle.{service => ctfs}
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.{Protocols,RichClientParam, ThriftClientRequest}
import com.twitter.scrooge.{TReusableBuffer, ThriftStruct, ThriftStructCodec}
import com.twitter.util.{Future, Return, Throw, Throwables}
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryInputTransport
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class TCaasService$FinagleClient(
    val service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    val clientParam: RichClientParam)
  extends TCaasService[Future] {

  @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
  def this(
    service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
    serviceName: String = "TCaasService",
    stats: StatsReceiver = NullStatsReceiver,
    responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default
  ) = this(
    service,
    RichClientParam(
      protocolFactory,
      serviceName,
      clientStats = stats,
      responseClassifier = responseClassifier
    )
  )

  @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
  def this(
    service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    protocolFactory: TProtocolFactory,
    serviceName: String,
    stats: StatsReceiver
  ) = this(service, protocolFactory, serviceName, stats, ctfs.ResponseClassifier.Default)

  import TCaasService._

  def serviceName: String = clientParam.serviceName

  override def asClosable: _root_.com.twitter.util.Closable = service

  private[this] def protocolFactory: TProtocolFactory = clientParam.restrictedProtocolFactory
  private[this] def maxReusableBufferSize: Int = clientParam.maxThriftBufferSize

  private[this] val tlReusableBuffer = TReusableBuffer(maxThriftBufferSize = maxReusableBufferSize)

  protected def encodeRequest(name: String, args: ThriftStruct) = {
    val memoryBuffer = tlReusableBuffer.get()
    try {
      val oprot = protocolFactory.getProtocol(memoryBuffer)

      oprot.writeMessageBegin(new TMessage(name, TMessageType.CALL, 0))
      args.write(oprot)
      oprot.writeMessageEnd()
      oprot.getTransport().flush()
      val bytes = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length())
      new ThriftClientRequest(bytes, false)
    } finally {
      tlReusableBuffer.reset()
    }
  }

  protected def decodeResponse[T <: ThriftStruct](resBytes: Array[Byte], codec: ThriftStructCodec[T]) = {
    val iprot = protocolFactory.getProtocol(new TMemoryInputTransport(resBytes))
    val msg = iprot.readMessageBegin()
    try {
      if (msg.`type` == TMessageType.EXCEPTION) {
        val exception = TApplicationException.readFrom(iprot) match {
          case sourced: SourcedException =>
            if (serviceName != "") sourced.serviceName = serviceName
            sourced
          case e => e
        }
        throw exception
      } else {
        codec.decode(iprot)
      }
    } finally {
      iprot.readMessageEnd()
    }
  }

  protected def missingResult(name: String) = {
    new TApplicationException(
      TApplicationException.MISSING_RESULT,
      name + " failed: unknown result"
    )
  }

  protected def setServiceName(ex: Throwable): Throwable =
    if (this.serviceName == "") ex
    else {
      ex match {
        case se: SourcedException =>
          se.serviceName = this.serviceName
          se
        case _ => ex
      }
    }

  // ----- end boilerplate.

  private[this] def stats: StatsReceiver = clientParam.clientStats
  private[this] def responseClassifier: ctfs.ResponseClassifier = clientParam.responseClassifier

  private[this] val scopedStats = if (serviceName != "") stats.scope(serviceName) else stats
  private[this] object __stats_ping {
    val RequestsCounter = scopedStats.scope("ping").counter("requests")
    val SuccessCounter = scopedStats.scope("ping").counter("success")
    val FailuresCounter = scopedStats.scope("ping").counter("failures")
    val FailuresScope = scopedStats.scope("ping").scope("failures")
  }
  val pingTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[String] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, Ping.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("ping"))
        }
      }
    }
  }
  
  def ping(): Future[String] = {
    __stats_ping.RequestsCounter.incr()
    val inputArgs = Ping.Args()
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[String](inputArgs, pingTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("ping", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_ping.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_ping.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_ping.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_renewSession {
    val RequestsCounter = scopedStats.scope("renewSession").counter("requests")
    val SuccessCounter = scopedStats.scope("renewSession").counter("success")
    val FailuresCounter = scopedStats.scope("renewSession").counter("failures")
    val FailuresScope = scopedStats.scope("renewSession").scope("failures")
  }
  val renewSessionTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TUserAuthResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, RenewSession.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("renewSession"))
        }
      }
    }
  }
  
  def renewSession(oldSessionId: String, sessionTimeout: Option[Long] = None): Future[xed.caas.domain.thrift.TUserAuthResult] = {
    __stats_renewSession.RequestsCounter.incr()
    val inputArgs = RenewSession.Args(oldSessionId, sessionTimeout)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TUserAuthResult](inputArgs, renewSessionTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("renewSession", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_renewSession.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_renewSession.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_renewSession.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_login {
    val RequestsCounter = scopedStats.scope("login").counter("requests")
    val SuccessCounter = scopedStats.scope("login").counter("success")
    val FailuresCounter = scopedStats.scope("login").counter("failures")
    val FailuresScope = scopedStats.scope("login").scope("failures")
  }
  val loginTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TUserAuthResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, Login.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("login"))
        }
      }
    }
  }
  
  def login(username: String, password: String, sessionTimeout: Option[Long] = None): Future[xed.caas.domain.thrift.TUserAuthResult] = {
    __stats_login.RequestsCounter.incr()
    val inputArgs = Login.Args(username, password, sessionTimeout)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TUserAuthResult](inputArgs, loginTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("login", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_login.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_login.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_login.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_loginOAuth {
    val RequestsCounter = scopedStats.scope("loginOAuth").counter("requests")
    val SuccessCounter = scopedStats.scope("loginOAuth").counter("success")
    val FailuresCounter = scopedStats.scope("loginOAuth").counter("failures")
    val FailuresScope = scopedStats.scope("loginOAuth").scope("failures")
  }
  val loginOAuthTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TUserAuthResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, LoginOAuth.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("loginOAuth"))
        }
      }
    }
  }
  
  def loginOAuth(username: String, sessionTimeout: Option[Long] = None): Future[xed.caas.domain.thrift.TUserAuthResult] = {
    __stats_loginOAuth.RequestsCounter.incr()
    val inputArgs = LoginOAuth.Args(username, sessionTimeout)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TUserAuthResult](inputArgs, loginOAuthTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("loginOAuth", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_loginOAuth.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_loginOAuth.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_loginOAuth.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_loginWithOAuth {
    val RequestsCounter = scopedStats.scope("loginWithOAuth").counter("requests")
    val SuccessCounter = scopedStats.scope("loginWithOAuth").counter("success")
    val FailuresCounter = scopedStats.scope("loginWithOAuth").counter("failures")
    val FailuresScope = scopedStats.scope("loginWithOAuth").scope("failures")
  }
  val loginWithOAuthTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TUserAuthResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, LoginWithOAuth.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("loginWithOAuth"))
        }
      }
    }
  }
  
  def loginWithOAuth(oauthType: String, id: String, token: String, sessionTimeout: Option[Long] = None, password: Option[String] = None): Future[xed.caas.domain.thrift.TUserAuthResult] = {
    __stats_loginWithOAuth.RequestsCounter.incr()
    val inputArgs = LoginWithOAuth.Args(oauthType, id, token, sessionTimeout, password)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TUserAuthResult](inputArgs, loginWithOAuthTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("loginWithOAuth", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_loginWithOAuth.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_loginWithOAuth.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_loginWithOAuth.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_register {
    val RequestsCounter = scopedStats.scope("register").counter("requests")
    val SuccessCounter = scopedStats.scope("register").counter("success")
    val FailuresCounter = scopedStats.scope("register").counter("failures")
    val FailuresScope = scopedStats.scope("register").scope("failures")
  }
  val registerTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TUserInfoResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, Register.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("register"))
        }
      }
    }
  }
  
  def register(username: String, password: String): Future[xed.caas.domain.thrift.TUserInfoResult] = {
    __stats_register.RequestsCounter.incr()
    val inputArgs = Register.Args(username, password)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TUserInfoResult](inputArgs, registerTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("register", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_register.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_register.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_register.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_isCredentialDefault {
    val RequestsCounter = scopedStats.scope("isCredentialDefault").counter("requests")
    val SuccessCounter = scopedStats.scope("isCredentialDefault").counter("success")
    val FailuresCounter = scopedStats.scope("isCredentialDefault").counter("failures")
    val FailuresScope = scopedStats.scope("isCredentialDefault").scope("failures")
  }
  val isCredentialDefaultTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, IsCredentialDefault.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("isCredentialDefault"))
        }
      }
    }
  }
  
  def isCredentialDefault(oauthType: String, username: String): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_isCredentialDefault.RequestsCounter.incr()
    val inputArgs = IsCredentialDefault.Args(oauthType, username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, isCredentialDefaultTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("isCredentialDefault", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_isCredentialDefault.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_isCredentialDefault.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_isCredentialDefault.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_deleteUser {
    val RequestsCounter = scopedStats.scope("deleteUser").counter("requests")
    val SuccessCounter = scopedStats.scope("deleteUser").counter("success")
    val FailuresCounter = scopedStats.scope("deleteUser").counter("failures")
    val FailuresScope = scopedStats.scope("deleteUser").scope("failures")
  }
  val deleteUserTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, DeleteUser.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("deleteUser"))
        }
      }
    }
  }
  
  def deleteUser(username: String): Future[xed.caas.domain.thrift.TResult] = {
    __stats_deleteUser.RequestsCounter.incr()
    val inputArgs = DeleteUser.Args(username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TResult](inputArgs, deleteUserTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("deleteUser", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_deleteUser.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_deleteUser.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_deleteUser.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_registerWithOAuth {
    val RequestsCounter = scopedStats.scope("registerWithOAuth").counter("requests")
    val SuccessCounter = scopedStats.scope("registerWithOAuth").counter("success")
    val FailuresCounter = scopedStats.scope("registerWithOAuth").counter("failures")
    val FailuresScope = scopedStats.scope("registerWithOAuth").scope("failures")
  }
  val registerWithOAuthTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TUserInfoResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, RegisterWithOAuth.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("registerWithOAuth"))
        }
      }
    }
  }
  
  def registerWithOAuth(oauthType: String, id: String, token: String, password: Option[String] = None): Future[xed.caas.domain.thrift.TUserInfoResult] = {
    __stats_registerWithOAuth.RequestsCounter.incr()
    val inputArgs = RegisterWithOAuth.Args(oauthType, id, token, password)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TUserInfoResult](inputArgs, registerWithOAuthTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("registerWithOAuth", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_registerWithOAuth.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_registerWithOAuth.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_registerWithOAuth.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getUserWithSessionId {
    val RequestsCounter = scopedStats.scope("getUserWithSessionId").counter("requests")
    val SuccessCounter = scopedStats.scope("getUserWithSessionId").counter("success")
    val FailuresCounter = scopedStats.scope("getUserWithSessionId").counter("failures")
    val FailuresScope = scopedStats.scope("getUserWithSessionId").scope("failures")
  }
  val getUserWithSessionIdTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TUserInfoResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetUserWithSessionId.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getUserWithSessionId"))
        }
      }
    }
  }
  
  def getUserWithSessionId(sessionId: String): Future[xed.caas.domain.thrift.TUserInfoResult] = {
    __stats_getUserWithSessionId.RequestsCounter.incr()
    val inputArgs = GetUserWithSessionId.Args(sessionId)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TUserInfoResult](inputArgs, getUserWithSessionIdTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getUserWithSessionId", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getUserWithSessionId.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getUserWithSessionId.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getUserWithSessionId.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getUserWithUsername {
    val RequestsCounter = scopedStats.scope("getUserWithUsername").counter("requests")
    val SuccessCounter = scopedStats.scope("getUserWithUsername").counter("success")
    val FailuresCounter = scopedStats.scope("getUserWithUsername").counter("failures")
    val FailuresScope = scopedStats.scope("getUserWithUsername").scope("failures")
  }
  val getUserWithUsernameTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TUserInfoResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetUserWithUsername.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getUserWithUsername"))
        }
      }
    }
  }
  
  def getUserWithUsername(username: String): Future[xed.caas.domain.thrift.TUserInfoResult] = {
    __stats_getUserWithUsername.RequestsCounter.incr()
    val inputArgs = GetUserWithUsername.Args(username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TUserInfoResult](inputArgs, getUserWithUsernameTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getUserWithUsername", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getUserWithUsername.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getUserWithUsername.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getUserWithUsername.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_logout {
    val RequestsCounter = scopedStats.scope("logout").counter("requests")
    val SuccessCounter = scopedStats.scope("logout").counter("success")
    val FailuresCounter = scopedStats.scope("logout").counter("failures")
    val FailuresScope = scopedStats.scope("logout").scope("failures")
  }
  val logoutTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, Logout.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("logout"))
        }
      }
    }
  }
  
  def logout(sessionId: String): Future[xed.caas.domain.thrift.TResult] = {
    __stats_logout.RequestsCounter.incr()
    val inputArgs = Logout.Args(sessionId)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TResult](inputArgs, logoutTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("logout", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_logout.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_logout.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_logout.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_isPermitted {
    val RequestsCounter = scopedStats.scope("isPermitted").counter("requests")
    val SuccessCounter = scopedStats.scope("isPermitted").counter("success")
    val FailuresCounter = scopedStats.scope("isPermitted").counter("failures")
    val FailuresScope = scopedStats.scope("isPermitted").scope("failures")
  }
  val isPermittedTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, IsPermitted.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("isPermitted"))
        }
      }
    }
  }
  
  def isPermitted(sessionId: String, permission: String): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_isPermitted.RequestsCounter.incr()
    val inputArgs = IsPermitted.Args(sessionId, permission)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, isPermittedTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("isPermitted", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_isPermitted.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_isPermitted.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_isPermitted.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_isPermitteds {
    val RequestsCounter = scopedStats.scope("isPermitteds").counter("requests")
    val SuccessCounter = scopedStats.scope("isPermitteds").counter("success")
    val FailuresCounter = scopedStats.scope("isPermitteds").counter("failures")
    val FailuresScope = scopedStats.scope("isPermitteds").scope("failures")
  }
  val isPermittedsTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TListBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, IsPermitteds.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("isPermitteds"))
        }
      }
    }
  }
  
  def isPermitteds(sessionId: String, permissions: Seq[String] = Seq[String]()): Future[xed.caas.domain.thrift.TListBoolResult] = {
    __stats_isPermitteds.RequestsCounter.incr()
    val inputArgs = IsPermitteds.Args(sessionId, permissions)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TListBoolResult](inputArgs, isPermittedsTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("isPermitteds", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_isPermitteds.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_isPermitteds.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_isPermitteds.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_isPermittedAll {
    val RequestsCounter = scopedStats.scope("isPermittedAll").counter("requests")
    val SuccessCounter = scopedStats.scope("isPermittedAll").counter("success")
    val FailuresCounter = scopedStats.scope("isPermittedAll").counter("failures")
    val FailuresScope = scopedStats.scope("isPermittedAll").scope("failures")
  }
  val isPermittedAllTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, IsPermittedAll.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("isPermittedAll"))
        }
      }
    }
  }
  
  def isPermittedAll(sessionId: String, permissions: Seq[String] = Seq[String]()): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_isPermittedAll.RequestsCounter.incr()
    val inputArgs = IsPermittedAll.Args(sessionId, permissions)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, isPermittedAllTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("isPermittedAll", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_isPermittedAll.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_isPermittedAll.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_isPermittedAll.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_isPermittedUser {
    val RequestsCounter = scopedStats.scope("isPermittedUser").counter("requests")
    val SuccessCounter = scopedStats.scope("isPermittedUser").counter("success")
    val FailuresCounter = scopedStats.scope("isPermittedUser").counter("failures")
    val FailuresScope = scopedStats.scope("isPermittedUser").scope("failures")
  }
  val isPermittedUserTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, IsPermittedUser.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("isPermittedUser"))
        }
      }
    }
  }
  
  def isPermittedUser(username: String, permission: String): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_isPermittedUser.RequestsCounter.incr()
    val inputArgs = IsPermittedUser.Args(username, permission)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, isPermittedUserTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("isPermittedUser", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_isPermittedUser.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_isPermittedUser.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_isPermittedUser.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_isPermittedsUser {
    val RequestsCounter = scopedStats.scope("isPermittedsUser").counter("requests")
    val SuccessCounter = scopedStats.scope("isPermittedsUser").counter("success")
    val FailuresCounter = scopedStats.scope("isPermittedsUser").counter("failures")
    val FailuresScope = scopedStats.scope("isPermittedsUser").scope("failures")
  }
  val isPermittedsUserTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TListBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, IsPermittedsUser.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("isPermittedsUser"))
        }
      }
    }
  }
  
  def isPermittedsUser(username: String, permissions: Seq[String] = Seq[String]()): Future[xed.caas.domain.thrift.TListBoolResult] = {
    __stats_isPermittedsUser.RequestsCounter.incr()
    val inputArgs = IsPermittedsUser.Args(username, permissions)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TListBoolResult](inputArgs, isPermittedsUserTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("isPermittedsUser", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_isPermittedsUser.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_isPermittedsUser.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_isPermittedsUser.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_isPermittedUserAll {
    val RequestsCounter = scopedStats.scope("isPermittedUserAll").counter("requests")
    val SuccessCounter = scopedStats.scope("isPermittedUserAll").counter("success")
    val FailuresCounter = scopedStats.scope("isPermittedUserAll").counter("failures")
    val FailuresScope = scopedStats.scope("isPermittedUserAll").scope("failures")
  }
  val isPermittedUserAllTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, IsPermittedUserAll.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("isPermittedUserAll"))
        }
      }
    }
  }
  
  def isPermittedUserAll(username: String, permissions: Seq[String] = Seq[String]()): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_isPermittedUserAll.RequestsCounter.incr()
    val inputArgs = IsPermittedUserAll.Args(username, permissions)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, isPermittedUserAllTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("isPermittedUserAll", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_isPermittedUserAll.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_isPermittedUserAll.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_isPermittedUserAll.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getUserRoles {
    val RequestsCounter = scopedStats.scope("getUserRoles").counter("requests")
    val SuccessCounter = scopedStats.scope("getUserRoles").counter("success")
    val FailuresCounter = scopedStats.scope("getUserRoles").counter("failures")
    val FailuresScope = scopedStats.scope("getUserRoles").scope("failures")
  }
  val getUserRolesTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TListStringResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetUserRoles.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getUserRoles"))
        }
      }
    }
  }
  
  def getUserRoles(sessionId: String): Future[xed.caas.domain.thrift.TListStringResult] = {
    __stats_getUserRoles.RequestsCounter.incr()
    val inputArgs = GetUserRoles.Args(sessionId)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TListStringResult](inputArgs, getUserRolesTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getUserRoles", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getUserRoles.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getUserRoles.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getUserRoles.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_hasRole {
    val RequestsCounter = scopedStats.scope("hasRole").counter("requests")
    val SuccessCounter = scopedStats.scope("hasRole").counter("success")
    val FailuresCounter = scopedStats.scope("hasRole").counter("failures")
    val FailuresScope = scopedStats.scope("hasRole").scope("failures")
  }
  val hasRoleTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, HasRole.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("hasRole"))
        }
      }
    }
  }
  
  def hasRole(sessionId: String, role: String): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_hasRole.RequestsCounter.incr()
    val inputArgs = HasRole.Args(sessionId, role)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, hasRoleTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("hasRole", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_hasRole.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_hasRole.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_hasRole.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_hasRoles {
    val RequestsCounter = scopedStats.scope("hasRoles").counter("requests")
    val SuccessCounter = scopedStats.scope("hasRoles").counter("success")
    val FailuresCounter = scopedStats.scope("hasRoles").counter("failures")
    val FailuresScope = scopedStats.scope("hasRoles").scope("failures")
  }
  val hasRolesTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TListBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, HasRoles.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("hasRoles"))
        }
      }
    }
  }
  
  def hasRoles(sessionId: String, roles: Seq[String] = Seq[String]()): Future[xed.caas.domain.thrift.TListBoolResult] = {
    __stats_hasRoles.RequestsCounter.incr()
    val inputArgs = HasRoles.Args(sessionId, roles)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TListBoolResult](inputArgs, hasRolesTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("hasRoles", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_hasRoles.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_hasRoles.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_hasRoles.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_hasRoleUser {
    val RequestsCounter = scopedStats.scope("hasRoleUser").counter("requests")
    val SuccessCounter = scopedStats.scope("hasRoleUser").counter("success")
    val FailuresCounter = scopedStats.scope("hasRoleUser").counter("failures")
    val FailuresScope = scopedStats.scope("hasRoleUser").scope("failures")
  }
  val hasRoleUserTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, HasRoleUser.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("hasRoleUser"))
        }
      }
    }
  }
  
  def hasRoleUser(username: String, roleName: String): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_hasRoleUser.RequestsCounter.incr()
    val inputArgs = HasRoleUser.Args(username, roleName)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, hasRoleUserTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("hasRoleUser", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_hasRoleUser.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_hasRoleUser.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_hasRoleUser.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_hasAllRoleUser {
    val RequestsCounter = scopedStats.scope("hasAllRoleUser").counter("requests")
    val SuccessCounter = scopedStats.scope("hasAllRoleUser").counter("success")
    val FailuresCounter = scopedStats.scope("hasAllRoleUser").counter("failures")
    val FailuresScope = scopedStats.scope("hasAllRoleUser").scope("failures")
  }
  val hasAllRoleUserTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, HasAllRoleUser.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("hasAllRoleUser"))
        }
      }
    }
  }
  
  def hasAllRoleUser(username: String, roleNames: Seq[String] = Seq[String]()): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_hasAllRoleUser.RequestsCounter.incr()
    val inputArgs = HasAllRoleUser.Args(username, roleNames)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, hasAllRoleUserTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("hasAllRoleUser", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_hasAllRoleUser.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_hasAllRoleUser.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_hasAllRoleUser.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getAllUsername {
    val RequestsCounter = scopedStats.scope("getAllUsername").counter("requests")
    val SuccessCounter = scopedStats.scope("getAllUsername").counter("success")
    val FailuresCounter = scopedStats.scope("getAllUsername").counter("failures")
    val FailuresScope = scopedStats.scope("getAllUsername").scope("failures")
  }
  val getAllUsernameTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TListStringResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetAllUsername.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getAllUsername"))
        }
      }
    }
  }
  
  def getAllUsername(): Future[xed.caas.domain.thrift.TListStringResult] = {
    __stats_getAllUsername.RequestsCounter.incr()
    val inputArgs = GetAllUsername.Args()
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TListStringResult](inputArgs, getAllUsernameTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getAllUsername", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getAllUsername.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getAllUsername.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getAllUsername.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getActiveUsername {
    val RequestsCounter = scopedStats.scope("getActiveUsername").counter("requests")
    val SuccessCounter = scopedStats.scope("getActiveUsername").counter("success")
    val FailuresCounter = scopedStats.scope("getActiveUsername").counter("failures")
    val FailuresScope = scopedStats.scope("getActiveUsername").scope("failures")
  }
  val getActiveUsernameTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TListUserResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetActiveUsername.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getActiveUsername"))
        }
      }
    }
  }
  
  def getActiveUsername(from: Int, size: Int): Future[xed.caas.domain.thrift.TListUserResult] = {
    __stats_getActiveUsername.RequestsCounter.incr()
    val inputArgs = GetActiveUsername.Args(from, size)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TListUserResult](inputArgs, getActiveUsernameTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getActiveUsername", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getActiveUsername.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getActiveUsername.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getActiveUsername.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_insertUserRoles {
    val RequestsCounter = scopedStats.scope("insertUserRoles").counter("requests")
    val SuccessCounter = scopedStats.scope("insertUserRoles").counter("success")
    val FailuresCounter = scopedStats.scope("insertUserRoles").counter("failures")
    val FailuresScope = scopedStats.scope("insertUserRoles").scope("failures")
  }
  val insertUserRolesTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, InsertUserRoles.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("insertUserRoles"))
        }
      }
    }
  }
  
  def insertUserRoles(username: String, roleIds: Set[Int] = Set[Int]()): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_insertUserRoles.RequestsCounter.incr()
    val inputArgs = InsertUserRoles.Args(username, roleIds)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, insertUserRolesTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("insertUserRoles", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_insertUserRoles.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_insertUserRoles.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_insertUserRoles.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_insertExpirableUserRoles {
    val RequestsCounter = scopedStats.scope("insertExpirableUserRoles").counter("requests")
    val SuccessCounter = scopedStats.scope("insertExpirableUserRoles").counter("success")
    val FailuresCounter = scopedStats.scope("insertExpirableUserRoles").counter("failures")
    val FailuresScope = scopedStats.scope("insertExpirableUserRoles").scope("failures")
  }
  val insertExpirableUserRolesTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, InsertExpirableUserRoles.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("insertExpirableUserRoles"))
        }
      }
    }
  }
  
  def insertExpirableUserRoles(username: String, roleIds: Map[Int, Long] = Map[Int, Long]()): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_insertExpirableUserRoles.RequestsCounter.incr()
    val inputArgs = InsertExpirableUserRoles.Args(username, roleIds)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, insertExpirableUserRolesTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("insertExpirableUserRoles", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_insertExpirableUserRoles.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_insertExpirableUserRoles.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_insertExpirableUserRoles.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_insertUserRole {
    val RequestsCounter = scopedStats.scope("insertUserRole").counter("requests")
    val SuccessCounter = scopedStats.scope("insertUserRole").counter("success")
    val FailuresCounter = scopedStats.scope("insertUserRole").counter("failures")
    val FailuresScope = scopedStats.scope("insertUserRole").scope("failures")
  }
  val insertUserRoleTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, InsertUserRole.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("insertUserRole"))
        }
      }
    }
  }
  
  def insertUserRole(username: String, role: Int, expireTime: Long, force: Boolean): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_insertUserRole.RequestsCounter.incr()
    val inputArgs = InsertUserRole.Args(username, role, expireTime, force)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, insertUserRoleTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("insertUserRole", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_insertUserRole.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_insertUserRole.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_insertUserRole.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_deleteUserRoles {
    val RequestsCounter = scopedStats.scope("deleteUserRoles").counter("requests")
    val SuccessCounter = scopedStats.scope("deleteUserRoles").counter("success")
    val FailuresCounter = scopedStats.scope("deleteUserRoles").counter("failures")
    val FailuresScope = scopedStats.scope("deleteUserRoles").scope("failures")
  }
  val deleteUserRolesTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, DeleteUserRoles.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("deleteUserRoles"))
        }
      }
    }
  }
  
  def deleteUserRoles(username: String, roleIds: Set[Int] = Set[Int]()): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_deleteUserRoles.RequestsCounter.incr()
    val inputArgs = DeleteUserRoles.Args(username, roleIds)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, deleteUserRolesTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("deleteUserRoles", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_deleteUserRoles.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_deleteUserRoles.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_deleteUserRoles.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getListUserRole {
    val RequestsCounter = scopedStats.scope("getListUserRole").counter("requests")
    val SuccessCounter = scopedStats.scope("getListUserRole").counter("success")
    val FailuresCounter = scopedStats.scope("getListUserRole").counter("failures")
    val FailuresScope = scopedStats.scope("getListUserRole").scope("failures")
  }
  val getListUserRoleTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TUserInfoPageable] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetListUserRole.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getListUserRole"))
        }
      }
    }
  }
  
  def getListUserRole(notInRoleIds: Option[Seq[Int]] = None, inRoleIds: Option[Seq[Int]] = None, from: Int, size: Int): Future[xed.caas.domain.thrift.TUserInfoPageable] = {
    __stats_getListUserRole.RequestsCounter.incr()
    val inputArgs = GetListUserRole.Args(notInRoleIds, inRoleIds, from, size)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TUserInfoPageable](inputArgs, getListUserRoleTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getListUserRole", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getListUserRole.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getListUserRole.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getListUserRole.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_searchListUserRole {
    val RequestsCounter = scopedStats.scope("searchListUserRole").counter("requests")
    val SuccessCounter = scopedStats.scope("searchListUserRole").counter("success")
    val FailuresCounter = scopedStats.scope("searchListUserRole").counter("failures")
    val FailuresScope = scopedStats.scope("searchListUserRole").scope("failures")
  }
  val searchListUserRoleTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TUserInfoPageable] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, SearchListUserRole.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("searchListUserRole"))
        }
      }
    }
  }
  
  def searchListUserRole(usernameSearchKey: String, notInRoleIds: Option[Seq[Int]] = None, inRoleIds: Option[Seq[Int]] = None, from: Int, size: Int): Future[xed.caas.domain.thrift.TUserInfoPageable] = {
    __stats_searchListUserRole.RequestsCounter.incr()
    val inputArgs = SearchListUserRole.Args(usernameSearchKey, notInRoleIds, inRoleIds, from, size)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TUserInfoPageable](inputArgs, searchListUserRoleTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("searchListUserRole", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_searchListUserRole.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_searchListUserRole.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_searchListUserRole.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_resetPasswordUser {
    val RequestsCounter = scopedStats.scope("resetPasswordUser").counter("requests")
    val SuccessCounter = scopedStats.scope("resetPasswordUser").counter("success")
    val FailuresCounter = scopedStats.scope("resetPasswordUser").counter("failures")
    val FailuresScope = scopedStats.scope("resetPasswordUser").scope("failures")
  }
  val resetPasswordUserTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, ResetPasswordUser.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("resetPasswordUser"))
        }
      }
    }
  }
  
  def resetPasswordUser(username: String, newPassword: String): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_resetPasswordUser.RequestsCounter.incr()
    val inputArgs = ResetPasswordUser.Args(username, newPassword)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, resetPasswordUserTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("resetPasswordUser", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_resetPasswordUser.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_resetPasswordUser.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_resetPasswordUser.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_updatePasswordUser {
    val RequestsCounter = scopedStats.scope("updatePasswordUser").counter("requests")
    val SuccessCounter = scopedStats.scope("updatePasswordUser").counter("success")
    val FailuresCounter = scopedStats.scope("updatePasswordUser").counter("failures")
    val FailuresScope = scopedStats.scope("updatePasswordUser").scope("failures")
  }
  val updatePasswordUserTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, UpdatePasswordUser.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("updatePasswordUser"))
        }
      }
    }
  }
  
  def updatePasswordUser(username: String, oldPassword: String, newPassword: String): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_updatePasswordUser.RequestsCounter.incr()
    val inputArgs = UpdatePasswordUser.Args(username, oldPassword, newPassword)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, updatePasswordUserTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("updatePasswordUser", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_updatePasswordUser.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_updatePasswordUser.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_updatePasswordUser.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_deleteAllExpiredUserRole {
    val RequestsCounter = scopedStats.scope("deleteAllExpiredUserRole").counter("requests")
    val SuccessCounter = scopedStats.scope("deleteAllExpiredUserRole").counter("success")
    val FailuresCounter = scopedStats.scope("deleteAllExpiredUserRole").counter("failures")
    val FailuresScope = scopedStats.scope("deleteAllExpiredUserRole").scope("failures")
  }
  val deleteAllExpiredUserRoleTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TBoolResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, DeleteAllExpiredUserRole.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("deleteAllExpiredUserRole"))
        }
      }
    }
  }
  
  def deleteAllExpiredUserRole(defaultRoleId: Int, maxTime: Long): Future[xed.caas.domain.thrift.TBoolResult] = {
    __stats_deleteAllExpiredUserRole.RequestsCounter.incr()
    val inputArgs = DeleteAllExpiredUserRole.Args(defaultRoleId, maxTime)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TBoolResult](inputArgs, deleteAllExpiredUserRoleTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("deleteAllExpiredUserRole", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_deleteAllExpiredUserRole.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_deleteAllExpiredUserRole.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_deleteAllExpiredUserRole.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getAllRoleInfo {
    val RequestsCounter = scopedStats.scope("getAllRoleInfo").counter("requests")
    val SuccessCounter = scopedStats.scope("getAllRoleInfo").counter("success")
    val FailuresCounter = scopedStats.scope("getAllRoleInfo").counter("failures")
    val FailuresScope = scopedStats.scope("getAllRoleInfo").scope("failures")
  }
  val getAllRoleInfoTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TListRoleInfoResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetAllRoleInfo.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getAllRoleInfo"))
        }
      }
    }
  }
  
  def getAllRoleInfo(username: String): Future[xed.caas.domain.thrift.TListRoleInfoResult] = {
    __stats_getAllRoleInfo.RequestsCounter.incr()
    val inputArgs = GetAllRoleInfo.Args(username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TListRoleInfoResult](inputArgs, getAllRoleInfoTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getAllRoleInfo", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getAllRoleInfo.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getAllRoleInfo.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getAllRoleInfo.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getAllPermission {
    val RequestsCounter = scopedStats.scope("getAllPermission").counter("requests")
    val SuccessCounter = scopedStats.scope("getAllPermission").counter("success")
    val FailuresCounter = scopedStats.scope("getAllPermission").counter("failures")
    val FailuresScope = scopedStats.scope("getAllPermission").scope("failures")
  }
  val getAllPermissionTCaasServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.caas.domain.thrift.TListStringResult] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetAllPermission.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getAllPermission"))
        }
      }
    }
  }
  
  def getAllPermission(username: String): Future[xed.caas.domain.thrift.TListStringResult] = {
    __stats_getAllPermission.RequestsCounter.incr()
    val inputArgs = GetAllPermission.Args(username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.caas.domain.thrift.TListStringResult](inputArgs, getAllPermissionTCaasServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getAllPermission", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getAllPermission.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getAllPermission.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getAllPermission.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
}
