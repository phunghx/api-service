/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.leaderboard_mw.service

import com.twitter.finagle.SourcedException
import com.twitter.finagle.{service => ctfs}
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.{Protocols,RichClientParam, ThriftClientRequest}
import com.twitter.scrooge.{TReusableBuffer, ThriftStruct, ThriftStructCodec}
import com.twitter.util.{Future, Return, Throw, Throwables}
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryInputTransport
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class TLeaderBoardMWService$FinagleClient(
    val service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    val clientParam: RichClientParam)
  extends TLeaderBoardMWService[Future] {

  @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
  def this(
    service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
    serviceName: String = "TLeaderBoardMWService",
    stats: StatsReceiver = NullStatsReceiver,
    responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default
  ) = this(
    service,
    RichClientParam(
      protocolFactory,
      serviceName,
      clientStats = stats,
      responseClassifier = responseClassifier
    )
  )

  @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
  def this(
    service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    protocolFactory: TProtocolFactory,
    serviceName: String,
    stats: StatsReceiver
  ) = this(service, protocolFactory, serviceName, stats, ctfs.ResponseClassifier.Default)

  import TLeaderBoardMWService._

  def serviceName: String = clientParam.serviceName

  override def asClosable: _root_.com.twitter.util.Closable = service

  private[this] def protocolFactory: TProtocolFactory = clientParam.restrictedProtocolFactory
  private[this] def maxReusableBufferSize: Int = clientParam.maxThriftBufferSize

  private[this] val tlReusableBuffer = TReusableBuffer(maxThriftBufferSize = maxReusableBufferSize)

  protected def encodeRequest(name: String, args: ThriftStruct) = {
    val memoryBuffer = tlReusableBuffer.get()
    try {
      val oprot = protocolFactory.getProtocol(memoryBuffer)

      oprot.writeMessageBegin(new TMessage(name, TMessageType.CALL, 0))
      args.write(oprot)
      oprot.writeMessageEnd()
      oprot.getTransport().flush()
      val bytes = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length())
      new ThriftClientRequest(bytes, false)
    } finally {
      tlReusableBuffer.reset()
    }
  }

  protected def decodeResponse[T <: ThriftStruct](resBytes: Array[Byte], codec: ThriftStructCodec[T]) = {
    val iprot = protocolFactory.getProtocol(new TMemoryInputTransport(resBytes))
    val msg = iprot.readMessageBegin()
    try {
      if (msg.`type` == TMessageType.EXCEPTION) {
        val exception = TApplicationException.readFrom(iprot) match {
          case sourced: SourcedException =>
            if (serviceName != "") sourced.serviceName = serviceName
            sourced
          case e => e
        }
        throw exception
      } else {
        codec.decode(iprot)
      }
    } finally {
      iprot.readMessageEnd()
    }
  }

  protected def missingResult(name: String) = {
    new TApplicationException(
      TApplicationException.MISSING_RESULT,
      name + " failed: unknown result"
    )
  }

  protected def setServiceName(ex: Throwable): Throwable =
    if (this.serviceName == "") ex
    else {
      ex match {
        case se: SourcedException =>
          se.serviceName = this.serviceName
          se
        case _ => ex
      }
    }

  // ----- end boilerplate.

  private[this] def stats: StatsReceiver = clientParam.clientStats
  private[this] def responseClassifier: ctfs.ResponseClassifier = clientParam.responseClassifier

  private[this] val scopedStats = if (serviceName != "") stats.scope(serviceName) else stats
  private[this] object __stats_ping {
    val RequestsCounter = scopedStats.scope("ping").counter("requests")
    val SuccessCounter = scopedStats.scope("ping").counter("success")
    val FailuresCounter = scopedStats.scope("ping").counter("failures")
    val FailuresScope = scopedStats.scope("ping").scope("failures")
  }
  val pingTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[String] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, Ping.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("ping"))
        }
      }
    }
  }
  
  def ping(): Future[String] = {
    __stats_ping.RequestsCounter.incr()
    val inputArgs = Ping.Args()
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[String](inputArgs, pingTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("ping", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_ping.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_ping.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_ping.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getChallengeLeaderBoard {
    val RequestsCounter = scopedStats.scope("getChallengeLeaderBoard").counter("requests")
    val SuccessCounter = scopedStats.scope("getChallengeLeaderBoard").counter("success")
    val FailuresCounter = scopedStats.scope("getChallengeLeaderBoard").counter("failures")
    val FailuresScope = scopedStats.scope("getChallengeLeaderBoard").scope("failures")
  }
  val getChallengeLeaderBoardTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.leaderboard.domain.thrift.TLeaderBoard] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetChallengeLeaderBoard.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getChallengeLeaderBoard"))
        }
      }
    }
  }
  
  def getChallengeLeaderBoard(gameId: String, myUsername: String, from: Int, to: Int, onlyFriendFromSocial: Boolean, leaderboardType: Option[xed.leaderboard.domain.thrift.TLeaderBoardType] = None): Future[xed.leaderboard.domain.thrift.TLeaderBoard] = {
    __stats_getChallengeLeaderBoard.RequestsCounter.incr()
    val inputArgs = GetChallengeLeaderBoard.Args(gameId, myUsername, from, to, onlyFriendFromSocial, leaderboardType)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.leaderboard.domain.thrift.TLeaderBoard](inputArgs, getChallengeLeaderBoardTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getChallengeLeaderBoard", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getChallengeLeaderBoard.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getChallengeLeaderBoard.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getChallengeLeaderBoard.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getChallengeUserRank {
    val RequestsCounter = scopedStats.scope("getChallengeUserRank").counter("requests")
    val SuccessCounter = scopedStats.scope("getChallengeUserRank").counter("success")
    val FailuresCounter = scopedStats.scope("getChallengeUserRank").counter("failures")
    val FailuresScope = scopedStats.scope("getChallengeUserRank").scope("failures")
  }
  val getChallengeUserRankTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.leaderboard.domain.thrift.TLeaderBoardItemResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetChallengeUserRank.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getChallengeUserRank"))
        }
      }
    }
  }
  
  def getChallengeUserRank(gameId: String, username: String, onlyFriendFromSocial: Boolean, leaderboardType: Option[xed.leaderboard.domain.thrift.TLeaderBoardType] = None): Future[xed.leaderboard.domain.thrift.TLeaderBoardItemResp] = {
    __stats_getChallengeUserRank.RequestsCounter.incr()
    val inputArgs = GetChallengeUserRank.Args(gameId, username, onlyFriendFromSocial, leaderboardType)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.leaderboard.domain.thrift.TLeaderBoardItemResp](inputArgs, getChallengeUserRankTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getChallengeUserRank", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getChallengeUserRank.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getChallengeUserRank.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getChallengeUserRank.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_setChallengeUserPoint {
    val RequestsCounter = scopedStats.scope("setChallengeUserPoint").counter("requests")
    val SuccessCounter = scopedStats.scope("setChallengeUserPoint").counter("success")
    val FailuresCounter = scopedStats.scope("setChallengeUserPoint").counter("failures")
    val FailuresScope = scopedStats.scope("setChallengeUserPoint").scope("failures")
  }
  val setChallengeUserPointTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, SetChallengeUserPoint.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("setChallengeUserPoint"))
        }
      }
    }
  }
  
  def setChallengeUserPoint(gameId: String, username: String, pointInfo: xed.leaderboard.domain.thrift.TPointInfo): Future[Boolean] = {
    __stats_setChallengeUserPoint.RequestsCounter.incr()
    val inputArgs = SetChallengeUserPoint.Args(gameId, username, pointInfo)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, setChallengeUserPointTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("setChallengeUserPoint", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_setChallengeUserPoint.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_setChallengeUserPoint.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_setChallengeUserPoint.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_setChallengeUserPoints {
    val RequestsCounter = scopedStats.scope("setChallengeUserPoints").counter("requests")
    val SuccessCounter = scopedStats.scope("setChallengeUserPoints").counter("success")
    val FailuresCounter = scopedStats.scope("setChallengeUserPoints").counter("failures")
    val FailuresScope = scopedStats.scope("setChallengeUserPoints").scope("failures")
  }
  val setChallengeUserPointsTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, SetChallengeUserPoints.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("setChallengeUserPoints"))
        }
      }
    }
  }
  
  def setChallengeUserPoints(gameId: String, userPoints: Map[String, xed.leaderboard.domain.thrift.TPointInfo] = Map[String, xed.leaderboard.domain.thrift.TPointInfo]()): Future[Boolean] = {
    __stats_setChallengeUserPoints.RequestsCounter.incr()
    val inputArgs = SetChallengeUserPoints.Args(gameId, userPoints)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, setChallengeUserPointsTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("setChallengeUserPoints", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_setChallengeUserPoints.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_setChallengeUserPoints.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_setChallengeUserPoints.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_setChallengeUserPointIfHighest {
    val RequestsCounter = scopedStats.scope("setChallengeUserPointIfHighest").counter("requests")
    val SuccessCounter = scopedStats.scope("setChallengeUserPointIfHighest").counter("success")
    val FailuresCounter = scopedStats.scope("setChallengeUserPointIfHighest").counter("failures")
    val FailuresScope = scopedStats.scope("setChallengeUserPointIfHighest").scope("failures")
  }
  val setChallengeUserPointIfHighestTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, SetChallengeUserPointIfHighest.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("setChallengeUserPointIfHighest"))
        }
      }
    }
  }
  
  def setChallengeUserPointIfHighest(gameId: String, username: String, pointInfo: xed.leaderboard.domain.thrift.TPointInfo): Future[Boolean] = {
    __stats_setChallengeUserPointIfHighest.RequestsCounter.incr()
    val inputArgs = SetChallengeUserPointIfHighest.Args(gameId, username, pointInfo)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, setChallengeUserPointIfHighestTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("setChallengeUserPointIfHighest", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_setChallengeUserPointIfHighest.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_setChallengeUserPointIfHighest.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_setChallengeUserPointIfHighest.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_setChallengeUserPointsIfHighest {
    val RequestsCounter = scopedStats.scope("setChallengeUserPointsIfHighest").counter("requests")
    val SuccessCounter = scopedStats.scope("setChallengeUserPointsIfHighest").counter("success")
    val FailuresCounter = scopedStats.scope("setChallengeUserPointsIfHighest").counter("failures")
    val FailuresScope = scopedStats.scope("setChallengeUserPointsIfHighest").scope("failures")
  }
  val setChallengeUserPointsIfHighestTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, SetChallengeUserPointsIfHighest.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("setChallengeUserPointsIfHighest"))
        }
      }
    }
  }
  
  def setChallengeUserPointsIfHighest(gameId: String, userPoints: Map[String, xed.leaderboard.domain.thrift.TPointInfo] = Map[String, xed.leaderboard.domain.thrift.TPointInfo]()): Future[Boolean] = {
    __stats_setChallengeUserPointsIfHighest.RequestsCounter.incr()
    val inputArgs = SetChallengeUserPointsIfHighest.Args(gameId, userPoints)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, setChallengeUserPointsIfHighestTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("setChallengeUserPointsIfHighest", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_setChallengeUserPointsIfHighest.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_setChallengeUserPointsIfHighest.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_setChallengeUserPointsIfHighest.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getChallengeUserPoint {
    val RequestsCounter = scopedStats.scope("getChallengeUserPoint").counter("requests")
    val SuccessCounter = scopedStats.scope("getChallengeUserPoint").counter("success")
    val FailuresCounter = scopedStats.scope("getChallengeUserPoint").counter("failures")
    val FailuresScope = scopedStats.scope("getChallengeUserPoint").scope("failures")
  }
  val getChallengeUserPointTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.leaderboard.domain.thrift.TUserPointResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetChallengeUserPoint.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getChallengeUserPoint"))
        }
      }
    }
  }
  
  def getChallengeUserPoint(gameId: String, username: String, leaderboardType: Option[xed.leaderboard.domain.thrift.TLeaderBoardType] = None): Future[xed.leaderboard.domain.thrift.TUserPointResp] = {
    __stats_getChallengeUserPoint.RequestsCounter.incr()
    val inputArgs = GetChallengeUserPoint.Args(gameId, username, leaderboardType)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.leaderboard.domain.thrift.TUserPointResp](inputArgs, getChallengeUserPointTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getChallengeUserPoint", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getChallengeUserPoint.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getChallengeUserPoint.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getChallengeUserPoint.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getChallengeUserPoints {
    val RequestsCounter = scopedStats.scope("getChallengeUserPoints").counter("requests")
    val SuccessCounter = scopedStats.scope("getChallengeUserPoints").counter("success")
    val FailuresCounter = scopedStats.scope("getChallengeUserPoints").counter("failures")
    val FailuresScope = scopedStats.scope("getChallengeUserPoints").scope("failures")
  }
  val getChallengeUserPointsTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.leaderboard.domain.thrift.TMultiGetUserPointResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetChallengeUserPoints.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getChallengeUserPoints"))
        }
      }
    }
  }
  
  def getChallengeUserPoints(gameId: String, usernames: Seq[String] = Seq[String](), leaderboardType: Option[xed.leaderboard.domain.thrift.TLeaderBoardType] = None): Future[xed.leaderboard.domain.thrift.TMultiGetUserPointResp] = {
    __stats_getChallengeUserPoints.RequestsCounter.incr()
    val inputArgs = GetChallengeUserPoints.Args(gameId, usernames, leaderboardType)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.leaderboard.domain.thrift.TMultiGetUserPointResp](inputArgs, getChallengeUserPointsTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getChallengeUserPoints", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getChallengeUserPoints.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getChallengeUserPoints.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getChallengeUserPoints.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_delChallengeUserPoints {
    val RequestsCounter = scopedStats.scope("delChallengeUserPoints").counter("requests")
    val SuccessCounter = scopedStats.scope("delChallengeUserPoints").counter("success")
    val FailuresCounter = scopedStats.scope("delChallengeUserPoints").counter("failures")
    val FailuresScope = scopedStats.scope("delChallengeUserPoints").scope("failures")
  }
  val delChallengeUserPointsTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, DelChallengeUserPoints.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("delChallengeUserPoints"))
        }
      }
    }
  }
  
  def delChallengeUserPoints(gameId: String, usernames: Seq[String] = Seq[String]()): Future[Boolean] = {
    __stats_delChallengeUserPoints.RequestsCounter.incr()
    val inputArgs = DelChallengeUserPoints.Args(gameId, usernames)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, delChallengeUserPointsTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("delChallengeUserPoints", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_delChallengeUserPoints.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_delChallengeUserPoints.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_delChallengeUserPoints.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_delChallengeUserPoint {
    val RequestsCounter = scopedStats.scope("delChallengeUserPoint").counter("requests")
    val SuccessCounter = scopedStats.scope("delChallengeUserPoint").counter("success")
    val FailuresCounter = scopedStats.scope("delChallengeUserPoint").counter("failures")
    val FailuresScope = scopedStats.scope("delChallengeUserPoint").scope("failures")
  }
  val delChallengeUserPointTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, DelChallengeUserPoint.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("delChallengeUserPoint"))
        }
      }
    }
  }
  
  def delChallengeUserPoint(gameId: String, username: String): Future[Boolean] = {
    __stats_delChallengeUserPoint.RequestsCounter.incr()
    val inputArgs = DelChallengeUserPoint.Args(gameId, username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, delChallengeUserPointTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("delChallengeUserPoint", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_delChallengeUserPoint.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_delChallengeUserPoint.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_delChallengeUserPoint.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getSocialLeaderBoard {
    val RequestsCounter = scopedStats.scope("getSocialLeaderBoard").counter("requests")
    val SuccessCounter = scopedStats.scope("getSocialLeaderBoard").counter("success")
    val FailuresCounter = scopedStats.scope("getSocialLeaderBoard").counter("failures")
    val FailuresScope = scopedStats.scope("getSocialLeaderBoard").scope("failures")
  }
  val getSocialLeaderBoardTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.leaderboard.domain.thrift.TLeaderBoard] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetSocialLeaderBoard.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getSocialLeaderBoard"))
        }
      }
    }
  }
  
  def getSocialLeaderBoard(owner: String, from: Int, to: Int): Future[xed.leaderboard.domain.thrift.TLeaderBoard] = {
    __stats_getSocialLeaderBoard.RequestsCounter.incr()
    val inputArgs = GetSocialLeaderBoard.Args(owner, from, to)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.leaderboard.domain.thrift.TLeaderBoard](inputArgs, getSocialLeaderBoardTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getSocialLeaderBoard", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getSocialLeaderBoard.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getSocialLeaderBoard.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getSocialLeaderBoard.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getSocialUserRank {
    val RequestsCounter = scopedStats.scope("getSocialUserRank").counter("requests")
    val SuccessCounter = scopedStats.scope("getSocialUserRank").counter("success")
    val FailuresCounter = scopedStats.scope("getSocialUserRank").counter("failures")
    val FailuresScope = scopedStats.scope("getSocialUserRank").scope("failures")
  }
  val getSocialUserRankTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.leaderboard.domain.thrift.TLeaderBoardItemResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetSocialUserRank.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getSocialUserRank"))
        }
      }
    }
  }
  
  def getSocialUserRank(owner: String, username: String): Future[xed.leaderboard.domain.thrift.TLeaderBoardItemResp] = {
    __stats_getSocialUserRank.RequestsCounter.incr()
    val inputArgs = GetSocialUserRank.Args(owner, username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.leaderboard.domain.thrift.TLeaderBoardItemResp](inputArgs, getSocialUserRankTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getSocialUserRank", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getSocialUserRank.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getSocialUserRank.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getSocialUserRank.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_setSocialFriendList {
    val RequestsCounter = scopedStats.scope("setSocialFriendList").counter("requests")
    val SuccessCounter = scopedStats.scope("setSocialFriendList").counter("success")
    val FailuresCounter = scopedStats.scope("setSocialFriendList").counter("failures")
    val FailuresScope = scopedStats.scope("setSocialFriendList").scope("failures")
  }
  val setSocialFriendListTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, SetSocialFriendList.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("setSocialFriendList"))
        }
      }
    }
  }
  
  def setSocialFriendList(owner: String, friendUserNames: Seq[String] = Seq[String]()): Future[Boolean] = {
    __stats_setSocialFriendList.RequestsCounter.incr()
    val inputArgs = SetSocialFriendList.Args(owner, friendUserNames)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, setSocialFriendListTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("setSocialFriendList", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_setSocialFriendList.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_setSocialFriendList.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_setSocialFriendList.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_addSocialFriend {
    val RequestsCounter = scopedStats.scope("addSocialFriend").counter("requests")
    val SuccessCounter = scopedStats.scope("addSocialFriend").counter("success")
    val FailuresCounter = scopedStats.scope("addSocialFriend").counter("failures")
    val FailuresScope = scopedStats.scope("addSocialFriend").scope("failures")
  }
  val addSocialFriendTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, AddSocialFriend.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("addSocialFriend"))
        }
      }
    }
  }
  
  def addSocialFriend(owner: String, username: String): Future[Boolean] = {
    __stats_addSocialFriend.RequestsCounter.incr()
    val inputArgs = AddSocialFriend.Args(owner, username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, addSocialFriendTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("addSocialFriend", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_addSocialFriend.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_addSocialFriend.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_addSocialFriend.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_removeSocialFriend {
    val RequestsCounter = scopedStats.scope("removeSocialFriend").counter("requests")
    val SuccessCounter = scopedStats.scope("removeSocialFriend").counter("success")
    val FailuresCounter = scopedStats.scope("removeSocialFriend").counter("failures")
    val FailuresScope = scopedStats.scope("removeSocialFriend").scope("failures")
  }
  val removeSocialFriendTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, RemoveSocialFriend.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("removeSocialFriend"))
        }
      }
    }
  }
  
  def removeSocialFriend(owner: String, username: String): Future[Boolean] = {
    __stats_removeSocialFriend.RequestsCounter.incr()
    val inputArgs = RemoveSocialFriend.Args(owner, username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, removeSocialFriendTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("removeSocialFriend", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_removeSocialFriend.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_removeSocialFriend.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_removeSocialFriend.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_setSocialUserPoint {
    val RequestsCounter = scopedStats.scope("setSocialUserPoint").counter("requests")
    val SuccessCounter = scopedStats.scope("setSocialUserPoint").counter("success")
    val FailuresCounter = scopedStats.scope("setSocialUserPoint").counter("failures")
    val FailuresScope = scopedStats.scope("setSocialUserPoint").scope("failures")
  }
  val setSocialUserPointTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, SetSocialUserPoint.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("setSocialUserPoint"))
        }
      }
    }
  }
  
  def setSocialUserPoint(username: String, pointInfo: xed.leaderboard.domain.thrift.TPointInfo): Future[Boolean] = {
    __stats_setSocialUserPoint.RequestsCounter.incr()
    val inputArgs = SetSocialUserPoint.Args(username, pointInfo)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, setSocialUserPointTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("setSocialUserPoint", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_setSocialUserPoint.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_setSocialUserPoint.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_setSocialUserPoint.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_setSocialUserPoints {
    val RequestsCounter = scopedStats.scope("setSocialUserPoints").counter("requests")
    val SuccessCounter = scopedStats.scope("setSocialUserPoints").counter("success")
    val FailuresCounter = scopedStats.scope("setSocialUserPoints").counter("failures")
    val FailuresScope = scopedStats.scope("setSocialUserPoints").scope("failures")
  }
  val setSocialUserPointsTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, SetSocialUserPoints.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("setSocialUserPoints"))
        }
      }
    }
  }
  
  def setSocialUserPoints(userPoints: Map[String, xed.leaderboard.domain.thrift.TPointInfo] = Map[String, xed.leaderboard.domain.thrift.TPointInfo]()): Future[Boolean] = {
    __stats_setSocialUserPoints.RequestsCounter.incr()
    val inputArgs = SetSocialUserPoints.Args(userPoints)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, setSocialUserPointsTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("setSocialUserPoints", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_setSocialUserPoints.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_setSocialUserPoints.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_setSocialUserPoints.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getSocialUserPoint {
    val RequestsCounter = scopedStats.scope("getSocialUserPoint").counter("requests")
    val SuccessCounter = scopedStats.scope("getSocialUserPoint").counter("success")
    val FailuresCounter = scopedStats.scope("getSocialUserPoint").counter("failures")
    val FailuresScope = scopedStats.scope("getSocialUserPoint").scope("failures")
  }
  val getSocialUserPointTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.leaderboard.domain.thrift.TUserPointResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetSocialUserPoint.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getSocialUserPoint"))
        }
      }
    }
  }
  
  def getSocialUserPoint(username: String): Future[xed.leaderboard.domain.thrift.TUserPointResp] = {
    __stats_getSocialUserPoint.RequestsCounter.incr()
    val inputArgs = GetSocialUserPoint.Args(username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.leaderboard.domain.thrift.TUserPointResp](inputArgs, getSocialUserPointTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getSocialUserPoint", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getSocialUserPoint.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getSocialUserPoint.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getSocialUserPoint.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getSocialUserPoints {
    val RequestsCounter = scopedStats.scope("getSocialUserPoints").counter("requests")
    val SuccessCounter = scopedStats.scope("getSocialUserPoints").counter("success")
    val FailuresCounter = scopedStats.scope("getSocialUserPoints").counter("failures")
    val FailuresScope = scopedStats.scope("getSocialUserPoints").scope("failures")
  }
  val getSocialUserPointsTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[xed.leaderboard.domain.thrift.TMultiGetUserPointResp] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetSocialUserPoints.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getSocialUserPoints"))
        }
      }
    }
  }
  
  def getSocialUserPoints(usernames: Seq[String] = Seq[String]()): Future[xed.leaderboard.domain.thrift.TMultiGetUserPointResp] = {
    __stats_getSocialUserPoints.RequestsCounter.incr()
    val inputArgs = GetSocialUserPoints.Args(usernames)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[xed.leaderboard.domain.thrift.TMultiGetUserPointResp](inputArgs, getSocialUserPointsTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("getSocialUserPoints", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getSocialUserPoints.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getSocialUserPoints.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_getSocialUserPoints.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_delSocialUserPoint {
    val RequestsCounter = scopedStats.scope("delSocialUserPoint").counter("requests")
    val SuccessCounter = scopedStats.scope("delSocialUserPoint").counter("success")
    val FailuresCounter = scopedStats.scope("delSocialUserPoint").counter("failures")
    val FailuresScope = scopedStats.scope("delSocialUserPoint").scope("failures")
  }
  val delSocialUserPointTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, DelSocialUserPoint.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("delSocialUserPoint"))
        }
      }
    }
  }
  
  def delSocialUserPoint(username: String): Future[Boolean] = {
    __stats_delSocialUserPoint.RequestsCounter.incr()
    val inputArgs = DelSocialUserPoint.Args(username)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, delSocialUserPointTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("delSocialUserPoint", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_delSocialUserPoint.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_delSocialUserPoint.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_delSocialUserPoint.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_delSocialUserPoints {
    val RequestsCounter = scopedStats.scope("delSocialUserPoints").counter("requests")
    val SuccessCounter = scopedStats.scope("delSocialUserPoints").counter("success")
    val FailuresCounter = scopedStats.scope("delSocialUserPoints").counter("failures")
    val FailuresScope = scopedStats.scope("delSocialUserPoints").scope("failures")
  }
  val delSocialUserPointsTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, DelSocialUserPoints.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("delSocialUserPoints"))
        }
      }
    }
  }
  
  def delSocialUserPoints(usernames: Seq[String] = Seq[String]()): Future[Boolean] = {
    __stats_delSocialUserPoints.RequestsCounter.incr()
    val inputArgs = DelSocialUserPoints.Args(usernames)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, delSocialUserPointsTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("delSocialUserPoints", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_delSocialUserPoints.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_delSocialUserPoints.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_delSocialUserPoints.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_setUserProfile {
    val RequestsCounter = scopedStats.scope("setUserProfile").counter("requests")
    val SuccessCounter = scopedStats.scope("setUserProfile").counter("success")
    val FailuresCounter = scopedStats.scope("setUserProfile").counter("failures")
    val FailuresScope = scopedStats.scope("setUserProfile").scope("failures")
  }
  val setUserProfileTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, SetUserProfile.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("setUserProfile"))
        }
      }
    }
  }
  
  def setUserProfile(userProfile: xed.leaderboard.domain.thrift.TShortUserProfile): Future[Boolean] = {
    __stats_setUserProfile.RequestsCounter.incr()
    val inputArgs = SetUserProfile.Args(userProfile)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, setUserProfileTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("setUserProfile", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_setUserProfile.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_setUserProfile.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_setUserProfile.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_setUserProfiles {
    val RequestsCounter = scopedStats.scope("setUserProfiles").counter("requests")
    val SuccessCounter = scopedStats.scope("setUserProfiles").counter("success")
    val FailuresCounter = scopedStats.scope("setUserProfiles").counter("failures")
    val FailuresScope = scopedStats.scope("setUserProfiles").scope("failures")
  }
  val setUserProfilesTLeaderBoardMWServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Boolean] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, SetUserProfiles.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("setUserProfiles"))
        }
      }
    }
  }
  
  def setUserProfiles(userProfiles: Seq[xed.leaderboard.domain.thrift.TShortUserProfile] = Seq[xed.leaderboard.domain.thrift.TShortUserProfile]()): Future[Boolean] = {
    __stats_setUserProfiles.RequestsCounter.incr()
    val inputArgs = SetUserProfiles.Args(userProfiles)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.DeserializeCtx[Boolean](inputArgs, setUserProfilesTLeaderBoardMWServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.DeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      val serialized = encodeRequest("setUserProfiles", inputArgs)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            __stats_setUserProfiles.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_setUserProfiles.FailuresCounter.incr()
            response match {
              case Throw(ex) =>
                setServiceName(ex)
                __stats_setUserProfiles.FailuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
}
