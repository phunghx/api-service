/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.leaderboard_mw.service

import com.twitter.finagle.{
  service => ctfs,
  Filter => finagle$Filter,
  Service => finagle$Service,
  thrift => _,
  _
}
import com.twitter.finagle.stats.{Counter, NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.RichServerParam
import com.twitter.io.Buf
import com.twitter.scrooge._
import com.twitter.util.{Future, Return, Throw, Throwables}
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryInputTransport
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, HashMap => mutable$HashMap}
import scala.collection.{Map, Set}

import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class TLeaderBoardMWService$FinagleService(
  iface: TLeaderBoardMWService[Future],
  serverParam: RichServerParam
) extends com.twitter.finagle.Service[Array[Byte], Array[Byte]] {
  import TLeaderBoardMWService._

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: TLeaderBoardMWService[Future],
    protocolFactory: TProtocolFactory,
    stats: StatsReceiver = NullStatsReceiver,
    maxThriftBufferSize: Int = Thrift.param.maxThriftBufferSize,
    serviceName: String = "TLeaderBoardMWService"
  ) = this(iface, RichServerParam(protocolFactory, serviceName, maxThriftBufferSize, stats))

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: TLeaderBoardMWService[Future],
    protocolFactory: TProtocolFactory,
    stats: StatsReceiver,
    maxThriftBufferSize: Int
  ) = this(iface, protocolFactory, stats, maxThriftBufferSize, "TLeaderBoardMWService")

  @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
  def this(
    iface: TLeaderBoardMWService[Future],
    protocolFactory: TProtocolFactory
  ) = this(iface, protocolFactory, NullStatsReceiver, Thrift.param.maxThriftBufferSize)

  def serviceName: String = serverParam.serviceName
  private[this] def responseClassifier: ctfs.ResponseClassifier = serverParam.responseClassifier
  private[this] def stats: StatsReceiver = serverParam.serverStats

  private[this] def protocolFactory: TProtocolFactory = serverParam.restrictedProtocolFactory
  private[this] def maxReusableBufferSize: Int = serverParam.maxThriftBufferSize

  private[this] val tlReusableBuffer = TReusableBuffer(maxThriftBufferSize = maxReusableBufferSize)

  protected val serviceMap = new mutable$HashMap[String, finagle$Service[(TProtocol, Int), Array[Byte]]]()

  protected def addService(name: String, service: finagle$Service[(TProtocol, Int), Array[Byte]]): Unit = {
    serviceMap(name) = service
  }

  final protected def exception(name: String, seqid: Int, code: Int, message: String): Buf = {
    val x = new TApplicationException(code, message)
    val memoryBuffer = tlReusableBuffer.get()
    try {
      val oprot = protocolFactory.getProtocol(memoryBuffer)

      oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid))
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.getTransport().flush()

      // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
      Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
    } finally {
      tlReusableBuffer.reset()
    }
  }

  final protected def reply(name: String, seqid: Int, result: ThriftStruct): Buf = {
    val memoryBuffer = tlReusableBuffer.get()
    try {
      val oprot = protocolFactory.getProtocol(memoryBuffer)

      oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid))
      result.write(oprot)
      oprot.writeMessageEnd()
      oprot.getTransport().flush()

      // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
      Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
    } finally {
      tlReusableBuffer.reset()
    }
  }

  final def apply(request: Array[Byte]): Future[Array[Byte]] = {
    val inputTransport = new TMemoryInputTransport(request)
    val iprot = protocolFactory.getProtocol(inputTransport)

    try {
      val msg = iprot.readMessageBegin()
      val service = serviceMap.get(msg.name)
      service match {
        case _root_.scala.Some(svc) =>
          svc(iprot, msg.seqid)
        case _ =>
          TProtocolUtil.skip(iprot, TType.STRUCT)
          Future.value(Buf.ByteArray.Owned.extract(
            exception(msg.name, msg.seqid, TApplicationException.UNKNOWN_METHOD,
              "Invalid method name: '" + msg.name + "'")))
      }
    } catch {
      case e: Exception => Future.exception(e)
    }
  }

  private object ThriftMethodStats {
    def apply(stats: StatsReceiver): ThriftMethodStats =
      ThriftMethodStats(
        stats.counter("requests"),
        stats.counter("success"),
        stats.counter("failures"),
        stats.scope("failures")
      )
  }

  private case class ThriftMethodStats(
    requestsCounter: Counter,
    successCounter: Counter,
    failuresCounter: Counter,
    failuresScope: StatsReceiver
  )

  private def missingResult(name: String): TApplicationException = {
    new TApplicationException(
      TApplicationException.MISSING_RESULT,
      name + " failed: unknown result"
    )
  }

  private def setServiceName(ex: Throwable): Throwable =
    if (this.serviceName == "") ex
    else {
      ex match {
        case se: SourcedException =>
          se.serviceName = this.serviceName
          se
        case _ => ex
      }
    }

  private def recordResponse(reqRep: ctfs.ReqRep, methodStats: ThriftMethodStats): Unit = {
    val responseClass = responseClassifier.applyOrElse(reqRep, ctfs.ResponseClassifier.Default)
    responseClass match {
      case ctfs.ResponseClass.Successful(_) =>
        methodStats.successCounter.incr()
      case ctfs.ResponseClass.Failed(_) =>
        methodStats.failuresCounter.incr()
        reqRep.response match {
          case Throw(ex) =>
            methodStats.failuresScope.counter(Throwables.mkString(ex): _*).incr()
          case _ =>
        }
    }
  }

  final protected def perMethodStatsFilter(
    method: ThriftMethod
  ): finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] = {
    val methodStats = ThriftMethodStats((if (serviceName != "") stats.scope(serviceName) else stats).scope(method.name))
    new finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] {
      def apply(
        req: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[method.Args, method.Result]]
      ): Future[Array[Byte]] = {
        methodStats.requestsCounter.incr()
        service(req).transform {
          case Return(value) =>
            value match {
              case SuccessfulResponse(req, _, result) =>
                recordResponse(ctfs.ReqRep(req, _root_.com.twitter.util.Return(result.successField.get)), methodStats)
              case ProtocolExceptionResponse(req, _, exp) =>
                recordResponse(ctfs.ReqRep(req, _root_.com.twitter.util.Throw(exp)), methodStats)
              case ThriftExceptionResponse(req, _, ex) =>
                val rep = ex match {
                  case exp: ThriftException => setServiceName(exp)
                  case _ => missingResult(serviceName)
                }
                recordResponse(ctfs.ReqRep(req, _root_.com.twitter.util.Throw(rep)), methodStats)
            }
            Future.value(Buf.ByteArray.Owned.extract(value.response))
          case t @ Throw(_) =>
            recordResponse(ctfs.ReqRep(req, t), methodStats)
            Future.const(t.cast[Array[Byte]])
        }
      }
    }
  }
  // ---- end boilerplate.

  addService("ping", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[Ping.Args, Ping.Result]] = perMethodStatsFilter(Ping)
  
    val methodService = new finagle$Service[Ping.Args, Ping.SuccessType] {
      def apply(args: Ping.Args): Future[Ping.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("ping")
        }
        iface.ping()
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[Ping.Args, Ping.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[Ping.Args, Ping.Result]]
      ): Future[RichResponse[Ping.Args, Ping.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("ping", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[Ping.Args, Ping.Result], Ping.Args, Ping.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[Ping.Args, Ping.SuccessType]
      ): Future[RichResponse[Ping.Args, Ping.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = Ping.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = Ping.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("ping", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[Ping.Args, Ping.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getChallengeLeaderBoard", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetChallengeLeaderBoard.Args, GetChallengeLeaderBoard.Result]] = perMethodStatsFilter(GetChallengeLeaderBoard)
  
    val methodService = new finagle$Service[GetChallengeLeaderBoard.Args, GetChallengeLeaderBoard.SuccessType] {
      def apply(args: GetChallengeLeaderBoard.Args): Future[GetChallengeLeaderBoard.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getChallengeLeaderBoard")
        }
        iface.getChallengeLeaderBoard(args.gameId, args.myUsername, args.from, args.to, args.onlyFriendFromSocial, args.leaderboardType)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetChallengeLeaderBoard.Args, GetChallengeLeaderBoard.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetChallengeLeaderBoard.Args, GetChallengeLeaderBoard.Result]]
      ): Future[RichResponse[GetChallengeLeaderBoard.Args, GetChallengeLeaderBoard.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getChallengeLeaderBoard", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetChallengeLeaderBoard.Args, GetChallengeLeaderBoard.Result], GetChallengeLeaderBoard.Args, GetChallengeLeaderBoard.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetChallengeLeaderBoard.Args, GetChallengeLeaderBoard.SuccessType]
      ): Future[RichResponse[GetChallengeLeaderBoard.Args, GetChallengeLeaderBoard.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetChallengeLeaderBoard.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetChallengeLeaderBoard.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getChallengeLeaderBoard", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetChallengeLeaderBoard.Args, GetChallengeLeaderBoard.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getChallengeUserRank", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetChallengeUserRank.Args, GetChallengeUserRank.Result]] = perMethodStatsFilter(GetChallengeUserRank)
  
    val methodService = new finagle$Service[GetChallengeUserRank.Args, GetChallengeUserRank.SuccessType] {
      def apply(args: GetChallengeUserRank.Args): Future[GetChallengeUserRank.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getChallengeUserRank")
        }
        iface.getChallengeUserRank(args.gameId, args.username, args.onlyFriendFromSocial, args.leaderboardType)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetChallengeUserRank.Args, GetChallengeUserRank.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetChallengeUserRank.Args, GetChallengeUserRank.Result]]
      ): Future[RichResponse[GetChallengeUserRank.Args, GetChallengeUserRank.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getChallengeUserRank", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetChallengeUserRank.Args, GetChallengeUserRank.Result], GetChallengeUserRank.Args, GetChallengeUserRank.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetChallengeUserRank.Args, GetChallengeUserRank.SuccessType]
      ): Future[RichResponse[GetChallengeUserRank.Args, GetChallengeUserRank.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetChallengeUserRank.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetChallengeUserRank.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getChallengeUserRank", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetChallengeUserRank.Args, GetChallengeUserRank.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("setChallengeUserPoint", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SetChallengeUserPoint.Args, SetChallengeUserPoint.Result]] = perMethodStatsFilter(SetChallengeUserPoint)
  
    val methodService = new finagle$Service[SetChallengeUserPoint.Args, SetChallengeUserPoint.SuccessType] {
      def apply(args: SetChallengeUserPoint.Args): Future[SetChallengeUserPoint.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("setChallengeUserPoint")
        }
        iface.setChallengeUserPoint(args.gameId, args.username, args.pointInfo)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SetChallengeUserPoint.Args, SetChallengeUserPoint.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[SetChallengeUserPoint.Args, SetChallengeUserPoint.Result]]
      ): Future[RichResponse[SetChallengeUserPoint.Args, SetChallengeUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("setChallengeUserPoint", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SetChallengeUserPoint.Args, SetChallengeUserPoint.Result], SetChallengeUserPoint.Args, SetChallengeUserPoint.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[SetChallengeUserPoint.Args, SetChallengeUserPoint.SuccessType]
      ): Future[RichResponse[SetChallengeUserPoint.Args, SetChallengeUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = SetChallengeUserPoint.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = SetChallengeUserPoint.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("setChallengeUserPoint", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[SetChallengeUserPoint.Args, SetChallengeUserPoint.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("setChallengeUserPoints", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SetChallengeUserPoints.Args, SetChallengeUserPoints.Result]] = perMethodStatsFilter(SetChallengeUserPoints)
  
    val methodService = new finagle$Service[SetChallengeUserPoints.Args, SetChallengeUserPoints.SuccessType] {
      def apply(args: SetChallengeUserPoints.Args): Future[SetChallengeUserPoints.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("setChallengeUserPoints")
        }
        iface.setChallengeUserPoints(args.gameId, args.userPoints)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SetChallengeUserPoints.Args, SetChallengeUserPoints.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[SetChallengeUserPoints.Args, SetChallengeUserPoints.Result]]
      ): Future[RichResponse[SetChallengeUserPoints.Args, SetChallengeUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("setChallengeUserPoints", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SetChallengeUserPoints.Args, SetChallengeUserPoints.Result], SetChallengeUserPoints.Args, SetChallengeUserPoints.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[SetChallengeUserPoints.Args, SetChallengeUserPoints.SuccessType]
      ): Future[RichResponse[SetChallengeUserPoints.Args, SetChallengeUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = SetChallengeUserPoints.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = SetChallengeUserPoints.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("setChallengeUserPoints", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[SetChallengeUserPoints.Args, SetChallengeUserPoints.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("setChallengeUserPointIfHighest", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SetChallengeUserPointIfHighest.Args, SetChallengeUserPointIfHighest.Result]] = perMethodStatsFilter(SetChallengeUserPointIfHighest)
  
    val methodService = new finagle$Service[SetChallengeUserPointIfHighest.Args, SetChallengeUserPointIfHighest.SuccessType] {
      def apply(args: SetChallengeUserPointIfHighest.Args): Future[SetChallengeUserPointIfHighest.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("setChallengeUserPointIfHighest")
        }
        iface.setChallengeUserPointIfHighest(args.gameId, args.username, args.pointInfo)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SetChallengeUserPointIfHighest.Args, SetChallengeUserPointIfHighest.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[SetChallengeUserPointIfHighest.Args, SetChallengeUserPointIfHighest.Result]]
      ): Future[RichResponse[SetChallengeUserPointIfHighest.Args, SetChallengeUserPointIfHighest.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("setChallengeUserPointIfHighest", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SetChallengeUserPointIfHighest.Args, SetChallengeUserPointIfHighest.Result], SetChallengeUserPointIfHighest.Args, SetChallengeUserPointIfHighest.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[SetChallengeUserPointIfHighest.Args, SetChallengeUserPointIfHighest.SuccessType]
      ): Future[RichResponse[SetChallengeUserPointIfHighest.Args, SetChallengeUserPointIfHighest.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = SetChallengeUserPointIfHighest.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = SetChallengeUserPointIfHighest.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("setChallengeUserPointIfHighest", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[SetChallengeUserPointIfHighest.Args, SetChallengeUserPointIfHighest.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("setChallengeUserPointsIfHighest", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SetChallengeUserPointsIfHighest.Args, SetChallengeUserPointsIfHighest.Result]] = perMethodStatsFilter(SetChallengeUserPointsIfHighest)
  
    val methodService = new finagle$Service[SetChallengeUserPointsIfHighest.Args, SetChallengeUserPointsIfHighest.SuccessType] {
      def apply(args: SetChallengeUserPointsIfHighest.Args): Future[SetChallengeUserPointsIfHighest.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("setChallengeUserPointsIfHighest")
        }
        iface.setChallengeUserPointsIfHighest(args.gameId, args.userPoints)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SetChallengeUserPointsIfHighest.Args, SetChallengeUserPointsIfHighest.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[SetChallengeUserPointsIfHighest.Args, SetChallengeUserPointsIfHighest.Result]]
      ): Future[RichResponse[SetChallengeUserPointsIfHighest.Args, SetChallengeUserPointsIfHighest.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("setChallengeUserPointsIfHighest", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SetChallengeUserPointsIfHighest.Args, SetChallengeUserPointsIfHighest.Result], SetChallengeUserPointsIfHighest.Args, SetChallengeUserPointsIfHighest.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[SetChallengeUserPointsIfHighest.Args, SetChallengeUserPointsIfHighest.SuccessType]
      ): Future[RichResponse[SetChallengeUserPointsIfHighest.Args, SetChallengeUserPointsIfHighest.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = SetChallengeUserPointsIfHighest.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = SetChallengeUserPointsIfHighest.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("setChallengeUserPointsIfHighest", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[SetChallengeUserPointsIfHighest.Args, SetChallengeUserPointsIfHighest.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getChallengeUserPoint", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetChallengeUserPoint.Args, GetChallengeUserPoint.Result]] = perMethodStatsFilter(GetChallengeUserPoint)
  
    val methodService = new finagle$Service[GetChallengeUserPoint.Args, GetChallengeUserPoint.SuccessType] {
      def apply(args: GetChallengeUserPoint.Args): Future[GetChallengeUserPoint.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getChallengeUserPoint")
        }
        iface.getChallengeUserPoint(args.gameId, args.username, args.leaderboardType)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetChallengeUserPoint.Args, GetChallengeUserPoint.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetChallengeUserPoint.Args, GetChallengeUserPoint.Result]]
      ): Future[RichResponse[GetChallengeUserPoint.Args, GetChallengeUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getChallengeUserPoint", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetChallengeUserPoint.Args, GetChallengeUserPoint.Result], GetChallengeUserPoint.Args, GetChallengeUserPoint.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetChallengeUserPoint.Args, GetChallengeUserPoint.SuccessType]
      ): Future[RichResponse[GetChallengeUserPoint.Args, GetChallengeUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetChallengeUserPoint.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetChallengeUserPoint.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getChallengeUserPoint", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetChallengeUserPoint.Args, GetChallengeUserPoint.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getChallengeUserPoints", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetChallengeUserPoints.Args, GetChallengeUserPoints.Result]] = perMethodStatsFilter(GetChallengeUserPoints)
  
    val methodService = new finagle$Service[GetChallengeUserPoints.Args, GetChallengeUserPoints.SuccessType] {
      def apply(args: GetChallengeUserPoints.Args): Future[GetChallengeUserPoints.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getChallengeUserPoints")
        }
        iface.getChallengeUserPoints(args.gameId, args.usernames, args.leaderboardType)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetChallengeUserPoints.Args, GetChallengeUserPoints.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetChallengeUserPoints.Args, GetChallengeUserPoints.Result]]
      ): Future[RichResponse[GetChallengeUserPoints.Args, GetChallengeUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getChallengeUserPoints", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetChallengeUserPoints.Args, GetChallengeUserPoints.Result], GetChallengeUserPoints.Args, GetChallengeUserPoints.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetChallengeUserPoints.Args, GetChallengeUserPoints.SuccessType]
      ): Future[RichResponse[GetChallengeUserPoints.Args, GetChallengeUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetChallengeUserPoints.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetChallengeUserPoints.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getChallengeUserPoints", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetChallengeUserPoints.Args, GetChallengeUserPoints.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("delChallengeUserPoints", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[DelChallengeUserPoints.Args, DelChallengeUserPoints.Result]] = perMethodStatsFilter(DelChallengeUserPoints)
  
    val methodService = new finagle$Service[DelChallengeUserPoints.Args, DelChallengeUserPoints.SuccessType] {
      def apply(args: DelChallengeUserPoints.Args): Future[DelChallengeUserPoints.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("delChallengeUserPoints")
        }
        iface.delChallengeUserPoints(args.gameId, args.usernames)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[DelChallengeUserPoints.Args, DelChallengeUserPoints.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[DelChallengeUserPoints.Args, DelChallengeUserPoints.Result]]
      ): Future[RichResponse[DelChallengeUserPoints.Args, DelChallengeUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("delChallengeUserPoints", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[DelChallengeUserPoints.Args, DelChallengeUserPoints.Result], DelChallengeUserPoints.Args, DelChallengeUserPoints.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[DelChallengeUserPoints.Args, DelChallengeUserPoints.SuccessType]
      ): Future[RichResponse[DelChallengeUserPoints.Args, DelChallengeUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = DelChallengeUserPoints.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = DelChallengeUserPoints.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("delChallengeUserPoints", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[DelChallengeUserPoints.Args, DelChallengeUserPoints.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("delChallengeUserPoint", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[DelChallengeUserPoint.Args, DelChallengeUserPoint.Result]] = perMethodStatsFilter(DelChallengeUserPoint)
  
    val methodService = new finagle$Service[DelChallengeUserPoint.Args, DelChallengeUserPoint.SuccessType] {
      def apply(args: DelChallengeUserPoint.Args): Future[DelChallengeUserPoint.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("delChallengeUserPoint")
        }
        iface.delChallengeUserPoint(args.gameId, args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[DelChallengeUserPoint.Args, DelChallengeUserPoint.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[DelChallengeUserPoint.Args, DelChallengeUserPoint.Result]]
      ): Future[RichResponse[DelChallengeUserPoint.Args, DelChallengeUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("delChallengeUserPoint", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[DelChallengeUserPoint.Args, DelChallengeUserPoint.Result], DelChallengeUserPoint.Args, DelChallengeUserPoint.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[DelChallengeUserPoint.Args, DelChallengeUserPoint.SuccessType]
      ): Future[RichResponse[DelChallengeUserPoint.Args, DelChallengeUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = DelChallengeUserPoint.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = DelChallengeUserPoint.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("delChallengeUserPoint", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[DelChallengeUserPoint.Args, DelChallengeUserPoint.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getSocialLeaderBoard", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetSocialLeaderBoard.Args, GetSocialLeaderBoard.Result]] = perMethodStatsFilter(GetSocialLeaderBoard)
  
    val methodService = new finagle$Service[GetSocialLeaderBoard.Args, GetSocialLeaderBoard.SuccessType] {
      def apply(args: GetSocialLeaderBoard.Args): Future[GetSocialLeaderBoard.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getSocialLeaderBoard")
        }
        iface.getSocialLeaderBoard(args.owner, args.from, args.to)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetSocialLeaderBoard.Args, GetSocialLeaderBoard.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetSocialLeaderBoard.Args, GetSocialLeaderBoard.Result]]
      ): Future[RichResponse[GetSocialLeaderBoard.Args, GetSocialLeaderBoard.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getSocialLeaderBoard", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetSocialLeaderBoard.Args, GetSocialLeaderBoard.Result], GetSocialLeaderBoard.Args, GetSocialLeaderBoard.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetSocialLeaderBoard.Args, GetSocialLeaderBoard.SuccessType]
      ): Future[RichResponse[GetSocialLeaderBoard.Args, GetSocialLeaderBoard.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetSocialLeaderBoard.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetSocialLeaderBoard.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getSocialLeaderBoard", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetSocialLeaderBoard.Args, GetSocialLeaderBoard.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getSocialUserRank", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetSocialUserRank.Args, GetSocialUserRank.Result]] = perMethodStatsFilter(GetSocialUserRank)
  
    val methodService = new finagle$Service[GetSocialUserRank.Args, GetSocialUserRank.SuccessType] {
      def apply(args: GetSocialUserRank.Args): Future[GetSocialUserRank.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getSocialUserRank")
        }
        iface.getSocialUserRank(args.owner, args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetSocialUserRank.Args, GetSocialUserRank.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetSocialUserRank.Args, GetSocialUserRank.Result]]
      ): Future[RichResponse[GetSocialUserRank.Args, GetSocialUserRank.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getSocialUserRank", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetSocialUserRank.Args, GetSocialUserRank.Result], GetSocialUserRank.Args, GetSocialUserRank.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetSocialUserRank.Args, GetSocialUserRank.SuccessType]
      ): Future[RichResponse[GetSocialUserRank.Args, GetSocialUserRank.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetSocialUserRank.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetSocialUserRank.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getSocialUserRank", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetSocialUserRank.Args, GetSocialUserRank.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("setSocialFriendList", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SetSocialFriendList.Args, SetSocialFriendList.Result]] = perMethodStatsFilter(SetSocialFriendList)
  
    val methodService = new finagle$Service[SetSocialFriendList.Args, SetSocialFriendList.SuccessType] {
      def apply(args: SetSocialFriendList.Args): Future[SetSocialFriendList.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("setSocialFriendList")
        }
        iface.setSocialFriendList(args.owner, args.friendUserNames)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SetSocialFriendList.Args, SetSocialFriendList.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[SetSocialFriendList.Args, SetSocialFriendList.Result]]
      ): Future[RichResponse[SetSocialFriendList.Args, SetSocialFriendList.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("setSocialFriendList", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SetSocialFriendList.Args, SetSocialFriendList.Result], SetSocialFriendList.Args, SetSocialFriendList.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[SetSocialFriendList.Args, SetSocialFriendList.SuccessType]
      ): Future[RichResponse[SetSocialFriendList.Args, SetSocialFriendList.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = SetSocialFriendList.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = SetSocialFriendList.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("setSocialFriendList", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[SetSocialFriendList.Args, SetSocialFriendList.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("addSocialFriend", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[AddSocialFriend.Args, AddSocialFriend.Result]] = perMethodStatsFilter(AddSocialFriend)
  
    val methodService = new finagle$Service[AddSocialFriend.Args, AddSocialFriend.SuccessType] {
      def apply(args: AddSocialFriend.Args): Future[AddSocialFriend.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("addSocialFriend")
        }
        iface.addSocialFriend(args.owner, args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[AddSocialFriend.Args, AddSocialFriend.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[AddSocialFriend.Args, AddSocialFriend.Result]]
      ): Future[RichResponse[AddSocialFriend.Args, AddSocialFriend.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("addSocialFriend", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[AddSocialFriend.Args, AddSocialFriend.Result], AddSocialFriend.Args, AddSocialFriend.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[AddSocialFriend.Args, AddSocialFriend.SuccessType]
      ): Future[RichResponse[AddSocialFriend.Args, AddSocialFriend.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = AddSocialFriend.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = AddSocialFriend.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("addSocialFriend", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[AddSocialFriend.Args, AddSocialFriend.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("removeSocialFriend", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[RemoveSocialFriend.Args, RemoveSocialFriend.Result]] = perMethodStatsFilter(RemoveSocialFriend)
  
    val methodService = new finagle$Service[RemoveSocialFriend.Args, RemoveSocialFriend.SuccessType] {
      def apply(args: RemoveSocialFriend.Args): Future[RemoveSocialFriend.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("removeSocialFriend")
        }
        iface.removeSocialFriend(args.owner, args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[RemoveSocialFriend.Args, RemoveSocialFriend.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[RemoveSocialFriend.Args, RemoveSocialFriend.Result]]
      ): Future[RichResponse[RemoveSocialFriend.Args, RemoveSocialFriend.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("removeSocialFriend", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[RemoveSocialFriend.Args, RemoveSocialFriend.Result], RemoveSocialFriend.Args, RemoveSocialFriend.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[RemoveSocialFriend.Args, RemoveSocialFriend.SuccessType]
      ): Future[RichResponse[RemoveSocialFriend.Args, RemoveSocialFriend.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = RemoveSocialFriend.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = RemoveSocialFriend.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("removeSocialFriend", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[RemoveSocialFriend.Args, RemoveSocialFriend.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("setSocialUserPoint", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SetSocialUserPoint.Args, SetSocialUserPoint.Result]] = perMethodStatsFilter(SetSocialUserPoint)
  
    val methodService = new finagle$Service[SetSocialUserPoint.Args, SetSocialUserPoint.SuccessType] {
      def apply(args: SetSocialUserPoint.Args): Future[SetSocialUserPoint.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("setSocialUserPoint")
        }
        iface.setSocialUserPoint(args.username, args.pointInfo)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SetSocialUserPoint.Args, SetSocialUserPoint.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[SetSocialUserPoint.Args, SetSocialUserPoint.Result]]
      ): Future[RichResponse[SetSocialUserPoint.Args, SetSocialUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("setSocialUserPoint", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SetSocialUserPoint.Args, SetSocialUserPoint.Result], SetSocialUserPoint.Args, SetSocialUserPoint.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[SetSocialUserPoint.Args, SetSocialUserPoint.SuccessType]
      ): Future[RichResponse[SetSocialUserPoint.Args, SetSocialUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = SetSocialUserPoint.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = SetSocialUserPoint.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("setSocialUserPoint", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[SetSocialUserPoint.Args, SetSocialUserPoint.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("setSocialUserPoints", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SetSocialUserPoints.Args, SetSocialUserPoints.Result]] = perMethodStatsFilter(SetSocialUserPoints)
  
    val methodService = new finagle$Service[SetSocialUserPoints.Args, SetSocialUserPoints.SuccessType] {
      def apply(args: SetSocialUserPoints.Args): Future[SetSocialUserPoints.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("setSocialUserPoints")
        }
        iface.setSocialUserPoints(args.userPoints)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SetSocialUserPoints.Args, SetSocialUserPoints.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[SetSocialUserPoints.Args, SetSocialUserPoints.Result]]
      ): Future[RichResponse[SetSocialUserPoints.Args, SetSocialUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("setSocialUserPoints", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SetSocialUserPoints.Args, SetSocialUserPoints.Result], SetSocialUserPoints.Args, SetSocialUserPoints.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[SetSocialUserPoints.Args, SetSocialUserPoints.SuccessType]
      ): Future[RichResponse[SetSocialUserPoints.Args, SetSocialUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = SetSocialUserPoints.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = SetSocialUserPoints.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("setSocialUserPoints", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[SetSocialUserPoints.Args, SetSocialUserPoints.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getSocialUserPoint", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetSocialUserPoint.Args, GetSocialUserPoint.Result]] = perMethodStatsFilter(GetSocialUserPoint)
  
    val methodService = new finagle$Service[GetSocialUserPoint.Args, GetSocialUserPoint.SuccessType] {
      def apply(args: GetSocialUserPoint.Args): Future[GetSocialUserPoint.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getSocialUserPoint")
        }
        iface.getSocialUserPoint(args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetSocialUserPoint.Args, GetSocialUserPoint.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetSocialUserPoint.Args, GetSocialUserPoint.Result]]
      ): Future[RichResponse[GetSocialUserPoint.Args, GetSocialUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getSocialUserPoint", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetSocialUserPoint.Args, GetSocialUserPoint.Result], GetSocialUserPoint.Args, GetSocialUserPoint.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetSocialUserPoint.Args, GetSocialUserPoint.SuccessType]
      ): Future[RichResponse[GetSocialUserPoint.Args, GetSocialUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetSocialUserPoint.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetSocialUserPoint.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getSocialUserPoint", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetSocialUserPoint.Args, GetSocialUserPoint.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("getSocialUserPoints", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetSocialUserPoints.Args, GetSocialUserPoints.Result]] = perMethodStatsFilter(GetSocialUserPoints)
  
    val methodService = new finagle$Service[GetSocialUserPoints.Args, GetSocialUserPoints.SuccessType] {
      def apply(args: GetSocialUserPoints.Args): Future[GetSocialUserPoints.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("getSocialUserPoints")
        }
        iface.getSocialUserPoints(args.usernames)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetSocialUserPoints.Args, GetSocialUserPoints.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[GetSocialUserPoints.Args, GetSocialUserPoints.Result]]
      ): Future[RichResponse[GetSocialUserPoints.Args, GetSocialUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("getSocialUserPoints", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetSocialUserPoints.Args, GetSocialUserPoints.Result], GetSocialUserPoints.Args, GetSocialUserPoints.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[GetSocialUserPoints.Args, GetSocialUserPoints.SuccessType]
      ): Future[RichResponse[GetSocialUserPoints.Args, GetSocialUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = GetSocialUserPoints.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = GetSocialUserPoints.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("getSocialUserPoints", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[GetSocialUserPoints.Args, GetSocialUserPoints.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("delSocialUserPoint", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[DelSocialUserPoint.Args, DelSocialUserPoint.Result]] = perMethodStatsFilter(DelSocialUserPoint)
  
    val methodService = new finagle$Service[DelSocialUserPoint.Args, DelSocialUserPoint.SuccessType] {
      def apply(args: DelSocialUserPoint.Args): Future[DelSocialUserPoint.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("delSocialUserPoint")
        }
        iface.delSocialUserPoint(args.username)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[DelSocialUserPoint.Args, DelSocialUserPoint.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[DelSocialUserPoint.Args, DelSocialUserPoint.Result]]
      ): Future[RichResponse[DelSocialUserPoint.Args, DelSocialUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("delSocialUserPoint", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[DelSocialUserPoint.Args, DelSocialUserPoint.Result], DelSocialUserPoint.Args, DelSocialUserPoint.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[DelSocialUserPoint.Args, DelSocialUserPoint.SuccessType]
      ): Future[RichResponse[DelSocialUserPoint.Args, DelSocialUserPoint.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = DelSocialUserPoint.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = DelSocialUserPoint.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("delSocialUserPoint", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[DelSocialUserPoint.Args, DelSocialUserPoint.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("delSocialUserPoints", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[DelSocialUserPoints.Args, DelSocialUserPoints.Result]] = perMethodStatsFilter(DelSocialUserPoints)
  
    val methodService = new finagle$Service[DelSocialUserPoints.Args, DelSocialUserPoints.SuccessType] {
      def apply(args: DelSocialUserPoints.Args): Future[DelSocialUserPoints.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("delSocialUserPoints")
        }
        iface.delSocialUserPoints(args.usernames)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[DelSocialUserPoints.Args, DelSocialUserPoints.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[DelSocialUserPoints.Args, DelSocialUserPoints.Result]]
      ): Future[RichResponse[DelSocialUserPoints.Args, DelSocialUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("delSocialUserPoints", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[DelSocialUserPoints.Args, DelSocialUserPoints.Result], DelSocialUserPoints.Args, DelSocialUserPoints.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[DelSocialUserPoints.Args, DelSocialUserPoints.SuccessType]
      ): Future[RichResponse[DelSocialUserPoints.Args, DelSocialUserPoints.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = DelSocialUserPoints.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = DelSocialUserPoints.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("delSocialUserPoints", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[DelSocialUserPoints.Args, DelSocialUserPoints.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("setUserProfile", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SetUserProfile.Args, SetUserProfile.Result]] = perMethodStatsFilter(SetUserProfile)
  
    val methodService = new finagle$Service[SetUserProfile.Args, SetUserProfile.SuccessType] {
      def apply(args: SetUserProfile.Args): Future[SetUserProfile.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("setUserProfile")
        }
        iface.setUserProfile(args.userProfile)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SetUserProfile.Args, SetUserProfile.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[SetUserProfile.Args, SetUserProfile.Result]]
      ): Future[RichResponse[SetUserProfile.Args, SetUserProfile.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("setUserProfile", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SetUserProfile.Args, SetUserProfile.Result], SetUserProfile.Args, SetUserProfile.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[SetUserProfile.Args, SetUserProfile.SuccessType]
      ): Future[RichResponse[SetUserProfile.Args, SetUserProfile.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = SetUserProfile.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = SetUserProfile.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("setUserProfile", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[SetUserProfile.Args, SetUserProfile.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
  addService("setUserProfiles", {
    val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SetUserProfiles.Args, SetUserProfiles.Result]] = perMethodStatsFilter(SetUserProfiles)
  
    val methodService = new finagle$Service[SetUserProfiles.Args, SetUserProfiles.SuccessType] {
      def apply(args: SetUserProfiles.Args): Future[SetUserProfiles.SuccessType] = {
        if (_root_.com.twitter.finagle.tracing.Trace.isActivelyTracing) {
          _root_.com.twitter.finagle.tracing.Trace.recordRpc("setUserProfiles")
        }
        iface.setUserProfiles(args.userProfiles)
      }
    }
  
    val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SetUserProfiles.Args, SetUserProfiles.Result]] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[(TProtocol, Int), RichResponse[SetUserProfiles.Args, SetUserProfiles.Result]]
      ): Future[RichResponse[SetUserProfiles.Args, SetUserProfiles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val res = service(request)
        res.transform {
          case _root_.com.twitter.util.Throw(e: TProtocolException) =>
            iprot.readMessageEnd()
            Future.value(
              ProtocolExceptionResponse(
                null,
                exception("setUserProfiles", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
          case _ =>
            res
        }
      }
    }
  
    val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SetUserProfiles.Args, SetUserProfiles.Result], SetUserProfiles.Args, SetUserProfiles.SuccessType] {
      def apply(
        request: (TProtocol, Int),
        service: finagle$Service[SetUserProfiles.Args, SetUserProfiles.SuccessType]
      ): Future[RichResponse[SetUserProfiles.Args, SetUserProfiles.Result]] = {
        val iprot = request._1
        val seqid = request._2
        val args = SetUserProfiles.Args.decode(iprot)
        iprot.readMessageEnd()
        val res = service(args)
        res.transform {
          case _root_.com.twitter.util.Return(value) =>
            val methodResult = SetUserProfiles.Result(success = Some(value))
            Future.value(
              SuccessfulResponse(
                args,
                reply("setUserProfiles", seqid, methodResult),
                methodResult))
          case t @ _root_.com.twitter.util.Throw(_) =>
            Future.const(t.cast[RichResponse[SetUserProfiles.Args, SetUserProfiles.Result]])
        }
      }
    }
  
    statsFilter.andThen(protocolExnFilter).andThen(serdeFilter).andThen(methodService)
  })
}
