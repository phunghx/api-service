/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.leaderboard.domain.thrift

import com.twitter.scrooge.ThriftEnum
import scala.collection.immutable.{Map => immutable$Map}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object TLeaderBoardType {

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  
  case object Daily extends xed.leaderboard.domain.thrift.TLeaderBoardType {
    val value: Int = 0
    val name: String = "Daily"
    val originalName: String = "Daily"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeDaily = _root_.scala.Some(xed.leaderboard.domain.thrift.TLeaderBoardType.Daily)
  
  case object Weekly extends xed.leaderboard.domain.thrift.TLeaderBoardType {
    val value: Int = 1
    val name: String = "Weekly"
    val originalName: String = "Weekly"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeWeekly = _root_.scala.Some(xed.leaderboard.domain.thrift.TLeaderBoardType.Weekly)
  
  case object AllTime extends xed.leaderboard.domain.thrift.TLeaderBoardType {
    val value: Int = 2
    val name: String = "AllTime"
    val originalName: String = "AllTime"
    val annotations: immutable$Map[String, String] = immutable$Map.empty
  }

  private[this] val _SomeAllTime = _root_.scala.Some(xed.leaderboard.domain.thrift.TLeaderBoardType.AllTime)

  case class EnumUnknownTLeaderBoardType(value: Int) extends xed.leaderboard.domain.thrift.TLeaderBoardType {
    val name: String = "EnumUnknownTLeaderBoardType" + value
    def originalName: String = name
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   */
  def apply(value: Int): xed.leaderboard.domain.thrift.TLeaderBoardType =
    value match {
      case 0 => xed.leaderboard.domain.thrift.TLeaderBoardType.Daily
      case 1 => xed.leaderboard.domain.thrift.TLeaderBoardType.Weekly
      case 2 => xed.leaderboard.domain.thrift.TLeaderBoardType.AllTime
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownTLeaderBoardType(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): xed.leaderboard.domain.thrift.TLeaderBoardType =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownTLeaderBoardType(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardType] =
    value match {
      case 0 => _SomeDaily
      case 1 => _SomeWeekly
      case 2 => _SomeAllTime
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardType] =
    name.toLowerCase match {
      case "daily" => _SomeDaily
      case "weekly" => _SomeWeekly
      case "alltime" => _SomeAllTime
      case _ => _root_.scala.None
    }

  lazy val list: List[xed.leaderboard.domain.thrift.TLeaderBoardType] = scala.List[xed.leaderboard.domain.thrift.TLeaderBoardType](
    xed.leaderboard.domain.thrift.TLeaderBoardType.Daily,
    xed.leaderboard.domain.thrift.TLeaderBoardType.Weekly,
    xed.leaderboard.domain.thrift.TLeaderBoardType.AllTime
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait TLeaderBoardType extends ThriftEnum with Serializable