/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.leaderboard.domain.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TMultiGetUserPointResp extends ValidatingThriftStructCodec3[TMultiGetUserPointResp] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TMultiGetUserPointResp")
  val ExistsField = new TField("exists", TType.BOOL, 1)
  val ExistsFieldManifest = implicitly[Manifest[Boolean]]
  val UserPointsField = new TField("userPoints", TType.MAP, 2)
  val UserPointsFieldManifest = implicitly[Manifest[Map[String, xed.leaderboard.domain.thrift.TPointInfo]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ExistsField,
      false,
      false,
      ExistsFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      UserPointsField,
      true,
      false,
      UserPointsFieldManifest,
      _root_.scala.Some(implicitly[Manifest[String]]),
      _root_.scala.Some(implicitly[Manifest[xed.leaderboard.domain.thrift.TPointInfo]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TMultiGetUserPointResp): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TMultiGetUserPointResp): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.exists)
    buf ++= validateField(item.userPoints)
    buf.toList
  }

  def withoutPassthroughFields(original: TMultiGetUserPointResp): TMultiGetUserPointResp =
    new Immutable(
      exists =
        {
          val field = original.exists
          field
        },
      userPoints =
        {
          val field = original.userPoints
          field.map { field =>
            field.map { case (key, value) =>
                val newKey = {
                val field = key
                field
              }
  
  
                val newValue = {
                val field = value
                xed.leaderboard.domain.thrift.TPointInfo.withoutPassthroughFields(field)
              }
  
  
              newKey -> newValue
            }
          }
        }
    )

  override def encode(_item: TMultiGetUserPointResp, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TMultiGetUserPointResp = {

    var exists: Boolean = false
    var userPoints: Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]] = None

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.BOOL =>
    
                exists = readExistsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'exists' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.MAP =>
    
                userPoints = Some(readUserPointsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'userPoints' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      exists,
      userPoints,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TMultiGetUserPointResp =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TMultiGetUserPointResp = {
    var exists: Boolean = false
    var userPoints: _root_.scala.Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.BOOL =>
                exists = readExistsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.BOOL
                throw new TProtocolException(
                  "Received wrong type for field 'exists' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.MAP =>
                userPoints = _root_.scala.Some(readUserPointsValue(_iprot))
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'userPoints' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      exists,
      userPoints,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    exists: Boolean,
    userPoints: _root_.scala.Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]] = _root_.scala.None
  ): TMultiGetUserPointResp =
    new Immutable(
      exists,
      userPoints
    )

  def unapply(_item: TMultiGetUserPointResp): _root_.scala.Option[_root_.scala.Tuple2[Boolean, Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readExistsValue(_iprot: TProtocol): Boolean = {
    _iprot.readBool()
  }

  @inline private def writeExistsField(exists_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ExistsField)
    writeExistsValue(exists_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeExistsValue(exists_item: Boolean, _oprot: TProtocol): Unit = {
    _oprot.writeBool(exists_item)
  }

  @inline private[thrift] def readUserPointsValue(_iprot: TProtocol): Map[String, xed.leaderboard.domain.thrift.TPointInfo] = {
    val _map = _iprot.readMapBegin()
    if (_map.size == 0) {
      _iprot.readMapEnd()
      Map.empty[String, xed.leaderboard.domain.thrift.TPointInfo]
    } else {
      val _rv = new mutable$HashMap[String, xed.leaderboard.domain.thrift.TPointInfo]
      var _i = 0
      while (_i < _map.size) {
        val _key = {
          _iprot.readString()
        }
        val _value = {
          xed.leaderboard.domain.thrift.TPointInfo.decode(_iprot)
        }
        _rv(_key) = _value
        _i += 1
      }
      _iprot.readMapEnd()
      _rv
    }
  }

  @inline private def writeUserPointsField(userPoints_item: Map[String, xed.leaderboard.domain.thrift.TPointInfo], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UserPointsField)
    writeUserPointsValue(userPoints_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUserPointsValue(userPoints_item: Map[String, xed.leaderboard.domain.thrift.TPointInfo], _oprot: TProtocol): Unit = {
    _oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, userPoints_item.size))
    userPoints_item.foreach { case (userPoints_item_key, userPoints_item_value) =>
      _oprot.writeString(userPoints_item_key)
      userPoints_item_value.write(_oprot)
    }
    _oprot.writeMapEnd()
  }


  object Immutable extends ThriftStructCodec3[TMultiGetUserPointResp] {
    override def encode(_item: TMultiGetUserPointResp, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TMultiGetUserPointResp = TMultiGetUserPointResp.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TMultiGetUserPointResp] = TMultiGetUserPointResp.metaData
  }

  /**
   * The default read-only implementation of TMultiGetUserPointResp.  You typically should not need to
   * directly reference this class; instead, use the TMultiGetUserPointResp.apply method to construct
   * new instances.
   */
  class Immutable(
      val exists: Boolean,
      val userPoints: _root_.scala.Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TMultiGetUserPointResp {
    def this(
      exists: Boolean,
      userPoints: _root_.scala.Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]] = _root_.scala.None
    ) = this(
      exists,
      userPoints,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val exists: Boolean,
      val userPoints: _root_.scala.Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TMultiGetUserPointResp {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TMultiGetUserPointResp trait with additional state or
   * behavior and implement the read-only methods from TMultiGetUserPointResp using an underlying
   * instance.
   */
  trait Proxy extends TMultiGetUserPointResp {
    protected def _underlying_TMultiGetUserPointResp: TMultiGetUserPointResp
    override def exists: Boolean = _underlying_TMultiGetUserPointResp.exists
    override def userPoints: _root_.scala.Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]] = _underlying_TMultiGetUserPointResp.userPoints
    override def _passthroughFields = _underlying_TMultiGetUserPointResp._passthroughFields
  }
}

/**
 * Prefer the companion object's [[xed.leaderboard.domain.thrift.TMultiGetUserPointResp.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TMultiGetUserPointResp
  extends ThriftStruct
  with _root_.scala.Product2[Boolean, Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]]]
  with ValidatingThriftStruct[TMultiGetUserPointResp]
  with java.io.Serializable
{
  import TMultiGetUserPointResp._

  def exists: Boolean
  def userPoints: _root_.scala.Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = exists
  def _2 = userPoints

  def toTuple: _root_.scala.Tuple2[Boolean, Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]]] = {
    (
      exists,
      userPoints
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeExistsValue(exists, _oprot)
                _root_.scala.Some(TMultiGetUserPointResp.ExistsField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (userPoints.isDefined) {
                writeUserPointsValue(userPoints.get, _oprot)
                _root_.scala.Some(TMultiGetUserPointResp.UserPointsField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TMultiGetUserPointResp = {
    var exists: Boolean = this.exists
    var userPoints: _root_.scala.Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]] = this.userPoints
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        exists = readExistsValue(_blob.read)
      case 2 =>
        userPoints = _root_.scala.Some(readUserPointsValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      exists,
      userPoints,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TMultiGetUserPointResp = {
    var exists: Boolean = this.exists
    var userPoints: _root_.scala.Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]] = this.userPoints

    _fieldId match {
      case 1 =>
        exists = false
      case 2 =>
        userPoints = _root_.scala.None
      case _ =>
    }
    new Immutable(
      exists,
      userPoints,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetExists: TMultiGetUserPointResp = unsetField(1)

  def unsetUserPoints: TMultiGetUserPointResp = unsetField(2)


  override def write(_oprot: TProtocol): Unit = {
    TMultiGetUserPointResp.validate(this)
    _oprot.writeStructBegin(Struct)
    writeExistsField(exists, _oprot)
    if (userPoints.isDefined) writeUserPointsField(userPoints.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    exists: Boolean = this.exists,
    userPoints: _root_.scala.Option[Map[String, xed.leaderboard.domain.thrift.TPointInfo]] = this.userPoints,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TMultiGetUserPointResp =
    new Immutable(
      exists,
      userPoints,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TMultiGetUserPointResp]

  private def _equals(x: TMultiGetUserPointResp, y: TMultiGetUserPointResp): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TMultiGetUserPointResp]) &&
      _passthroughFields == other.asInstanceOf[TMultiGetUserPointResp]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => this.exists
    case 1 => this.userPoints
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TMultiGetUserPointResp"

  def _codec: ValidatingThriftStructCodec3[TMultiGetUserPointResp] = TMultiGetUserPointResp
}

