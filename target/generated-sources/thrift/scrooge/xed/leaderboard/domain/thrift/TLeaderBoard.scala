/**
 * Generated by Scrooge
 *   version: 18.4.0
 *   rev: b64bcb47af2451b2e51a1ed1b3876f6c06c642b3
 *   built at: 20180410-144307
 */
package xed.leaderboard.domain.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object TLeaderBoard extends ValidatingThriftStructCodec3[TLeaderBoard] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("TLeaderBoard")
  val GameIdField = new TField("gameId", TType.STRING, 1)
  val GameIdFieldManifest = implicitly[Manifest[String]]
  val TopRankingField = new TField("topRanking", TType.LIST, 2)
  val TopRankingFieldManifest = implicitly[Manifest[Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem]]]
  val MyRankingField = new TField("myRanking", TType.STRUCT, 3)
  val MyRankingFieldManifest = implicitly[Manifest[xed.leaderboard.domain.thrift.TLeaderBoardItem]]
  val TotalField = new TField("total", TType.I32, 4)
  val TotalFieldManifest = implicitly[Manifest[Int]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      GameIdField,
      false,
      true,
      GameIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TopRankingField,
      false,
      true,
      TopRankingFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[xed.leaderboard.domain.thrift.TLeaderBoardItem]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      MyRankingField,
      true,
      false,
      MyRankingFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      TotalField,
      false,
      true,
      TotalFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TLeaderBoard): Unit = {
    if (_item.gameId == null) throw new TProtocolException("Required field gameId cannot be null")
    if (_item.topRanking == null) throw new TProtocolException("Required field topRanking cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TLeaderBoard): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    if (item.gameId == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
    buf ++= validateField(item.gameId)
    if (item.topRanking == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(1))
    buf ++= validateField(item.topRanking)
    buf ++= validateField(item.myRanking)
    buf ++= validateField(item.total)
    buf.toList
  }

  def withoutPassthroughFields(original: TLeaderBoard): TLeaderBoard =
    new Immutable(
      gameId =
        {
          val field = original.gameId
          field
        },
      topRanking =
        {
          val field = original.topRanking
          field.map { field =>
            xed.leaderboard.domain.thrift.TLeaderBoardItem.withoutPassthroughFields(field)
          }
        },
      myRanking =
        {
          val field = original.myRanking
          field.map { field =>
            xed.leaderboard.domain.thrift.TLeaderBoardItem.withoutPassthroughFields(field)
          }
        },
      total =
        {
          val field = original.total
          field
        }
    )

  override def encode(_item: TLeaderBoard, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TLeaderBoard = {

    var gameIdOffset: Int = -1
    var _got_gameId = false
    var topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem] = Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem]()
    var _got_topRanking = false
    var myRanking: Option[xed.leaderboard.domain.thrift.TLeaderBoardItem] = None
    var total: Int = 0
    var _got_total = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                gameIdOffset = _iprot.offsetSkipString
    
                _got_gameId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'gameId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
    
                topRanking = readTopRankingValue(_iprot)
                _got_topRanking = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'topRanking' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                myRanking = Some(readMyRankingValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'myRanking' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
    
                total = readTotalValue(_iprot)
                _got_total = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'total' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_gameId) throw new TProtocolException("Required field 'gameId' was not found in serialized data for struct TLeaderBoard")
    if (!_got_topRanking) throw new TProtocolException("Required field 'topRanking' was not found in serialized data for struct TLeaderBoard")
    if (!_got_total) throw new TProtocolException("Required field 'total' was not found in serialized data for struct TLeaderBoard")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      gameIdOffset,
      topRanking,
      myRanking,
      total,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TLeaderBoard =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TLeaderBoard = {
    var gameId: String = null
    var _got_gameId = false
    var topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem] = Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem]()
    var _got_topRanking = false
    var myRanking: _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardItem] = _root_.scala.None
    var total: Int = 0
    var _got_total = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING =>
                gameId = readGameIdValue(_iprot)
                _got_gameId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'gameId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.LIST =>
                topRanking = readTopRankingValue(_iprot)
                _got_topRanking = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'topRanking' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRUCT =>
                myRanking = _root_.scala.Some(readMyRankingValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'myRanking' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.I32 =>
                total = readTotalValue(_iprot)
                _got_total = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'total' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_gameId) throw new TProtocolException("Required field 'gameId' was not found in serialized data for struct TLeaderBoard")
    if (!_got_topRanking) throw new TProtocolException("Required field 'topRanking' was not found in serialized data for struct TLeaderBoard")
    if (!_got_total) throw new TProtocolException("Required field 'total' was not found in serialized data for struct TLeaderBoard")
    new Immutable(
      gameId,
      topRanking,
      myRanking,
      total,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    gameId: String,
    topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem] = Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem](),
    myRanking: _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardItem] = _root_.scala.None,
    total: Int
  ): TLeaderBoard =
    new Immutable(
      gameId,
      topRanking,
      myRanking,
      total
    )

  def unapply(_item: TLeaderBoard): _root_.scala.Option[_root_.scala.Tuple4[String, Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem], Option[xed.leaderboard.domain.thrift.TLeaderBoardItem], Int]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readGameIdValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeGameIdField(gameId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(GameIdField)
    writeGameIdValue(gameId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeGameIdValue(gameId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(gameId_item)
  }

  @inline private[thrift] def readTopRankingValue(_iprot: TProtocol): Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[xed.leaderboard.domain.thrift.TLeaderBoardItem](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          xed.leaderboard.domain.thrift.TLeaderBoardItem.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeTopRankingField(topRanking_item: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TopRankingField)
    writeTopRankingValue(topRanking_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTopRankingValue(topRanking_item: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, topRanking_item.size))
    topRanking_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = topRanking_item.size
        while (_i < _size) {
          val topRanking_item_element = topRanking_item(_i)
          topRanking_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        topRanking_item.foreach { topRanking_item_element =>
          topRanking_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thrift] def readMyRankingValue(_iprot: TProtocol): xed.leaderboard.domain.thrift.TLeaderBoardItem = {
    xed.leaderboard.domain.thrift.TLeaderBoardItem.decode(_iprot)
  }

  @inline private def writeMyRankingField(myRanking_item: xed.leaderboard.domain.thrift.TLeaderBoardItem, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(MyRankingField)
    writeMyRankingValue(myRanking_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeMyRankingValue(myRanking_item: xed.leaderboard.domain.thrift.TLeaderBoardItem, _oprot: TProtocol): Unit = {
    myRanking_item.write(_oprot)
  }

  @inline private[thrift] def readTotalValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeTotalField(total_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TotalField)
    writeTotalValue(total_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTotalValue(total_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(total_item)
  }


  object Immutable extends ThriftStructCodec3[TLeaderBoard] {
    override def encode(_item: TLeaderBoard, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TLeaderBoard = TLeaderBoard.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TLeaderBoard] = TLeaderBoard.metaData
  }

  /**
   * The default read-only implementation of TLeaderBoard.  You typically should not need to
   * directly reference this class; instead, use the TLeaderBoard.apply method to construct
   * new instances.
   */
  class Immutable(
      val gameId: String,
      val topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem],
      val myRanking: _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardItem],
      val total: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TLeaderBoard {
    def this(
      gameId: String,
      topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem] = Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem](),
      myRanking: _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardItem] = _root_.scala.None,
      total: Int
    ) = this(
      gameId,
      topRanking,
      myRanking,
      total,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      gameIdOffset: Int,
      val topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem],
      val myRanking: _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardItem],
      val total: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TLeaderBoard {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val gameId: String =
      if (gameIdOffset == -1)
        null
      else {
        _proto.decodeString(_buf, gameIdOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TLeaderBoard trait with additional state or
   * behavior and implement the read-only methods from TLeaderBoard using an underlying
   * instance.
   */
  trait Proxy extends TLeaderBoard {
    protected def _underlying_TLeaderBoard: TLeaderBoard
    override def gameId: String = _underlying_TLeaderBoard.gameId
    override def topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem] = _underlying_TLeaderBoard.topRanking
    override def myRanking: _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardItem] = _underlying_TLeaderBoard.myRanking
    override def total: Int = _underlying_TLeaderBoard.total
    override def _passthroughFields = _underlying_TLeaderBoard._passthroughFields
  }
}

/**
 * Prefer the companion object's [[xed.leaderboard.domain.thrift.TLeaderBoard.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TLeaderBoard
  extends ThriftStruct
  with _root_.scala.Product4[String, Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem], Option[xed.leaderboard.domain.thrift.TLeaderBoardItem], Int]
  with ValidatingThriftStruct[TLeaderBoard]
  with java.io.Serializable
{
  import TLeaderBoard._

  def gameId: String
  def topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem]
  def myRanking: _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardItem]
  def total: Int

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = gameId
  def _2 = topRanking
  def _3 = myRanking
  def _4 = total

  def toTuple: _root_.scala.Tuple4[String, Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem], Option[xed.leaderboard.domain.thrift.TLeaderBoardItem], Int] = {
    (
      gameId,
      topRanking,
      myRanking,
      total
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (gameId ne null) {
                writeGameIdValue(gameId, _oprot)
                _root_.scala.Some(TLeaderBoard.GameIdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (topRanking ne null) {
                writeTopRankingValue(topRanking, _oprot)
                _root_.scala.Some(TLeaderBoard.TopRankingField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (myRanking.isDefined) {
                writeMyRankingValue(myRanking.get, _oprot)
                _root_.scala.Some(TLeaderBoard.MyRankingField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (true) {
                writeTotalValue(total, _oprot)
                _root_.scala.Some(TLeaderBoard.TotalField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TLeaderBoard = {
    var gameId: String = this.gameId
    var topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem] = this.topRanking
    var myRanking: _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardItem] = this.myRanking
    var total: Int = this.total
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        gameId = readGameIdValue(_blob.read)
      case 2 =>
        topRanking = readTopRankingValue(_blob.read)
      case 3 =>
        myRanking = _root_.scala.Some(readMyRankingValue(_blob.read))
      case 4 =>
        total = readTotalValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      gameId,
      topRanking,
      myRanking,
      total,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TLeaderBoard = {
    var gameId: String = this.gameId
    var topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem] = this.topRanking
    var myRanking: _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardItem] = this.myRanking
    var total: Int = this.total

    _fieldId match {
      case 1 =>
        gameId = null
      case 2 =>
        topRanking = Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem]()
      case 3 =>
        myRanking = _root_.scala.None
      case 4 =>
        total = 0
      case _ =>
    }
    new Immutable(
      gameId,
      topRanking,
      myRanking,
      total,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetGameId: TLeaderBoard = unsetField(1)

  def unsetTopRanking: TLeaderBoard = unsetField(2)

  def unsetMyRanking: TLeaderBoard = unsetField(3)

  def unsetTotal: TLeaderBoard = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    TLeaderBoard.validate(this)
    _oprot.writeStructBegin(Struct)
    if (gameId ne null) writeGameIdField(gameId, _oprot)
    if (topRanking ne null) writeTopRankingField(topRanking, _oprot)
    if (myRanking.isDefined) writeMyRankingField(myRanking.get, _oprot)
    writeTotalField(total, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    gameId: String = this.gameId,
    topRanking: Seq[xed.leaderboard.domain.thrift.TLeaderBoardItem] = this.topRanking,
    myRanking: _root_.scala.Option[xed.leaderboard.domain.thrift.TLeaderBoardItem] = this.myRanking,
    total: Int = this.total,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TLeaderBoard =
    new Immutable(
      gameId,
      topRanking,
      myRanking,
      total,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TLeaderBoard]

  private def _equals(x: TLeaderBoard, y: TLeaderBoard): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TLeaderBoard]) &&
      _passthroughFields == other.asInstanceOf[TLeaderBoard]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.gameId
    case 1 => this.topRanking
    case 2 => this.myRanking
    case 3 => this.total
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TLeaderBoard"

  def _codec: ValidatingThriftStructCodec3[TLeaderBoard] = TLeaderBoard
}

